import{ObjectId as h}from"mongodb";import{z as a}from"zod";import{APIError as K}from"better-call";var W=a.object({id:a.string(),providerId:a.string(),accountId:a.string(),userId:a.string(),accessToken:a.string().nullish(),refreshToken:a.string().nullish(),idToken:a.string().nullish(),accessTokenExpiresAt:a.date().nullish(),refreshTokenExpiresAt:a.date().nullish(),scope:a.string().nullish(),password:a.string().nullish(),createdAt:a.date().default(()=>new Date),updatedAt:a.date().default(()=>new Date)}),H=a.object({id:a.string(),email:a.string().transform(e=>e.toLowerCase()),emailVerified:a.boolean().default(!1),name:a.string(),image:a.string().nullish(),createdAt:a.date().default(()=>new Date),updatedAt:a.date().default(()=>new Date)}),J=a.object({id:a.string(),userId:a.string(),expiresAt:a.date(),createdAt:a.date().default(()=>new Date),updatedAt:a.date().default(()=>new Date),token:a.string(),ipAddress:a.string().nullish(),userAgent:a.string().nullish()}),z=a.object({id:a.string(),value:a.string(),createdAt:a.date().default(()=>new Date),updatedAt:a.date().default(()=>new Date),expiresAt:a.date(),identifier:a.string()});var b=Object.create(null),w=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?b:globalThis),O=new Proxy(b,{get(e,d){return w()[d]??b[d]},has(e,d){let i=w();return d in i||d in b},set(e,d,i){let l=w(!0);return l[d]=i,!0},deleteProperty(e,d){if(!d)return!1;let i=w(!0);return delete i[d],!0},ownKeys(){let e=w(!0);return Object.keys(e)}});function I(e){return e?e!=="false":!1}var N=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var U=N==="test"||I(O.TEST);import{createRandomStringGenerator as ae}from"@better-auth/utils/random";import{z as Ce}from"zod";import{APIError as je}from"better-call";import{createHash as Oe}from"@better-auth/utils/hash";import{xchacha20poly1305 as Re}from"@noble/ciphers/chacha";import{bytesToHex as Ie,hexToBytes as Ne,utf8ToBytes as Ue}from"@noble/ciphers/utils";import{managedNonce as qe}from"@noble/ciphers/webcrypto";import{scryptAsync as ge}from"@noble/hashes/scrypt";import{getRandomValues as he}from"uncrypto";import{hex as we}from"@better-auth/utils/hex";import{createRandomStringGenerator as q}from"@better-auth/utils/random";var B=q("a-z","0-9","A-Z","-_");var T=["info","success","warn","error","debug"];function L(e,d){return T.indexOf(d)<=T.indexOf(e)}var g={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},E={info:g.fg.blue,success:g.fg.green,warn:g.fg.yellow,error:g.fg.red,debug:g.fg.magenta},M=(e,d)=>{let i=new Date().toISOString();return`${g.dim}${i}${g.reset} ${E[e]}${e.toUpperCase()}${g.reset} ${g.bright}Better Auth${g.reset} ${d}`},D=e=>{let d=e?.disabled!==!0,i=e?.level??"error",l=(n,r,t=[])=>{if(!d||!L(i,n))return;let s=M(n,r);if(!e||typeof e.log!="function"){n==="error"?console.error(s,...t):n==="warn"?console.warn(s,...t):console.log(s,...t);return}e.log(n==="success"?"info":n,s,...t)};return Object.fromEntries(T.map(n=>[n,(...[r,...t])=>l(n,r,t)]))},V=D();var x=e=>{let d=e.plugins?.reduce((o,c)=>{let u=c.schema;if(!u)return o;for(let[f,A]of Object.entries(u))o[f]={fields:{...o[f]?.fields,...A.fields},modelName:A.modelName||f};return o},{}),i=e.rateLimit?.storage==="database",l={rateLimit:{modelName:e.rateLimit?.modelName||"rateLimit",fields:{key:{type:"string",fieldName:e.rateLimit?.fields?.key||"key"},count:{type:"number",fieldName:e.rateLimit?.fields?.count||"count"},lastRequest:{type:"number",fieldName:e.rateLimit?.fields?.lastRequest||"lastRequest"}}}},{user:n,session:r,account:t,...s}=d||{};return{user:{modelName:e.user?.modelName||"user",fields:{name:{type:"string",required:!0,fieldName:e.user?.fields?.name||"name"},email:{type:"string",unique:!0,required:!0,fieldName:e.user?.fields?.email||"email"},emailVerified:{type:"boolean",defaultValue:()=>!1,required:!0,fieldName:e.user?.fields?.emailVerified||"emailVerified"},image:{type:"string",required:!1,fieldName:e.user?.fields?.image||"image"},createdAt:{type:"date",defaultValue:()=>new Date,required:!0,fieldName:e.user?.fields?.createdAt||"createdAt"},updatedAt:{type:"date",defaultValue:()=>new Date,required:!0,fieldName:e.user?.fields?.updatedAt||"updatedAt"},...n?.fields,...e.user?.additionalFields},order:1},session:{modelName:e.session?.modelName||"session",fields:{expiresAt:{type:"date",required:!0,fieldName:e.session?.fields?.expiresAt||"expiresAt"},token:{type:"string",required:!0,fieldName:e.session?.fields?.token||"token",unique:!0},createdAt:{type:"date",required:!0,fieldName:e.session?.fields?.createdAt||"createdAt"},updatedAt:{type:"date",required:!0,fieldName:e.session?.fields?.updatedAt||"updatedAt"},ipAddress:{type:"string",required:!1,fieldName:e.session?.fields?.ipAddress||"ipAddress"},userAgent:{type:"string",required:!1,fieldName:e.session?.fields?.userAgent||"userAgent"},userId:{type:"string",fieldName:e.session?.fields?.userId||"userId",references:{model:e.user?.modelName||"user",field:"id",onDelete:"cascade"},required:!0},...r?.fields,...e.session?.additionalFields},order:2},account:{modelName:e.account?.modelName||"account",fields:{accountId:{type:"string",required:!0,fieldName:e.account?.fields?.accountId||"accountId"},providerId:{type:"string",required:!0,fieldName:e.account?.fields?.providerId||"providerId"},userId:{type:"string",references:{model:e.user?.modelName||"user",field:"id",onDelete:"cascade"},required:!0,fieldName:e.account?.fields?.userId||"userId"},accessToken:{type:"string",required:!1,fieldName:e.account?.fields?.accessToken||"accessToken"},refreshToken:{type:"string",required:!1,fieldName:e.account?.fields?.refreshToken||"refreshToken"},idToken:{type:"string",required:!1,fieldName:e.account?.fields?.idToken||"idToken"},accessTokenExpiresAt:{type:"date",required:!1,fieldName:e.account?.fields?.accessTokenExpiresAt||"accessTokenExpiresAt"},refreshTokenExpiresAt:{type:"date",required:!1,fieldName:e.account?.fields?.accessTokenExpiresAt||"refreshTokenExpiresAt"},scope:{type:"string",required:!1,fieldName:e.account?.fields?.scope||"scope"},password:{type:"string",required:!1,fieldName:e.account?.fields?.password||"password"},createdAt:{type:"date",required:!0,fieldName:e.account?.fields?.createdAt||"createdAt"},updatedAt:{type:"date",required:!0,fieldName:e.account?.fields?.updatedAt||"updatedAt"},...t?.fields},order:3},verification:{modelName:e.verification?.modelName||"verification",fields:{identifier:{type:"string",required:!0,fieldName:e.verification?.fields?.identifier||"identifier"},value:{type:"string",required:!0,fieldName:e.verification?.fields?.value||"value"},expiresAt:{type:"date",required:!0,fieldName:e.verification?.fields?.expiresAt||"expiresAt"},createdAt:{type:"date",required:!1,defaultValue:()=>new Date,fieldName:e.verification?.fields?.createdAt||"createdAt"},updatedAt:{type:"date",required:!1,defaultValue:()=>new Date,fieldName:e.verification?.fields?.updatedAt||"updatedAt"}},order:4},...s,...i?l:{}}};import{z as ht}from"zod";import{Kysely as bt,MssqlDialect as vt}from"kysely";import{MysqlDialect as kt,PostgresDialect as Ot,SqliteDialect as Dt}from"kysely";function v(e,d,i){return i==="update"?e:e==null&&d.defaultValue?typeof d.defaultValue=="function"?d.defaultValue():d.defaultValue:e}var _=e=>{let d=x(e);function i(r,t,s){if(r==="id"||r==="_id"||d[s].fields[r].references?.field==="id"){if(typeof t!="string"){if(t instanceof h)return t;if(Array.isArray(t))return t.map(o=>{if(typeof o=="string")try{return new h(o)}catch{return o}if(o instanceof h)return o;throw new Error("Invalid id value")});throw new Error("Invalid id value")}try{return new h(t)}catch{return t}}return t}function l(r,t,s){return r==="id"||d[s].fields[r].references?.field==="id"?t instanceof h?t.toHexString():Array.isArray(t)?t.map(o=>o instanceof h?o.toHexString():o):t:t}function n(r,t){return r==="id"?"_id":d[t].fields[r].fieldName||r}return{transformInput(r,t,s){let o=s==="update"?{}:{_id:new h},c=d[t].fields;for(let u in c){let f=r[u];f===void 0&&(!c[u].defaultValue||s==="update")||(o[c[u].fieldName||u]=v(i(u,f,t),c[u],s))}return o},transformOutput(r,t,s=[]){let o=r.id||r._id?s.length===0||s.includes("id")?{id:r.id?r.id.toString():r._id.toString()}:{}:{},c=d[t].fields;for(let u in c){if(s.length&&!s.includes(u))continue;let f=c[u];f&&(o[u]=l(u,r[f.fieldName||u],t))}return o},convertWhereClause(r,t){if(!r.length)return{};let s=r.map(f=>{let{field:A,value:p,operator:k="eq",connector:F="AND"}=f,m,y=n(A,t);switch(k.toLowerCase()){case"eq":m={[y]:i(A,p,t)};break;case"in":m={[y]:{$in:Array.isArray(p)?i(A,p,t):[i(A,p,t)]}};break;case"gt":m={[y]:{$gt:p}};break;case"gte":m={[y]:{$gte:p}};break;case"lt":m={[y]:{$lt:p}};break;case"lte":m={[y]:{$lte:p}};break;case"ne":m={[y]:{$ne:p}};break;case"contains":m={[y]:{$regex:`.*${p}.*`}};break;case"starts_with":m={[y]:{$regex:`${p}.*`}};break;case"ends_with":m={[y]:{$regex:`.*${p}`}};break;default:throw new Error(`Unsupported operator: ${k}`)}return{condition:m,connector:F}});if(s.length===1)return s[0].condition;let o=s.filter(f=>f.connector==="AND").map(f=>f.condition),c=s.filter(f=>f.connector==="OR").map(f=>f.condition),u={};return o.length&&(u={...u,$and:o}),c.length&&(u={...u,$or:c}),u},getModelName:r=>d[r].modelName,getField:n}},Ar=e=>d=>{let i=_(d);return{id:"mongodb-adapter",async create(l){let{model:n,data:r,select:t}=l,s=i.transformInput(r,n,"create");s.id&&delete s.id;let c=(await e.collection(i.getModelName(n)).insertOne(s)).insertedId,u={...s,id:c.toString()};return i.transformOutput(u,n,t)},async findOne(l){let{model:n,where:r,select:t}=l,s=i.convertWhereClause(r,n),o=await e.collection(i.getModelName(n)).findOne(s);return o?i.transformOutput(o,n,t):null},async findMany(l){let{model:n,where:r,limit:t,offset:s,sortBy:o}=l,c=r?i.convertWhereClause(r,n):{},u=e.collection(i.getModelName(n)).find(c);return t&&u.limit(t),s&&u.skip(s),o&&u.sort(i.getField(o.field,n),o.direction==="desc"?-1:1),(await u.toArray()).map(A=>i.transformOutput(A,n))},async update(l){let{model:n,where:r,update:t}=l,s=i.convertWhereClause(r,n),o=i.transformInput(t,n,"update"),c=await e.collection(i.getModelName(n)).findOneAndUpdate(s,{$set:o},{returnDocument:"after"});return c?i.transformOutput(c,n):null},async updateMany(l){let{model:n,where:r,update:t}=l,s=i.convertWhereClause(r,n),o=i.transformInput(t,n,"update");return(await e.collection(i.getModelName(n)).updateMany(s,{$set:o})).modifiedCount},async delete(l){let{model:n,where:r}=l,t=i.convertWhereClause(r,n),s=await e.collection(i.getModelName(n)).findOneAndDelete(t);return s?i.transformOutput(s,n):null},async deleteMany(l){let{model:n,where:r}=l,t=i.convertWhereClause(r,n);return(await e.collection(i.getModelName(n)).deleteMany(t)).deletedCount}}};export{Ar as mongodbAdapter};
