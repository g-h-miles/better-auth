"use strict";var se=Object.defineProperty;var ar=Object.getOwnPropertyDescriptor;var cr=Object.getOwnPropertyNames;var dr=Object.prototype.hasOwnProperty;var s=(e,t)=>se(e,"name",{value:t,configurable:!0});var lr=(e,t)=>{for(var r in t)se(e,r,{get:t[r],enumerable:!0})},ur=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of cr(t))!dr.call(e,i)&&i!==r&&se(e,i,{get:()=>t[i],enumerable:!(o=ar(t,i))||o.enumerable});return e};var pr=e=>ur(se({},"__esModule",{value:!0}),e);var zr={};lr(zr,{APIError:()=>fe.APIError,callbackOAuth:()=>$e,changeEmail:()=>We,changePassword:()=>Fe,createAuthEndpoint:()=>w,createAuthMiddleware:()=>Y,createEmailVerificationToken:()=>$,deleteUser:()=>Ge,deleteUserCallback:()=>we,error:()=>Qe,forgetPassword:()=>Be,forgetPasswordCallback:()=>Me,freshSessionMiddleware:()=>Ir,getEndpoints:()=>nr,getSession:()=>pe,getSessionFromCtx:()=>Z,linkSocialAccount:()=>Xe,listSessions:()=>Ie,listUserAccounts:()=>Ye,ok:()=>Ze,optionsMiddleware:()=>be,originCheckMiddleware:()=>ke,resetPassword:()=>ze,revokeOtherSessions:()=>Pe,revokeSession:()=>Le,revokeSessions:()=>xe,router:()=>Mr,sendVerificationEmail:()=>De,sendVerificationEmailFn:()=>Yt,sessionMiddleware:()=>x,setPassword:()=>He,signInEmail:()=>je,signInSocial:()=>Ne,signOut:()=>Ve,signUpEmail:()=>Ke,updateUser:()=>qe,verifyEmail:()=>Ce});module.exports=pr(zr);var O=require("better-call");var nt=require("better-call");var K=require("better-call"),be=(0,K.createMiddleware)(async()=>({})),Y=(0,K.createMiddlewareCreator)({use:[be,(0,K.createMiddleware)(async()=>({}))]}),w=(0,K.createEndpointCreator)({use:[be]});function ye(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}s(ye,"escapeRegExpChar");function mr(e){let t="";for(let r=0;r<e.length;r++)t+=ye(e[r]);return t}s(mr,"escapeRegExpString");function et(e,t=!0){if(Array.isArray(e))return`(?:${e.map(p=>`^${et(p,t)}$`).join("|")})`;let r="",o="",i=".";t===!0?(r="/",o="[/\\\\]",i="[^/\\\\]"):t&&(r=t,o=mr(r),o.length>1?(o=`(?:${o})`,i=`((?!${o}).)`):i=`[^${o}]`);let n=t?`${o}+?`:"",a=t?`${o}*?`:"",d=t?e.split(r):[e],c="";for(let l=0;l<d.length;l++){let p=d[l],y=d[l+1],g="";if(!(!p&&l>0)){if(t&&(l===d.length-1?g=a:y!=="**"?g=n:g=""),t&&p==="**"){g&&(c+=l===0?"":g,c+=`(?:${i}*?${g})*?`);continue}for(let u=0;u<p.length;u++){let A=p[u];A==="\\"?u<p.length-1&&(c+=ye(p[u+1]),u++):A==="?"?c+=i:A==="*"?c+=`${i}*?`:c+=ye(A)}c+=g}}return c}s(et,"transform");function fr(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}s(fr,"isMatch");function ae(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=et(e,t.separator),o=new RegExp(`^${r}$`,t.flags),i=fr.bind(null,o);return i.options=t,i.pattern=e,i.regexp=o,i}s(ae,"wildcardMatch");var ce=Object.create(null),ie=s(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ce:globalThis),"_getEnv"),tt=new Proxy(ce,{get(e,t){return ie()[t]??ce[t]},has(e,t){let r=ie();return t in r||t in ce},set(e,t,r){let o=ie(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ie(!0);return delete r[t],!0},ownKeys(){let e=ie(!0);return Object.keys(e)}});function gr(e){return e?e!=="false":!1}s(gr,"toBoolean");var Ae=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var de=Ae==="dev"||Ae==="development",rt=Ae==="test"||gr(tt.TEST);var H=class extends Error{static{s(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function ot(e){try{return new URL(e).origin}catch{return null}}s(ot,"getOrigin");function it(e){return e.includes("://")?new URL(e).host:e}s(it,"getHost");var ke=Y(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,d=r?.currentURL,c=t?.errorCallbackURL,l=t?.newUserCallbackURL,p=o.trustedOrigins,y=e.headers?.has("cookie"),g=s((A,_)=>A.startsWith("/")?!1:_.includes("*")?ae(_)(it(A)):A.startsWith(_),"matchesPattern"),u=s((A,_)=>{if(!A)return;if(!p.some(F=>g(A,F)||A?.startsWith("/")&&_!=="origin"&&!A.includes(":")))throw e.context.logger.error(`Invalid ${_}: ${A}`),e.context.logger.info(`If it's a valid URL, please add ${A} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${p}`),new nt.APIError("FORBIDDEN",{message:`Invalid ${_}`})},"validateURL");y&&!e.context.options.advanced?.disableCSRFCheck&&u(i,"origin"),n&&u(n,"callbackURL"),a&&u(a,"redirectURL"),d&&u(d,"currentURL"),c&&u(c,"errorCallbackURL"),l&&u(a,"newUserCallbackURL")});var I=require("better-call"),T=require("zod");var G=s((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");var st=require("@better-auth/utils/base64");var at=require("@better-auth/utils/hmac");async function Re(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=st.base64Url.encode(JSON.stringify({session:t,expiresAt:G(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,at.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new H("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}s(Re,"setCookieCache");async function L(e,t,r,o){let i=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...i,maxAge:n,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Re(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}s(L,"setSessionCookie");function V(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}s(V,"deleteSessionCookie");var ft=require("@better-fetch/fetch"),gt=require("better-call"),W=require("jose");var ct=require("@better-auth/utils/hash"),dt=require("@better-auth/utils/base64");async function lt(e){let t=await(0,ct.createHash)("SHA-256").digest(e);return dt.base64Url.encode(new Uint8Array(t),{padding:!1})}s(lt,"generateCodeChallenge");function le(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?G(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}s(le,"getOAuth2Tokens");async function R({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:i,scopes:n,claims:a,redirectURI:d,duration:c}){let l=new URL(r);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",t.clientId),l.searchParams.set("state",o),l.searchParams.set("scope",n.join(" ")),l.searchParams.set("redirect_uri",t.redirectURI||d),i){let p=await lt(i);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",p)}if(a){let p=a.reduce((y,g)=>(y[g]=null,y),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...p}}))}return c&&l.searchParams.set("duration",c),l}s(R,"createAuthorizationURL");var ut=require("@better-fetch/fetch");var hr=require("jose");async function k({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:i,authentication:n}){let a=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),n==="basic"){let y=btoa(`${o.clientId}:${o.clientSecret}`);d.authorization=`Basic ${y}`}else a.set("client_id",o.clientId),a.set("client_secret",o.clientSecret);let{data:c,error:l}=await(0,ut.betterFetch)(i,{method:"POST",body:a,headers:d});if(l)throw l;return le(c)}s(k,"validateAuthorizationCode");var B=require("zod"),Ue=require("better-call");var Ar=require("@better-auth/utils/hash"),kr=require("@noble/ciphers/chacha"),Ee=require("@noble/ciphers/utils"),Rr=require("@noble/ciphers/webcrypto");var wr=require("@noble/hashes/scrypt"),br=require("uncrypto"),yr=require("@better-auth/utils/hex");var pt=require("@better-auth/utils/random"),ne=(0,pt.createRandomStringGenerator)("a-z","0-9","A-Z","-_");async function ue(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?ot(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Ue.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=ne(128),i=ne(32),n=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:n,identifier:i,expiresAt:a});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Ue.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:o}}s(ue,"generateState");async function mt(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=B.z.object({callbackURL:B.z.string(),codeVerifier:B.z.string(),errorURL:B.z.string().optional(),newUserURL:B.z.string().optional(),expiresAt:B.z.number(),link:B.z.object({email:B.z.string(),userId:B.z.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}s(mt,"parseState");var ht=s(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:i}){let n=o||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:i})=>k({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let i=(0,W.decodeProtectedHeader)(r),{kid:n,alg:a}=i;if(!n||!a)return!1;let d=await Er(n),{payload:c}=await(0,W.jwtVerify)(r,d,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{c[l]!==void 0&&(c[l]=!!c[l])}),o&&c.nonce!==o?!1:!!c},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=(0,W.decodeJwt)(r.idToken);if(!o)return null;let i=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:i,emailVerified:!1,email:o.email,...n},data:o}}}},"apple"),Er=s(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await(0,ft.betterFetch)(`${t}${r}`);if(!o?.keys)throw new gt.APIError("BAD_REQUEST",{message:"Keys not found"});let i=o.keys.find(n=>n.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await(0,W.importJWK)(i,i.alg)},"getApplePublicKey");var wt=require("@better-fetch/fetch");var bt=s(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,wt.betterFetch)("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...i},data:r}}}),"discord");var yt=require("@better-fetch/fetch");var At=s(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["email","public_profile"];return e.scope&&i.push(...e.scope),await R({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:t,redirectURI:o})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,yt.betterFetch)("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...i},data:r}}}),"facebook");var _e=require("@better-fetch/fetch");var kt=s(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:i,redirectURI:n}){let a=o||["user:email"];return e.scope&&a.push(...e.scope),R({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:n})},validateAuthorizationCode:s(async({code:r,redirectURI:o})=>k({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await(0,_e.betterFetch)("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=!1,{data:a}=await(0,_e.betterFetch)("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(o.email=(a.find(c=>c.primary)??a[0])?.email,n=a.find(c=>c.email===o.email)?.verified??!1);let d=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:n,...d},data:o}}}},"github");var Te=["info","success","warn","error","debug"];function Ur(e,t){return Te.indexOf(t)<=Te.indexOf(e)}s(Ur,"shouldPublishLog");var M={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},_r={info:M.fg.blue,success:M.fg.green,warn:M.fg.yellow,error:M.fg.red,debug:M.fg.magenta},Tr=s((e,t)=>{let r=new Date().toISOString();return`${M.dim}${r}${M.reset} ${_r[e]}${e.toUpperCase()}${M.reset} ${M.bright}Better Auth${M.reset} ${t}`},"formatMessage"),Or=s(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=s((i,n,a=[])=>{if(!t||!Ur(r,i))return;let d=Tr(i,n);if(!e||typeof e.log!="function"){i==="error"?console.error(d,...a):i==="warn"?console.warn(d,...a):console.log(d,...a);return}e.log(i==="success"?"info":i,d,...a)},"LogFunc");return Object.fromEntries(Te.map(i=>[i,(...[n,...a])=>o(i,n,a)]))},"createLogger"),C=Or();var Rt=require("@better-fetch/fetch"),Et=require("jose");var Ut=s(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw C.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new H("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new H("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let a=await R({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:o,redirectURI:i});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:i}=await(0,Rt.betterFetch)(o);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,Et.decodeJwt)(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");var _t=require("@better-fetch/fetch");var Tt=require("jose");var Ot=s(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let n=i.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),R({id:"microsoft",options:e,authorizationEndpoint:r,state:i.state,codeVerifier:i.codeVerifier,scopes:n,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:n,redirectURI:a}){return k({code:i,codeVerifier:n,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:o})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let n=(0,Tt.decodeJwt)(i.idToken),a=e.profilePhotoSize||48;await(0,_t.betterFetch)(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(c){if(!(e.disableProfilePhoto||!c.response.ok))try{let p=await c.response.clone().arrayBuffer(),y=Buffer.from(p).toString("base64");n.picture=`data:image/jpeg;base64, ${y}`}catch(l){C.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let d=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...d},data:n}}}},"microsoft");var St=require("@better-fetch/fetch");var vt=s(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),R({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:o,redirectURI:i})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,St.betterFetch)("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...i},data:r}}}),"spotify");var X={isAction:!1};var It=require("@better-auth/utils/random");var Lt=s(e=>(0,It.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32),"generateId");var xt=require("jose");var Pt=s(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["user:read:email","openid"];return e.scope&&i.push(...e.scope),R({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return C.error("No idToken found in token"),null;let o=(0,xt.decodeJwt)(r),i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...i},data:o}}}),"twitch");var Dt=require("@better-fetch/fetch");var Ct=s(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),R({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,Dt.betterFetch)("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...i},data:r}}}),"twitter");var Nt=require("@better-fetch/fetch");var jt=s(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:s(async({state:r,scopes:o,codeVerifier:i,redirectURI:n})=>{let a=o||["account_info.read"];return e.scope&&a.push(...e.scope),await R({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:n,codeVerifier:i})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:i})=>await k({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await(0,Nt.betterFetch)("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...n},data:o}}}},"dropbox");var $t=require("@better-fetch/fetch");var Vt=s(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:s(async({state:o,scopes:i,redirectURI:n})=>{let a=i||["profile","email","openid"];return e.scope&&a.push(...e.scope),await R({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:o,redirectURI:n})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:o,redirectURI:i})=>await k({code:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:i,error:n}=await(0,$t.betterFetch)("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(n)return null;let a=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...a},data:i}}}},"linkedin");var Bt=require("@better-fetch/fetch");var Oe=s((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),Sr=s(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:Oe(`${t}/oauth/authorize`),tokenEndpoint:Oe(`${t}/oauth/token`),userinfoEndpoint:Oe(`${t}/api/v4/user`)}},"issuerToEndpoints"),Mt=s(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Sr(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:s(async({state:a,scopes:d,codeVerifier:c,redirectURI:l})=>{let p=d||["read_user"];return e.scope&&p.push(...e.scope),await R({id:i,options:e,authorizationEndpoint:t,scopes:p,state:a,redirectURI:l,codeVerifier:c})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:a,redirectURI:d,codeVerifier:c})=>k({code:a,redirectURI:e.redirectURI||d,options:e,codeVerifier:c,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:d,error:c}=await(0,Bt.betterFetch)(o,{headers:{authorization:`Bearer ${a.accessToken}`}});if(c||d.state!=="active"||d.locked)return null;let l=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...l},data:d}}}},"gitlab");var Se=require("@better-fetch/fetch");var zt=s(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identity"];return e.scope&&i.push(...e.scope),R({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:a}=await(0,Se.betterFetch)("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:o.toString()});if(a)throw a;return le(n)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,Se.betterFetch)("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...i},data:r}}}),"reddit");var qt=require("zod"),vr={apple:ht,discord:bt,facebook:At,github:kt,microsoft:Ot,google:Ut,spotify:vt,twitch:Pt,twitter:Ct,dropbox:jt,linkedin:Vt,gitlab:Mt,reddit:zt},ve=Object.keys(vr),Ft=qt.z.enum(ve,{description:"OAuth2 provider to use"});var N=require("zod");var ee=require("better-call");var z=require("better-call");var Q=require("zod");function Ht(e){try{return JSON.parse(e)}catch{return null}}s(Ht,"safeJSONParse");var f={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var Gt=require("@better-auth/utils/hmac"),Wt=require("@better-auth/utils/base64"),Qt=require("@better-auth/utils/binary");var pe=s(()=>w("/get-session",{method:"GET",query:Q.z.optional(Q.z.object({disableCookieCache:Q.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(Q.z.string().transform(e=>e==="true")).optional(),disableRefresh:Q.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Ht(Qt.binary.decode(Wt.base64.decode(r))):null;if(o&&!await(0,Gt.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return V(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let p=o.session;if(o.expiresAt<Date.now()||p.session.expiresAt<new Date){let g=e.context.authCookies.sessionData.name;e.setCookie(g,"",{maxAge:0})}else return e.json(p)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return V(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(n);let a=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-a*1e3+d*1e3<=Date.now()){let p=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:G(e.context.sessionConfig.expiresIn,"sec")});if(!p)return V(e),e.json(null,{status:401});let y=(p.expiresAt.valueOf()-Date.now())/1e3;return await L(e,{session:p,user:n.user},!1,{maxAge:y}),e.json({session:p,user:n.user})}return await Re(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new z.APIError("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION})}}),"getSession"),Z=s(async(e,t)=>{if(e.context.session)return e.context.session;let r=await pe()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),x=Y(async e=>{let t=await Z(e);if(!t?.session)throw new z.APIError("UNAUTHORIZED");return{session:t}}),Ir=Y(async e=>{let t=await Z(e);if(!t?.session)throw new z.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new z.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}}),Ie=s(()=>w("/list-sessions",{method:"GET",use:[x],requireHeaders:!0,metadata:{openapi:{description:"List all active sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}}}}}}}}}},async e=>{let r=(await e.context.internalAdapter.listSessions(e.context.session.user.id)).filter(o=>o.expiresAt>new Date);return e.json(r)}),"listSessions"),Le=w("/revoke-session",{method:"POST",body:Q.z.object({token:Q.z.string({description:"The token to revoke"})}),use:[x],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new z.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new z.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new z.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),xe=w("/revoke-sessions",{method:"POST",use:[x],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new z.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Pe=w("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[x],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new z.APIError("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(i.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});var Jt=require("jose");var Zt=require("jose");async function Kt(e,t,r=3600){return await new Zt.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}s(Kt,"signJWT");async function $(e,t,r){return await Kt({email:t.toLowerCase(),updateTo:r},e)}s($,"createEmailVerificationToken");async function Yt(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ee.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await $(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}s(Yt,"sendVerificationEmailFn");var De=w("/send-verification-email",{method:"POST",query:N.z.object({currentURL:N.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:N.z.object({email:N.z.string({description:"The email to send the verification email to"}).email(),callbackURL:N.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ee.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ee.APIError("BAD_REQUEST",{message:f.USER_NOT_FOUND});return await Yt(e,r.user),e.json({status:!0})}),Ce=w("/verify-email",{method:"GET",query:N.z.object({token:N.z.string({description:"The token to verify the email"}),callbackURL:N.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new ee.APIError("UNAUTHORIZED",{message:d})}s(t,"redirectOnError");let{token:r}=e.query,o;try{o=await(0,Jt.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return e.context.logger.error("Failed to verify email",d),t("invalid_token")}let n=N.z.object({email:N.z.string().email(),updateTo:N.z.string().optional()}).parse(o.payload),a=await e.context.internalAdapter.findUserByEmail(n.email);if(!a)return t("user_not_found");if(n.updateTo){let d=await Z(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let c=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),l=await $(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:c,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await Z(e)){let c=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!c)throw new ee.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await L(e,{session:c,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function me(e,{userInfo:t,account:r,callbackURL:o}){let i=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(c=>{throw C.error(`Better auth was unable to query your database.
Error: `,c),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=i?.user,a=!n;if(i){let c=i.accounts.find(l=>l.providerId===r.providerId);if(c){let l=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([p,y])=>y!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(c.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return de&&C.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:i.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(y){return C.error("Unable to link account",y),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(c=>c?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let c=await $(e.context.secret,n.email),l=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:l,token:c},e.request)}}catch(c){return c instanceof fe.APIError?{error:c.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(n.id,e.request);return d?{data:{session:d,user:n},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}s(me,"handleOAuthUserInfo");var Ne=w("/sign-in/social",{method:"POST",query:T.z.object({currentURL:T.z.string().optional()}).optional(),body:T.z.object({callbackURL:T.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:T.z.string().optional(),errorCallbackURL:T.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:Ft,disableRedirect:T.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:T.z.optional(T.z.object({token:T.z.string({description:"ID token from the provider"}),nonce:T.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:T.z.string({description:"Access token from the provider"}).optional(),refreshToken:T.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:T.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new I.APIError("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new I.APIError("NOT_FOUND",{message:f.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(n,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new I.APIError("UNAUTHORIZED",{message:f.INVALID_TOKEN});let c=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!c||!c?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new I.APIError("UNAUTHORIZED",{message:f.FAILED_TO_GET_USER_INFO});if(!c.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new I.APIError("UNAUTHORIZED",{message:f.USER_EMAIL_NOT_FOUND});let l=await me(e,{userInfo:{email:c.user.email,id:c.user.id,name:c.user.name||"",image:c.user.image,emailVerified:c.user.emailVerified||!1},account:{providerId:t.id,accountId:c.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new I.APIError("UNAUTHORIZED",{message:l.error});return await L(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await ue(e),i=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),je=w("/sign-in/email",{method:"POST",body:T.z.object({email:T.z.string({description:"Email of the user"}),password:T.z.string({description:"Password of the user"}),callbackURL:T.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:T.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new I.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!T.z.string().email().safeParse(t).success)throw new I.APIError("BAD_REQUEST",{message:f.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new I.APIError("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let n=i.accounts.find(l=>l.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new I.APIError("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let a=n?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new I.APIError("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new I.APIError("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new I.APIError("UNAUTHORIZED",{message:f.EMAIL_NOT_VERIFIED});let l=await $(e.context.secret,i.user.email),p=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:p,token:l},e.request),e.context.logger.error("Email not verified",{email:t}),new I.APIError("FORBIDDEN",{message:f.EMAIL_NOT_VERIFIED})}let c=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!c)throw e.context.logger.error("Failed to create session"),new I.APIError("UNAUTHORIZED",{message:f.FAILED_TO_CREATE_SESSION});return await L(e,{session:c,user:i.user},e.body.rememberMe===!1),e.json({user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var te=require("zod");var ge=te.z.object({code:te.z.string().optional(),error:te.z.string().optional(),error_description:te.z.string().optional(),state:te.z.string().optional()}),$e=w("/callback/:id",{method:["GET","POST"],body:ge.optional(),query:ge.optional(),metadata:X},async e=>{let t;try{if(e.method==="GET")t=ge.parse(e.query);else if(e.method==="POST")t=ge.parse(e.body);else throw new Error("Unsupported method")}catch(m){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",m),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:i,error_description:n}=t;if(!i)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${n}`);let a=e.context.socialProviders.find(m=>m.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:c,link:l,errorURL:p,newUserURL:y}=await mt(e),g;try{g=await a.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(m){throw e.context.logger.error("",m),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let u=await a.getUserInfo(g).then(m=>m?.user);function A(m){let b=p||c||`${e.context.baseURL}/error`;throw b.includes("?")?b=`${b}&error=${m}`:b=`${b}?error=${m}`,e.redirect(b)}if(s(A,"redirectOnError"),!u)return e.context.logger.error("Unable to get user info"),A("unable_to_get_user_info");if(!u.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),A("email_not_found");if(!c)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==u.email.toLowerCase())return A("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:a.id,accountId:u.id}))return A("unable_to_link_account");let b;try{b=c.toString()}catch{b=c}throw e.redirect(b)}let _=await me(e,{userInfo:{...u,email:u.email,name:u.name||u.email},account:{providerId:a.id,accountId:u.id,...g,scope:g.scopes?.join(",")},callbackURL:c});if(_.error)return e.context.logger.error(_.error.split(" ").join("_")),A(_.error.split(" ").join("_"));let{session:P,user:F}=_.data;await L(e,{session:P,user:F});let j;try{j=(_.isRegister&&y||c).toString()}catch{j=_.isRegister&&y||c}throw e.redirect(j)});var ys=require("zod");var Xt=require("better-call");var Ve=w("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw V(e),new Xt.APIError("BAD_REQUEST",{message:f.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),V(e),e.json({success:!0})});var D=require("zod");var re=require("better-call");function er(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}s(er,"redirectError");function Lr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}s(Lr,"redirectCallback");var Be=w("/forget-password",{method:"POST",body:D.z.object({email:D.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:D.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new re.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,n=G(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),a=Lt(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:n});let d=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:d,token:a},e.request),e.json({status:!0})}),Me=w("/reset-password/:token",{method:"GET",query:D.z.object({callbackURL:D.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(er(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(er(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Lr(e.context,r,{token:t}))}),ze=w("/reset-password",{query:D.z.optional(D.z.object({token:D.z.string().optional(),currentURL:D.z.string().optional()})),method:"POST",body:D.z.object({newPassword:D.z.string({description:"The new password to set"}),token:D.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new re.APIError("BAD_REQUEST",{message:f.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new re.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});if(r.length>i)throw new re.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(n);if(!a||a.expiresAt<new Date)throw new re.APIError("BAD_REQUEST",{message:f.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let d=a.value,c=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(y=>y.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,c),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:c,accountId:d}),e.json({status:!0}))});var E=require("zod");var U=require("better-call");var h=require("zod"),tr=require("better-call");var Ls=h.z.object({id:h.z.string(),providerId:h.z.string(),accountId:h.z.string(),userId:h.z.string(),accessToken:h.z.string().nullish(),refreshToken:h.z.string().nullish(),idToken:h.z.string().nullish(),accessTokenExpiresAt:h.z.date().nullish(),refreshTokenExpiresAt:h.z.date().nullish(),scope:h.z.string().nullish(),password:h.z.string().nullish(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date)}),xs=h.z.object({id:h.z.string(),email:h.z.string().transform(e=>e.toLowerCase()),emailVerified:h.z.boolean().default(!1),name:h.z.string(),image:h.z.string().nullish(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date)}),Ps=h.z.object({id:h.z.string(),userId:h.z.string(),expiresAt:h.z.date(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date),token:h.z.string(),ipAddress:h.z.string().nullish(),userAgent:h.z.string().nullish()}),Ds=h.z.object({id:h.z.string(),value:h.z.string(),createdAt:h.z.date().default(()=>new Date),updatedAt:h.z.date().default(()=>new Date),expiresAt:h.z.date(),identifier:h.z.string()});function xr(e,t){let r={...t==="user"?e.user?.additionalFields:{},...t==="session"?e.session?.additionalFields:{}};for(let o of e.plugins||[])o.schema&&o.schema[t]&&(r={...r,...o.schema[t].fields});return r}s(xr,"getAllFields");function Pr(e,t){let r=t.action||"create",o=t.fields,i={};for(let n in o){if(n in e){if(o[n].input===!1){if(o[n].defaultValue){i[n]=o[n].defaultValue;continue}continue}if(o[n].validator?.input&&e[n]!==void 0){i[n]=o[n].validator.input.parse(e[n]);continue}if(o[n].transform?.input&&e[n]!==void 0){i[n]=o[n].transform?.input(e[n]);continue}i[n]=e[n];continue}if(o[n].defaultValue&&r==="create"){i[n]=o[n].defaultValue;continue}if(o[n].required&&r==="create")throw new tr.APIError("BAD_REQUEST",{message:`${n} is required`})}return i}s(Pr,"parseInputData");function he(e,t,r){let o=xr(e,"user");return Pr(t||{},{fields:o,action:r})}s(he,"parseUserInput");var qe=s(()=>w("/update-user",{method:"POST",body:E.z.record(E.z.string(),E.z.any()),use:[x],metadata:{openapi:{description:"Update the current user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{name:{type:"string",description:"The name of the user"},image:{type:"string",description:"The image of the user"}}}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"}}}}}}}}}},async e=>{let t=e.body;if(t.email)throw new U.APIError("BAD_REQUEST",{message:f.EMAIL_CAN_NOT_BE_UPDATED});let{name:r,image:o,...i}=t,n=e.context.session;if(o===void 0&&r===void 0&&Object.keys(i).length===0)return e.json({status:!0});let a=he(e.context.options,i,"update"),d=await e.context.internalAdapter.updateUserByEmail(n.user.email,{name:r,image:o,...a});return await L(e,{session:n.session,user:d}),e.json({status:!0})}),"updateUser"),Fe=w("/change-password",{method:"POST",body:E.z.object({newPassword:E.z.string({description:"The new password to set"}),currentPassword:E.z.string({description:"The current password"}),revokeOtherSessions:E.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[x],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,i=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new U.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new U.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let c=(await e.context.internalAdapter.findAccounts(i.user.id)).find(g=>g.providerId==="credential"&&g.password);if(!c||!c.password)throw new U.APIError("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(t);if(!await e.context.password.verify({hash:c.password,password:r}))throw new U.APIError("BAD_REQUEST",{message:f.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(c.id,{password:l});let y=null;if(o){await e.context.internalAdapter.deleteSessions(i.user.id);let g=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!g)throw new U.APIError("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION});await L(e,{session:g,user:i.user}),y=g.token}return e.json({token:y})}),He=w("/set-password",{method:"POST",body:E.z.object({newPassword:E.z.string()}),metadata:{SERVER_ONLY:!0},use:[x]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new U.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new U.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(c=>c.providerId==="credential"&&c.password),d=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new U.APIError("BAD_REQUEST",{message:"user already has a password"})}),Ge=w("/delete-user",{method:"POST",use:[x],body:E.z.object({callbackURL:E.z.string().optional(),password:E.z.string().optional(),token:E.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new U.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!n||!n.password)throw new U.APIError("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new U.APIError("BAD_REQUEST",{message:f.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-i>n)throw new U.APIError("BAD_REQUEST",{message:f.SESSION_EXPIRED})}if(e.body.token)return await we({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=ne(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),V(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),we=w("/delete-user/callback",{method:"GET",query:E.z.object({token:E.z.string(),callbackURL:E.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new U.APIError("NOT_FOUND");let t=await Z(e);if(!t)throw new U.APIError("NOT_FOUND",{message:f.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new U.APIError("NOT_FOUND",{message:f.INVALID_TOKEN});if(r.value!==t.user.id)throw new U.APIError("NOT_FOUND",{message:f.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),V(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),We=w("/change-email",{method:"POST",query:E.z.object({currentURL:E.z.string().optional()}).optional(),body:E.z.object({newEmail:E.z.string({description:"The new email to set"}).email(),callbackURL:E.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[x],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new U.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new U.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new U.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new U.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await $(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var Dr=s((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),Qe=w("/error",{method:"GET",metadata:{...X,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Dr(t),{headers:{"Content-Type":"text/html"}})});var Ze=w("/ok",{method:"GET",metadata:{...X,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var J=require("zod");var q=require("better-call");var Ke=s(()=>w("/sign-up/email",{method:"POST",query:J.z.object({currentURL:J.z.string().optional()}).optional(),body:J.z.record(J.z.string(),J.z.any()),metadata:{openapi:{description:"Sign up a user using email and password",requestBody:{content:{"application/json":{schema:{type:"object",properties:{name:{type:"string",description:"The name of the user"},email:{type:"string",description:"The email of the user"},password:{type:"string",description:"The password of the user"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["name","email","password"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",description:"The id of the user"},email:{type:"string",description:"The email of the user"},name:{type:"string",description:"The name of the user"},image:{type:"string",description:"The image of the user"},emailVerified:{type:"boolean",description:"If the email is verified"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.enabled)throw new q.APIError("BAD_REQUEST",{message:"Email and password sign up is not enabled"});let t=e.body,{name:r,email:o,password:i,image:n,callbackURL:a,...d}=t;if(!J.z.string().email().safeParse(o).success)throw new q.APIError("BAD_REQUEST",{message:f.INVALID_EMAIL});let l=e.context.password.config.minPasswordLength;if(i.length<l)throw e.context.logger.error("Password is too short"),new q.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let p=e.context.password.config.maxPasswordLength;if(i.length>p)throw e.context.logger.error("Password is too long"),new q.APIError("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});if((await e.context.internalAdapter.findUserByEmail(o))?.user)throw e.context.logger.info(`Sign-up attempt for existing email: ${o}`),new q.APIError("UNPROCESSABLE_ENTITY",{message:f.USER_ALREADY_EXISTS});let g=he(e.context.options,d),u;try{if(u=await e.context.internalAdapter.createUser({email:o.toLowerCase(),name:r,image:n,...g,emailVerified:!1}),!u)throw new q.APIError("BAD_REQUEST",{message:f.FAILED_TO_CREATE_USER})}catch(P){throw de&&e.context.logger.error("Failed to create user",P),new q.APIError("UNPROCESSABLE_ENTITY",{message:f.FAILED_TO_CREATE_USER,details:P})}if(!u)throw new q.APIError("UNPROCESSABLE_ENTITY",{message:f.FAILED_TO_CREATE_USER});let A=await e.context.password.hash(i);if(await e.context.internalAdapter.linkAccount({userId:u.id,providerId:"credential",accountId:u.id,password:A}),e.context.options.emailVerification?.sendOnSignUp){let P=await $(e.context.secret,u.email),F=`${e.context.baseURL}/verify-email?token=${P}&callbackURL=${t.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:u,url:F,token:P},e.request)}if(!e.context.options.emailAndPassword.autoSignIn||e.context.options.emailAndPassword.requireEmailVerification)return e.json({token:null});let _=await e.context.internalAdapter.createSession(u.id,e.request);if(!_)throw new q.APIError("BAD_REQUEST",{message:f.FAILED_TO_CREATE_SESSION});return await L(e,{session:_,user:u}),e.json({token:_.token})}),"signUpEmail");var oe=require("zod");var Je=require("better-call");var Ye=w("/list-accounts",{method:"GET",use:[x],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),Xe=w("/link-social",{method:"POST",requireHeaders:!0,query:oe.z.object({currentURL:oe.z.string().optional()}).optional(),body:oe.z.object({callbackURL:oe.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:oe.z.enum(ve,{description:"The OAuth2 provider to use"})}),use:[x],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new Je.APIError("BAD_REQUEST",{message:f.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Je.APIError("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});let n=await ue(e,{userId:t.user.id,email:t.user.email}),a=await i.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:a.toString(),redirect:!0})});function rr(e,t){if(t.advanced?.ipAddress?.disableIpTracking)return null;let r="127.0.0.1";if(rt)return r;let i=t.advanced?.ipAddress?.ipAddressHeaders||["x-client-ip","x-forwarded-for","cf-connecting-ip","fastly-client-ip","x-real-ip","x-cluster-client-ip","x-forwarded","forwarded-for","forwarded"],n=e instanceof Request?e.headers:e;for(let a of i){let d=n.get(a);if(typeof d=="string"){let c=d.split(",")[0].trim();if(c)return c}}return null}s(rr,"getIp");function Cr(e,t,r){let o=Date.now(),i=t*1e3;return o-r.lastRequest<i&&r.count>=e}s(Cr,"shouldRateLimit");function Nr(e){return new Response(JSON.stringify({message:"Too many requests. Please try again later."}),{status:429,statusText:"Too Many Requests",headers:{"X-Retry-After":e.toString()}})}s(Nr,"rateLimitResponse");function jr(e,t){let r=Date.now(),o=t*1e3;return Math.ceil((e+o-r)/1e3)}s(jr,"getRetryAfter");function $r(e,t){let r="rateLimit",o=e.adapter;return{get:s(async i=>(await o.findMany({model:r,where:[{field:"key",value:i}]}))[0],"get"),set:s(async(i,n,a)=>{try{a?await o.updateMany({model:t??"rateLimit",where:[{field:"key",value:i}],update:{count:n.count,lastRequest:n.lastRequest}}):await o.create({model:t??"rateLimit",data:{key:i,count:n.count,lastRequest:n.lastRequest}})}catch(d){e.logger.error("Error setting rate limit",d)}},"set")}}s($r,"createDBStorage");var or=new Map;function Vr(e){return e.options.rateLimit?.customStorage?e.options.rateLimit.customStorage:e.rateLimit.storage==="secondary-storage"?{get:s(async r=>{let o=await e.options.secondaryStorage?.get(r);return o?JSON.parse(o):void 0},"get"),set:s(async(r,o)=>{await e.options.secondaryStorage?.set?.(r,JSON.stringify(o))},"set")}:e.rateLimit.storage==="memory"?{async get(r){return or.get(r)},async set(r,o,i){or.set(r,o)}}:$r(e,e.rateLimit.modelName)}s(Vr,"getRateLimitStorage");async function ir(e,t){if(!t.rateLimit.enabled)return;let r=t.baseURL,o=e.url.replace(r,"").split("?")[0],i=t.rateLimit.window,n=t.rateLimit.max,a=rr(e,t.options)+o,c=Br().find(g=>g.pathMatcher(o));c&&(i=c.window,n=c.max);for(let g of t.options.plugins||[])if(g.rateLimit){let u=g.rateLimit.find(A=>A.pathMatcher(o));if(u){i=u.window,n=u.max;break}}if(t.rateLimit.customRules){let g=Object.keys(t.rateLimit.customRules).find(u=>u.includes("*")?ae(u)(o):u===o);if(g){let u=t.rateLimit.customRules[g],A=typeof u=="function"?await u(e):u;A&&(i=A.window,n=A.max)}}let l=Vr(t),p=await l.get(a),y=Date.now();if(!p)await l.set(a,{key:a,count:1,lastRequest:y});else{let g=y-p.lastRequest;if(Cr(n,i,p)){let u=jr(p.lastRequest,i);return Nr(u)}else g>i*1e3?await l.set(a,{...p,count:1,lastRequest:y},!0):await l.set(a,{...p,count:p.count+1,lastRequest:y},!0)}}s(ir,"onRequestRateLimit");function Br(){return[{pathMatcher(t){return t.startsWith("/sign-in")||t.startsWith("/sign-up")||t.startsWith("/change-password")||t.startsWith("/change-email")},window:10,max:3}]}s(Br,"getDefaultSpecialRules");var Wa=require("defu");var fe=require("better-call");function nr(e,t){let r=t.plugins?.reduce((d,c)=>({...d,...c.endpoints}),{}),o=t.plugins?.map(d=>d.middlewares?.map(c=>{let l=s(async p=>c.middleware({...p,context:{...e,...p.context}}),"middleware");return l.path=c.path,l.options=c.middleware.options,l.headers=c.middleware.headers,{path:c.path,middleware:l}})).filter(d=>d!==void 0).flat()||[],n={...{signInSocial:Ne,callbackOAuth:$e,getSession:pe(),signOut:Ve,signUpEmail:Ke(),signInEmail:je,forgetPassword:Be,resetPassword:ze,verifyEmail:Ce,sendVerificationEmail:De,changeEmail:We,changePassword:Fe,setPassword:He,updateUser:qe(),deleteUser:Ge,forgetPasswordCallback:Me,listSessions:Ie(),revokeSession:Le,revokeSessions:xe,revokeOtherSessions:Pe,linkSocialAccount:Xe,listUserAccounts:Ye,deleteUserCallback:we},...r,ok:Ze,error:Qe},a={};for(let[d,c]of Object.entries(n))a[d]=async(l={})=>{c.headers=new Headers;let p={setHeader(m,b){c.headers.set(m,b)},setCookie(m,b,S){(0,O.setCookie)(c.headers,m,b,S)},getCookie(m,b){let v=l.headers?.get("cookie");return(0,O.getCookie)(v||"",m,b)},getSignedCookie(m,b,S){let v=l.headers;return v?(0,O.getSignedCookie)(v,b,m,S):null},async setSignedCookie(m,b,S,v){await(0,O.setSignedCookie)(c.headers,m,b,S,v)},redirect(m){return c.headers.set("Location",m),new O.APIError("FOUND")},responseHeader:c.headers},y=await e,g=null,u={...p,...l,path:c.path,context:{...y,...l.context,session:null,setNewSession:s(function(m){this.newSession=m,g=m},"setNewSession")}},A=t.plugins||[],_=A.map(m=>{if(m.hooks?.before)return m.hooks.before}).filter(m=>m!==void 0).flat(),P=A.map(m=>{if(m.hooks?.after)return m.hooks.after}).filter(m=>m!==void 0).flat();t.hooks?.before&&_.push({matcher:s(()=>!0,"matcher"),handler:t.hooks.before}),t.hooks?.after&&P.push({matcher:s(()=>!0,"matcher"),handler:t.hooks.after});for(let m of _){if(!m.matcher(u))continue;let b=await m.handler(u);if(b&&"context"in b){u={...u,...b.context};continue}if(b)return b}let F;try{F=await c(u),g&&(u.context.newSession=g)}catch(m){if(g&&(u.context.newSession=g),m instanceof O.APIError){if(!P?.length)throw m.headers=c.headers,m;u.context.returned=m,u.context.returned.headers=c.headers;for(let b of P||[])if(b.matcher(u))try{let v=await b.handler(u);v&&"response"in v&&(u.context.returned=v.response)}catch(v){if(v instanceof O.APIError){u.context.returned=v;continue}throw v}if(u.context.returned instanceof O.APIError)throw u.context.returned.headers=c.headers,u.context.returned;return u.context.returned}throw m}u.context.returned=F,u.responseHeader=c.headers;for(let m of P)if(m.matcher(u))try{let S=await m.handler(u);if(S)if("responseHeader"in S){let v=S.responseHeader;u.responseHeader=v}else u.context.returned=S}catch(S){if(S instanceof O.APIError){u.context.returned=S;continue}throw S}let j=u.context.returned;if(j instanceof Response&&c.headers.forEach((m,b)=>{b==="set-cookie"?j.headers.append(b,m):j.headers.set(b,m)}),j instanceof O.APIError)throw j.headers=c.headers,j;return j},a[d].path=c.path,a[d].method=c.method,a[d].options=c.options,a[d].headers=c.headers;return{api:a,middlewares:o}}s(nr,"getEndpoints");var Mr=s((e,t)=>{let{api:r,middlewares:o}=nr(e,t),i=new URL(e.baseURL).pathname;return(0,O.createRouter)(r,{extraContext:e,basePath:i,routerMiddleware:[{path:"/**",middleware:ke},...o],async onRequest(n){for(let a of e.options.plugins||[])if(a.onRequest){let d=await a.onRequest(n,e);if(d&&"response"in d)return d.response}return ir(n,e)},async onResponse(n){for(let a of e.options.plugins||[])if(a.onResponse){let d=await a.onResponse(n,e);if(d)return d.response}return n},onError(n){if(n instanceof O.APIError&&n.status==="FOUND")return;if(t.onAPIError?.throw)throw n;if(t.onAPIError?.onError){t.onAPIError.onError(n,e);return}let a=t.logger?.level,d=a==="error"||a==="warn"||a==="debug"?C:void 0;if(t.logger?.disabled!==!0){if(n&&typeof n=="object"&&"message"in n&&typeof n.message=="string"&&(n.message.includes("no column")||n.message.includes("column")||n.message.includes("relation")||n.message.includes("table")||n.message.includes("does not exist"))){e.logger?.error(n.message);return}n instanceof O.APIError?(n.status==="INTERNAL_SERVER_ERROR"&&e.logger.error(n.status,n),d?.error(n.message)):e.logger?.error(n&&typeof n=="object"&&"name"in n?n.name:"",n)}}})},"router");0&&(module.exports={APIError,callbackOAuth,changeEmail,changePassword,createAuthEndpoint,createAuthMiddleware,createEmailVerificationToken,deleteUser,deleteUserCallback,error,forgetPassword,forgetPasswordCallback,freshSessionMiddleware,getEndpoints,getSession,getSessionFromCtx,linkSocialAccount,listSessions,listUserAccounts,ok,optionsMiddleware,originCheckMiddleware,resetPassword,revokeOtherSessions,revokeSession,revokeSessions,router,sendVerificationEmail,sendVerificationEmailFn,sessionMiddleware,setPassword,signInEmail,signInSocial,signOut,signUpEmail,updateUser,verifyEmail});
