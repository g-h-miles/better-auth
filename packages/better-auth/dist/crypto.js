import{createHash as m}from"@better-auth/utils/hash";import{xchacha20poly1305 as p}from"@noble/ciphers/chacha";import{bytesToHex as u,hexToBytes as A,utf8ToBytes as h}from"@noble/ciphers/utils";import{managedNonce as f}from"@noble/ciphers/webcrypto";function c(r,t){let e=new Uint8Array(r),n=new Uint8Array(t);if(e.length!==n.length)return!1;let o=0;for(let s=0;s<e.length;s++)o|=e[s]^n[s];return o===0}import{scryptAsync as d}from"@noble/hashes/scrypt";import{getRandomValues as g}from"uncrypto";import{hex as i}from"@better-auth/utils/hex";var a={N:16384,r:16,p:1,dkLen:64};async function y(r,t){return await d(r.normalize("NFKC"),t,{N:a.N,p:a.p,r:a.r,dkLen:a.dkLen,maxmem:128*a.N*a.r*2})}var U=async r=>{let t=i.encode(g(new Uint8Array(16))),e=await y(r,t);return`${t}:${i.encode(e)}`},N=async({hash:r,password:t})=>{let[e,n]=r.split(":"),o=await y(t,e);return c(o,new Uint8Array(Buffer.from(n,"hex")))};import{createRandomStringGenerator as x}from"@better-auth/utils/random";var D=x("a-z","0-9","A-Z","-_");var R=async({key:r,data:t})=>{let e=await m("SHA-256").digest(r),n=h(t),o=f(p)(new Uint8Array(e));return u(o.encrypt(n))},q=async({key:r,data:t})=>{let e=await m("SHA-256").digest(r),n=A(t),o=f(p)(new Uint8Array(e));return new TextDecoder().decode(o.decrypt(n))};export{c as constantTimeEqual,D as generateRandomString,U as hashPassword,q as symmetricDecrypt,R as symmetricEncrypt,N as verifyPassword};
