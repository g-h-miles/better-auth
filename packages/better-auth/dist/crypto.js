var g=Object.defineProperty;var n=(r,t)=>g(r,"name",{value:t,configurable:!0});import{createHash as p}from"@better-auth/utils/hash";import{xchacha20poly1305 as f}from"@noble/ciphers/chacha";import{bytesToHex as h,hexToBytes as l,utf8ToBytes as w}from"@noble/ciphers/utils";import{managedNonce as d}from"@noble/ciphers/webcrypto";function i(r,t){let e=new Uint8Array(r),o=new Uint8Array(t);if(e.length!==o.length)return!1;let a=0;for(let c=0;c<e.length;c++)a|=e[c]^o[c];return a===0}n(i,"constantTimeEqual");import{scryptAsync as x}from"@noble/hashes/scrypt";import{getRandomValues as u}from"uncrypto";import{hex as y}from"@better-auth/utils/hex";var s={N:16384,r:16,p:1,dkLen:64};async function m(r,t){return await x(r.normalize("NFKC"),t,{N:s.N,p:s.p,r:s.r,dkLen:s.dkLen,maxmem:128*s.N*s.r*2})}n(m,"generateKey");var D=n(async r=>{let t=y.encode(u(new Uint8Array(16))),e=await m(r,t);return`${t}:${y.encode(e)}`},"hashPassword"),H=n(async({hash:r,password:t})=>{let[e,o]=r.split(":"),a=await m(t,e);return i(a,new Uint8Array(Buffer.from(o,"hex")))},"verifyPassword");import{createRandomStringGenerator as A}from"@better-auth/utils/random";var L=A("a-z","0-9","A-Z","-_");var v=n(async({key:r,data:t})=>{let e=await p("SHA-256").digest(r),o=w(t),a=d(f)(new Uint8Array(e));return h(a.encrypt(o))},"symmetricEncrypt"),C=n(async({key:r,data:t})=>{let e=await p("SHA-256").digest(r),o=l(t),a=d(f)(new Uint8Array(e));return new TextDecoder().decode(a.decrypt(o))},"symmetricDecrypt");export{i as constantTimeEqual,L as generateRandomString,D as hashPassword,C as symmetricDecrypt,v as symmetricEncrypt,H as verifyPassword};
