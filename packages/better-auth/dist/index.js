import{APIError as K,createRouter as mn,getCookie as gn,getSignedCookie as hn,setCookie as yn,setSignedCookie as wn}from"better-call";import{APIError as hr}from"better-call";import{createEndpointCreator as ur,createMiddleware as Ve,createMiddlewareCreator as lr}from"better-call";var Me=Ve(async()=>({})),re=lr({use:[Me,Ve(async()=>({}))]}),T=ur({use:[Me]});function Ue(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function pr(e){let t="";for(let r=0;r<e.length;r++)t+=Ue(e[r]);return t}function $e(e,t=!0){if(Array.isArray(e))return`(?:${e.map(d=>`^${$e(d,t)}$`).join("|")})`;let r="",n="",o=".";t===!0?(r="/",n="[/\\\\]",o="[^/\\\\]"):t&&(r=t,n=pr(r),n.length>1?(n=`(?:${n})`,o=`((?!${n}).)`):o=`[^${n}]`);let i=t?`${n}+?`:"",a=t?`${n}*?`:"",u=t?e.split(r):[e],c="";for(let s=0;s<u.length;s++){let d=u[s],f=u[s+1],m="";if(!(!d&&s>0)){if(t&&(s===u.length-1?m=a:f!=="**"?m=i:m=""),t&&d==="**"){m&&(c+=s===0?"":m,c+=`(?:${o}*?${m})*?`);continue}for(let l=0;l<d.length;l++){let p=d[l];p==="\\"?l<d.length-1&&(c+=Ue(d[l+1]),l++):p==="?"?c+=o:p==="*"?c+=`${o}*?`:c+=Ue(p)}c+=m}}return c}function fr(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function pe(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=$e(e,t.separator),n=new RegExp(`^${r}$`,t.flags),o=fr.bind(null,n);return o.options=t,o.pattern=e,o.regexp=n,o}var fe=Object.create(null),ne=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?fe:globalThis),D=new Proxy(fe,{get(e,t){return ne()[t]??fe[t]},has(e,t){let r=ne();return t in r||t in fe},set(e,t,r){let n=ne(!0);return n[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ne(!0);return delete r[t],!0},ownKeys(){let e=ne(!0);return Object.keys(e)}});function mr(e){return e?e!=="false":!1}var me=typeof process<"u"&&process.env&&process.env.NODE_ENV||"",oe=me==="production",ge=me==="dev"||me==="development",ze=me==="test"||mr(D.TEST);var C=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}},He=class extends C{constructor(t){super(`The package "${t}" is required. Make sure it is installed.`,t)}};function gr(e){try{return new URL(e).pathname!=="/"}catch{throw new C(`Invalid base URL: ${e}. Please provide a valid base URL.`)}}function Oe(e,t="/api/auth"){return gr(e)?e:(t=t.startsWith("/")?t:`/${t}`,`${e}${t}`)}function ie(e,t){if(e)return Oe(e,t);let r=D.BETTER_AUTH_URL||D.NEXT_PUBLIC_BETTER_AUTH_URL||D.PUBLIC_BETTER_AUTH_URL||D.NUXT_PUBLIC_BETTER_AUTH_URL||D.NUXT_PUBLIC_AUTH_URL||(D.BASE_URL!=="/"?D.BASE_URL:void 0);if(r)return Oe(r,t);if(typeof window<"u"&&window.location)return Oe(window.location.origin,t)}function Ge(e){try{return new URL(e).origin}catch{return null}}function We(e){return e.includes("://")?new URL(e).host:e}var Ke=re(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:n}=e,o=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,u=r?.currentURL,c=t?.errorCallbackURL,s=t?.newUserCallbackURL,d=n.trustedOrigins,f=e.headers?.has("cookie"),m=(p,g)=>p.startsWith("/")?!1:g.includes("*")?pe(g)(We(p)):p.startsWith(g),l=(p,g)=>{if(!p)return;if(!d.some(A=>m(p,A)||p?.startsWith("/")&&g!=="origin"&&!p.includes(":")))throw e.context.logger.error(`Invalid ${g}: ${p}`),e.context.logger.info(`If it's a valid URL, please add ${p} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${d}`),new hr("FORBIDDEN",{message:`Invalid ${g}`})};f&&!e.context.options.advanced?.disableCSRFCheck&&l(o,"origin"),i&&l(i,"callbackURL"),a&&l(a,"redirectURL"),u&&l(u,"currentURL"),c&&l(c,"errorCallbackURL"),s&&l(a,"newUserCallbackURL")});import{APIError as I}from"better-call";import{z as v}from"zod";var j=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));import{base64Url as yr}from"@better-auth/utils/base64";var Q=(e,t)=>{let r=()=>{switch(t){case"ms":return e;case"s":return e*1e3;case"m":return e*1e3*60;case"h":return e*1e3*60*60;case"d":return e*1e3*60*60*24;case"w":return e*1e3*60*60*24*7;case"y":return e*1e3*60*60*24*365}},n={t:`${e}${t}`,value:e,tFormat:t,toMilliseconds:r,toSeconds:()=>n.toMilliseconds()/1e3,toMinutes:()=>n.toSeconds()/60,toHours:()=>n.toMinutes()/60,toDays:()=>n.toHours()/24,toWeeks:()=>n.toDays()/7,toYears:()=>n.toDays()/365,getDate:()=>new Date(Date.now()+n.toMilliseconds()),add:o=>{let i=typeof o=="string"?se(o).toMilliseconds():o.toMilliseconds();return Q(n.toMilliseconds()+i,"ms")},subtract:o=>{let i=typeof o=="string"?se(o).toMilliseconds():o.toMilliseconds();return Q(n.toMilliseconds()-i,"ms")},multiply:o=>Q(n.toMilliseconds()*o,"ms"),divide:o=>Q(n.toMilliseconds()/o,"ms"),equals:o=>{let i=typeof o=="string"?se(o).toMilliseconds():o.toMilliseconds();return n.toMilliseconds()===i},lessThan:o=>{let i=typeof o=="string"?se(o).toMilliseconds():o.toMilliseconds();return n.toMilliseconds()<i},greaterThan:o=>{let i=typeof o=="string"?se(o).toMilliseconds():o.toMilliseconds();return n.toMilliseconds()>i},format:o=>{let i=n.getDate();return o.replace(/YYYY|MM|DD|HH|mm|ss/g,a=>{switch(a){case"YYYY":return i.getFullYear().toString();case"MM":return(i.getMonth()+1).toString().padStart(2,"0");case"DD":return i.getDate().toString().padStart(2,"0");case"HH":return i.getHours().toString().padStart(2,"0");case"mm":return i.getMinutes().toString().padStart(2,"0");case"ss":return i.getSeconds().toString().padStart(2,"0");default:return a}})},fromNow:()=>{let o=n.toMilliseconds();return o<0?n.ago():o<1e3?"in a few seconds":o<6e4?`in ${Math.round(o/1e3)} seconds`:o<36e5?`in ${Math.round(o/6e4)} minutes`:o<864e5?`in ${Math.round(o/36e5)} hours`:o<6048e5?`in ${Math.round(o/864e5)} days`:o<26298e5?`in ${Math.round(o/6048e5)} weeks`:o<315576e5?`in ${Math.round(o/26298e5)} months`:`in ${Math.round(o/315576e5)} years`},ago:()=>{let o=-n.toMilliseconds();return o<0?n.fromNow():o<1e3?"a few seconds ago":o<6e4?`${Math.round(o/1e3)} seconds ago`:o<36e5?`${Math.round(o/6e4)} minutes ago`:o<864e5?`${Math.round(o/36e5)} hours ago`:o<6048e5?`${Math.round(o/864e5)} days ago`:o<26298e5?`${Math.round(o/6048e5)} weeks ago`:o<315576e5?`${Math.round(o/26298e5)} months ago`:`${Math.round(o/315576e5)} years ago`}};return n},se=e=>{let t=e.match(/^(\d+)(ms|s|m|h|d|w|y)$/);if(!t)throw new Error("Invalid time format");return Q(parseInt(t[1]),t[2])};import{createHMAC as wr}from"@better-auth/utils/hmac";function Mn(e){let t=new Map;return e.split(", ").forEach(n=>{let o=n.split(";").map(f=>f.trim()),[i,...a]=o,[u,...c]=i.split("="),s=c.join("=");if(!u||s===void 0)return;let d={value:s};a.forEach(f=>{let[m,...l]=f.split("="),p=l.join("="),g=m.trim().toLowerCase();switch(g){case"max-age":d["max-age"]=p?parseInt(p.trim(),10):void 0;break;case"expires":d.expires=p?new Date(p.trim()):void 0;break;case"domain":d.domain=p?p.trim():void 0;break;case"path":d.path=p?p.trim():void 0;break;case"secure":d.secure=!0;break;case"httponly":d.httponly=!0;break;case"samesite":d.samesite=p?p.trim().toLowerCase():void 0;break;default:d[g]=p?p.trim():!0;break}}),t.set(u,d)}),t}function xe(e){let r=(e.advanced?.useSecureCookies!==void 0?e.advanced?.useSecureCookies:e.baseURL!==void 0?!!e.baseURL.startsWith("https://"):oe)?"__Secure-":"",n=!!e.advanced?.crossSubDomainCookies?.enabled,o=n?e.advanced?.crossSubDomainCookies?.domain||(e.baseURL?new URL(e.baseURL).hostname:void 0):void 0;if(n&&!o)throw new C("baseURL is required when crossSubdomainCookies are enabled");function i(a,u={}){let c=e.advanced?.cookiePrefix||"better-auth",s=e.advanced?.cookies?.[a]?.name||`${c}.${a}`,d=e.advanced?.cookies?.[a]?.attributes;return{name:`${r}${s}`,attributes:{secure:!!r,sameSite:"lax",path:"/",httpOnly:!0,...n?{domain:o}:{},...e.advanced?.defaultCookieAttributes,...u,...d}}}return i}function Qe(e){let t=xe(e),r=e.session?.expiresIn||Q(7,"d").toSeconds(),n=t("session_token",{maxAge:r}),o=t("session_data",{maxAge:e.session?.cookieCache?.maxAge||60*5}),i=t("dont_remember");return{sessionToken:{name:n.name,options:n.attributes},sessionData:{name:o.name,options:o.attributes},dontRememberToken:{name:i.name,options:i.attributes}}}async function Se(e,t){if(e.context.options.session?.cookieCache?.enabled){let n=yr.encode(JSON.stringify({session:t,expiresAt:j(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await wr("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(n.length>4093)throw new C("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,n,e.context.authCookies.sessionData.options)}}async function P(e,t,r,n){let o=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...o,maxAge:i,...n}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Se(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function q(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}function Jn(e){let t=e.split("; "),r=new Map;return t.forEach(n=>{let[o,i]=n.split("=");r.set(o,i)}),r}import{betterFetch as Ur}from"@better-fetch/fetch";import{APIError as Or}from"better-call";import{decodeJwt as xr,decodeProtectedHeader as Sr,importJWK as vr,jwtVerify as _r}from"jose";import{createHash as Ar}from"@better-auth/utils/hash";import{base64Url as br}from"@better-auth/utils/base64";async function Ze(e){let t=await Ar("SHA-256").digest(e);return br.encode(new Uint8Array(t),{padding:!1})}function he(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?j(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function U({id:e,options:t,authorizationEndpoint:r,state:n,codeVerifier:o,scopes:i,claims:a,redirectURI:u,duration:c}){let s=new URL(r);if(s.searchParams.set("response_type","code"),s.searchParams.set("client_id",t.clientId),s.searchParams.set("state",n),s.searchParams.set("scope",i.join(" ")),s.searchParams.set("redirect_uri",t.redirectURI||u),o){let d=await Ze(o);s.searchParams.set("code_challenge_method","S256"),s.searchParams.set("code_challenge",d)}if(a){let d=a.reduce((f,m)=>(f[m]=null,f),{});s.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...d}}))}return c&&s.searchParams.set("duration",c),s}import{betterFetch as kr}from"@better-fetch/fetch";import{jwtVerify as uo}from"jose";async function E({code:e,codeVerifier:t,redirectURI:r,options:n,tokenEndpoint:o,authentication:i}){let a=new URLSearchParams,u={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),i==="basic"){let f=btoa(`${n.clientId}:${n.clientSecret}`);u.authorization=`Basic ${f}`}else a.set("client_id",n.clientId),a.set("client_secret",n.clientSecret);let{data:c,error:s}=await kr(o,{method:"POST",body:a,headers:u});if(s)throw s;return he(c)}import{z}from"zod";import{APIError as rt}from"better-call";import{createHash as ko}from"@better-auth/utils/hash";import{xchacha20poly1305 as To}from"@noble/ciphers/chacha";import{bytesToHex as Uo,hexToBytes as Oo,utf8ToBytes as xo}from"@noble/ciphers/utils";import{managedNonce as vo}from"@noble/ciphers/webcrypto";function Je(e,t){let r=new Uint8Array(e),n=new Uint8Array(t);if(r.length!==n.length)return!1;let o=0;for(let i=0;i<r.length;i++)o|=r[i]^n[i];return o===0}import{scryptAsync as Rr}from"@noble/hashes/scrypt";import{getRandomValues as Tr}from"uncrypto";import{hex as Ye}from"@better-auth/utils/hex";var Y={N:16384,r:16,p:1,dkLen:64};async function Xe(e,t){return await Rr(e.normalize("NFKC"),t,{N:Y.N,p:Y.p,r:Y.r,dkLen:Y.dkLen,maxmem:128*Y.N*Y.r*2})}var et=async e=>{let t=Ye.encode(Tr(new Uint8Array(16))),r=await Xe(e,t);return`${t}:${Ye.encode(r)}`},tt=async({hash:e,password:t})=>{let[r,n]=e.split(":"),o=await Xe(t,r);return Je(o,new Uint8Array(Buffer.from(n,"hex")))};import{createRandomStringGenerator as Er}from"@better-auth/utils/random";var ae=Er("a-z","0-9","A-Z","-_");async function ye(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Ge(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new rt("BAD_REQUEST",{message:"callbackURL is required"});let n=ae(128),o=ae(32),i=JSON.stringify({callbackURL:r,codeVerifier:n,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let u=await e.context.internalAdapter.createVerificationValue({value:i,identifier:o,expiresAt:a});if(!u)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new rt("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:u.identifier,codeVerifier:n}}async function nt(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let n=z.object({callbackURL:z.string(),codeVerifier:z.string(),errorURL:z.string().optional(),newUserURL:z.string().optional(),expiresAt:z.number(),link:z.object({email:z.string(),userId:z.string()}).optional()}).parse(JSON.parse(r.value));if(n.errorURL||(n.errorURL=`${e.context.baseURL}/error`),n.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),n}var ot=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:n,redirectURI:o}){let i=n||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||o}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:n,redirectURI:o})=>E({code:r,codeVerifier:n,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async verifyIdToken(r,n){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,n);let o=Sr(r),{kid:i,alg:a}=o;if(!i||!a)return!1;let u=await Ir(i),{payload:c}=await _r(r,u,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(s=>{c[s]!==void 0&&(c[s]=!!c[s])}),n&&c.nonce!==n?!1:!!c},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let n=xr(r.idToken);if(!n)return null;let o=n.user?`${n.user.name.firstName} ${n.user.name.lastName}`:n.email,i=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:o,emailVerified:!1,email:n.email,...i},data:n}}}},Ir=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:n}=await Ur(`${t}${r}`);if(!n?.keys)throw new Or("BAD_REQUEST",{message:"Keys not found"});let o=n.keys.find(i=>i.kid===e);if(!o)throw new Error(`JWK with kid ${e} not found`);return await vr(o,o.alg)};import{betterFetch as Pr}from"@better-fetch/fetch";var it=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:n}){let o=r||["identify","email"];return e.scope&&o.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${o.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||n)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>E({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await Pr("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(n)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...o},data:r}}});import{betterFetch as Lr}from"@better-fetch/fetch";var st=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:n}){let o=r||["email","public_profile"];return e.scope&&o.push(...e.scope),await U({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:o,state:t,redirectURI:n})},validateAuthorizationCode:async({code:t,redirectURI:r})=>E({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await Lr("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(n)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...o},data:r}}});import{betterFetch as at}from"@better-fetch/fetch";var dt=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:n,codeVerifier:o,redirectURI:i}){let a=n||["user:email"];return e.scope&&a.push(...e.scope),U({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:i})},validateAuthorizationCode:async({code:r,redirectURI:n})=>E({code:r,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:n,error:o}=await at("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(o)return null;let i=!1,{data:a}=await at("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(n.email=(a.find(c=>c.primary)??a[0])?.email,i=a.find(c=>c.email===n.email)?.verified??!1);let u=await e.mapProfileToUser?.(n);return{user:{id:n.id.toString(),name:n.name||n.login,email:n.email,image:n.avatar_url,emailVerified:i,...u},data:n}}}};var ve=["info","success","warn","error","debug"];function Dr(e,t){return ve.indexOf(t)<=ve.indexOf(e)}var V={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Cr={info:V.fg.blue,success:V.fg.green,warn:V.fg.yellow,error:V.fg.red,debug:V.fg.magenta},Nr=(e,t)=>{let r=new Date().toISOString();return`${V.dim}${r}${V.reset} ${Cr[e]}${e.toUpperCase()}${V.reset} ${V.bright}Better Auth${V.reset} ${t}`},we=e=>{let t=e?.disabled!==!0,r=e?.level??"error",n=(o,i,a=[])=>{if(!t||!Dr(r,o))return;let u=Nr(o,i);if(!e||typeof e.log!="function"){o==="error"?console.error(u,...a):o==="warn"?console.warn(u,...a):console.log(u,...a);return}e.log(o==="success"?"info":o,u,...a)};return Object.fromEntries(ve.map(o=>[o,(...[i,...a])=>n(o,i,a)]))},L=we();import{betterFetch as Br}from"@better-fetch/fetch";import{decodeJwt as jr}from"jose";var ct=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:n,redirectURI:o}){if(!e.clientId||!e.clientSecret)throw L.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new C("CLIENT_ID_AND_SECRET_REQUIRED");if(!n)throw new C("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let a=await U({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:n,redirectURI:o});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:n})=>E({code:t,codeVerifier:r,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let n=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:o}=await Br(n);return o?o.aud===e.clientId&&o.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=jr(t.idToken),n=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...n},data:r}}});import{betterFetch as Fr}from"@better-fetch/fetch";import{decodeJwt as qr}from"jose";var ut=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,n=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(o){let i=o.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),U({id:"microsoft",options:e,authorizationEndpoint:r,state:o.state,codeVerifier:o.codeVerifier,scopes:i,redirectURI:o.redirectURI})},validateAuthorizationCode({code:o,codeVerifier:i,redirectURI:a}){return E({code:o,codeVerifier:i,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:n})},async getUserInfo(o){if(e.getUserInfo)return e.getUserInfo(o);if(!o.idToken)return null;let i=qr(o.idToken),a=e.profilePhotoSize||48;await Fr(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${o.accessToken}`},async onResponse(c){if(!(e.disableProfilePhoto||!c.response.ok))try{let d=await c.response.clone().arrayBuffer(),f=Buffer.from(d).toString("base64");i.picture=`data:image/jpeg;base64, ${f}`}catch(s){L.error(s&&typeof s=="object"&&"name"in s?s.name:"",s)}}});let u=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...u},data:i}}}};import{betterFetch as Vr}from"@better-fetch/fetch";var lt=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:n,redirectURI:o}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),U({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:n,redirectURI:o})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:n})=>E({code:t,codeVerifier:r,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await Vr("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(n)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...o},data:r}}});function ki(e){return e.charAt(0).toUpperCase()+e.slice(1)}var X={isAction:!1};import{createRandomStringGenerator as Mr}from"@better-auth/utils/random";var M=e=>Mr("a-z","A-Z","0-9")(e||32);import{decodeJwt as $r}from"jose";var pt=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:n}){let o=r||["user:read:email","openid"];return e.scope&&o.push(...e.scope),U({id:"twitch",redirectURI:n,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:o,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>E({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return L.error("No idToken found in token"),null;let n=$r(r),o=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.preferred_username,email:n.email,image:n.picture,emailVerified:!1,...o},data:n}}});import{betterFetch as zr}from"@better-fetch/fetch";var ft=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),U({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:n})=>E({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||n,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await zr("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(n)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...o},data:r}}});import{betterFetch as Hr}from"@better-fetch/fetch";var mt=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:n,codeVerifier:o,redirectURI:i})=>{let a=n||["account_info.read"];return e.scope&&a.push(...e.scope),await U({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:i,codeVerifier:o})},validateAuthorizationCode:async({code:r,codeVerifier:n,redirectURI:o})=>await E({code:r,codeVerifier:n,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:n,error:o}=await Hr("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(n);return{user:{id:n.account_id,name:n.name?.display_name,email:n.email,emailVerified:n.email_verified||!1,image:n.profile_photo_url,...i},data:n}}}};import{betterFetch as Gr}from"@better-fetch/fetch";var gt=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:n,scopes:o,redirectURI:i})=>{let a=o||["profile","email","openid"];return e.scope&&a.push(...e.scope),await U({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:n,redirectURI:i})},validateAuthorizationCode:async({code:n,redirectURI:o})=>await E({code:n,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:r}),async getUserInfo(n){let{data:o,error:i}=await Gr("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${n.accessToken}`}});if(i)return null;let a=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.name,email:o.email,emailVerified:o.email_verified||!1,image:o.picture,...a},data:o}}}};import{betterFetch as Wr}from"@better-fetch/fetch";var _e=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),Kr=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:_e(`${t}/oauth/authorize`),tokenEndpoint:_e(`${t}/oauth/token`),userinfoEndpoint:_e(`${t}/api/v4/user`)}},ht=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:n}=Kr(e.issuer),o="gitlab";return{id:o,name:"Gitlab",createAuthorizationURL:async({state:a,scopes:u,codeVerifier:c,redirectURI:s})=>{let d=u||["read_user"];return e.scope&&d.push(...e.scope),await U({id:o,options:e,authorizationEndpoint:t,scopes:d,state:a,redirectURI:s,codeVerifier:c})},validateAuthorizationCode:async({code:a,redirectURI:u,codeVerifier:c})=>E({code:a,redirectURI:e.redirectURI||u,options:e,codeVerifier:c,tokenEndpoint:r}),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:u,error:c}=await Wr(n,{headers:{authorization:`Bearer ${a.accessToken}`}});if(c||u.state!=="active"||u.locked)return null;let s=await e.mapProfileToUser?.(u);return{user:{id:u.id.toString(),name:u.name??u.username,email:u.email,image:u.avatar_url,emailVerified:!0,...s},data:u}}}};import{betterFetch as yt}from"@better-fetch/fetch";var wt=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:n}){let o=r||["identity"];return e.scope&&o.push(...e.scope),U({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:o,state:t,redirectURI:n,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let n=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),o={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:a}=await yt("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:o,body:n.toString()});if(a)throw a;return he(i)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:n}=await yt("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(n)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...o},data:r}}});import{z as Qr}from"zod";var Ie={apple:ot,discord:it,facebook:st,github:dt,microsoft:ut,google:ct,spotify:lt,twitch:pt,twitter:ft,dropbox:mt,linkedin:gt,gitlab:ht,reddit:wt},Pe=Object.keys(Ie),At=Qr.enum(Pe,{description:"OAuth2 provider to use"});import{z as F}from"zod";import{APIError as de}from"better-call";import{APIError as H}from"better-call";import{z as Z}from"zod";function ee(e){try{return JSON.parse(e)}catch{return null}}var w={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as Zr}from"@better-auth/utils/hmac";import{base64 as Jr}from"@better-auth/utils/base64";import{binary as Yr}from"@better-auth/utils/binary";var Le=()=>T("/get-session",{method:"GET",query:Z.optional(Z.object({disableCookieCache:Z.boolean({description:"Disable cookie cache and fetch session from database"}).or(Z.string().transform(e=>e==="true")).optional(),disableRefresh:Z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),n=r?ee(Yr.decode(Jr.decode(r))):null;if(n&&!await Zr("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(n.session),n.signature))return q(e),e.json(null);let o=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(n?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let d=n.session;if(n.expiresAt<Date.now()||d.session.expiresAt<new Date){let m=e.context.authCookies.sessionData.name;e.setCookie(m,"",{maxAge:0})}else return e.json(d)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return q(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(o||e.query?.disableRefresh)return e.json(i);let a=e.context.sessionConfig.expiresIn,u=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-a*1e3+u*1e3<=Date.now()){let d=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:j(e.context.sessionConfig.expiresIn,"sec")});if(!d)return q(e),e.json(null,{status:401});let f=(d.expiresAt.valueOf()-Date.now())/1e3;return await P(e,{session:d,user:i.user},!1,{maxAge:f}),e.json({session:d,user:i.user})}return await Se(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new H("INTERNAL_SERVER_ERROR",{message:w.FAILED_TO_GET_SESSION})}}),J=async(e,t)=>{if(e.context.session)return e.context.session;let r=await Le()({...e,_flag:"json",headers:e.headers,query:t}).catch(n=>null);return e.context.session=r,r},N=re(async e=>{let t=await J(e);if(!t?.session)throw new H("UNAUTHORIZED");return{session:t}}),Fs=re(async e=>{let t=await J(e);if(!t?.session)throw new H("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,n=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-n<r*1e3))throw new H("FORBIDDEN",{message:"Session is not fresh"});return{session:t}}),bt=()=>T("/list-sessions",{method:"GET",use:[N],requireHeaders:!0,metadata:{openapi:{description:"List all active sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}}}}}}}}}},async e=>{let r=(await e.context.internalAdapter.listSessions(e.context.session.user.id)).filter(n=>n.expiresAt>new Date);return e.json(r)}),kt=T("/revoke-session",{method:"POST",body:Z.object({token:Z.string({description:"The token to revoke"})}),use:[N],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new H("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new H("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(n){throw e.context.logger.error(n&&typeof n=="object"&&"name"in n?n.name:"",n),new H("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Rt=T("/revoke-sessions",{method:"POST",use:[N],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new H("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Tt=T("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[N],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new H("UNAUTHORIZED");let o=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(o.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});import{jwtVerify as en}from"jose";import{SignJWT as Xr}from"jose";async function Et(e,t,r=3600){return await new Xr(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}async function $(e,t,r){return await Et({email:t.toLowerCase(),updateTo:r},e)}async function tn(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new de("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await $(e.context.secret,t.email),n=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:n,token:r},e.request)}var Ut=T("/send-verification-email",{method:"POST",query:F.object({currentURL:F.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:F.object({email:F.string({description:"The email to send the verification email to"}).email(),callbackURL:F.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new de("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new de("BAD_REQUEST",{message:w.USER_NOT_FOUND});return await tn(e,r.user),e.json({status:!0})}),Ot=T("/verify-email",{method:"GET",query:F.object({token:F.string({description:"The token to verify the email"}),callbackURL:F.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(u){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${u}`):e.redirect(`${e.query.callbackURL}?error=${u}`):new de("UNAUTHORIZED",{message:u})}let{token:r}=e.query,n;try{n=await en(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(u){return e.context.logger.error("Failed to verify email",u),t("invalid_token")}let i=F.object({email:F.string().email(),updateTo:F.string().optional()}).parse(n.payload),a=await e.context.internalAdapter.findUserByEmail(i.email);if(!a)return t("user_not_found");if(i.updateTo){let u=await J(e);if(!u){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(u.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let c=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),s=await $(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:c,url:`${e.context.baseURL}/verify-email?token=${s}`,token:s},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await J(e)){let c=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!c)throw new de("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await P(e,{session:c,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function Ae(e,{userInfo:t,account:r,callbackURL:n}){let o=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(c=>{throw L.error(`Better auth was unable to query your database.
Error: `,c),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=o?.user,a=!i;if(o){let c=o.accounts.find(s=>s.providerId===r.providerId);if(c){let s=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([d,f])=>f!==void 0));Object.keys(s).length>0&&await e.context.internalAdapter.updateAccount(c.id,s)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return ge&&L.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:o.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(f){return L.error("Unable to link account",f),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(c=>c?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let c=await $(e.context.secret,i.email),s=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${n}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:s,token:c},e.request)}}catch(c){return c instanceof xt?{error:c.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};let u=await e.context.internalAdapter.createSession(i.id,e.request);return u?{data:{session:u,user:i},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}var St=T("/sign-in/social",{method:"POST",query:v.object({currentURL:v.string().optional()}).optional(),body:v.object({callbackURL:v.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:v.string().optional(),errorCallbackURL:v.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:At,disableRedirect:v.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:v.optional(v.object({token:v.string({description:"ID token from the provider"}),nonce:v.string({description:"Nonce used to generate the token"}).optional(),accessToken:v.string({description:"Access token from the provider"}).optional(),refreshToken:v.string({description:"Refresh token from the provider"}).optional(),expiresAt:v.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new I("NOT_FOUND",{message:w.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new I("NOT_FOUND",{message:w.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(i,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new I("UNAUTHORIZED",{message:w.INVALID_TOKEN});let c=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!c||!c?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new I("UNAUTHORIZED",{message:w.FAILED_TO_GET_USER_INFO});if(!c.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new I("UNAUTHORIZED",{message:w.USER_EMAIL_NOT_FOUND});let s=await Ae(e,{userInfo:{email:c.user.email,id:c.user.id,name:c.user.name||"",image:c.user.image,emailVerified:c.user.emailVerified||!1},account:{providerId:t.id,accountId:c.user.id,accessToken:e.body.idToken.accessToken}});if(s.error)throw new I("UNAUTHORIZED",{message:s.error});return await P(e,s.data),e.json({token:s.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:n}=await ye(e),o=await t.createAuthorizationURL({state:n,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:o.toString(),redirect:!e.body.disableRedirect})}),vt=T("/sign-in/email",{method:"POST",body:v.object({email:v.string({description:"Email of the user"}),password:v.string({description:"Password of the user"}),callbackURL:v.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:v.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new I("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!v.string().email().safeParse(t).success)throw new I("BAD_REQUEST",{message:w.INVALID_EMAIL});let o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new I("UNAUTHORIZED",{message:w.INVALID_EMAIL_OR_PASSWORD});let i=o.accounts.find(s=>s.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new I("UNAUTHORIZED",{message:w.INVALID_EMAIL_OR_PASSWORD});let a=i?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new I("UNAUTHORIZED",{message:w.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new I("UNAUTHORIZED",{message:w.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!o.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new I("UNAUTHORIZED",{message:w.EMAIL_NOT_VERIFIED});let s=await $(e.context.secret,o.user.email),d=`${e.context.baseURL}/verify-email?token=${s}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:o.user,url:d,token:s},e.request),e.context.logger.error("Email not verified",{email:t}),new I("FORBIDDEN",{message:w.EMAIL_NOT_VERIFIED})}let c=await e.context.internalAdapter.createSession(o.user.id,e.headers,e.body.rememberMe===!1);if(!c)throw e.context.logger.error("Failed to create session"),new I("UNAUTHORIZED",{message:w.FAILED_TO_CREATE_SESSION});return await P(e,{session:c,user:o.user},e.body.rememberMe===!1),e.json({user:{id:o.user.id,email:o.user.email,name:o.user.name,image:o.user.image,emailVerified:o.user.emailVerified,createdAt:o.user.createdAt,updatedAt:o.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as ce}from"zod";var be=ce.object({code:ce.string().optional(),error:ce.string().optional(),error_description:ce.string().optional(),state:ce.string().optional()}),_t=T("/callback/:id",{method:["GET","POST"],body:be.optional(),query:be.optional(),metadata:X},async e=>{let t;try{if(e.method==="GET")t=be.parse(e.query);else if(e.method==="POST")t=be.parse(e.body);else throw new Error("Unsupported method")}catch(h){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",h),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:n,state:o,error_description:i}=t;if(!o)throw e.context.logger.error("State not found",n),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${n||"no_code"}&error_description=${i}`);let a=e.context.socialProviders.find(h=>h.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:u,callbackURL:c,link:s,errorURL:d,newUserURL:f}=await nt(e),m;try{m=await a.validateAuthorizationCode({code:r,codeVerifier:u,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(h){throw e.context.logger.error("",h),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let l=await a.getUserInfo(m).then(h=>h?.user);function p(h){let b=d||c||`${e.context.baseURL}/error`;throw b.includes("?")?b=`${b}&error=${h}`:b=`${b}?error=${h}`,e.redirect(b)}if(!l)return e.context.logger.error("Unable to get user info"),p("unable_to_get_user_info");if(!l.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),p("email_not_found");if(!c)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(s){if(s.email!==l.email.toLowerCase())return p("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:s.userId,providerId:a.id,accountId:l.id}))return p("unable_to_link_account");let b;try{b=c.toString()}catch{b=c}throw e.redirect(b)}let g=await Ae(e,{userInfo:{...l,email:l.email,name:l.name||l.email},account:{providerId:a.id,accountId:l.id,...m,scope:m.scopes?.join(",")},callbackURL:c});if(g.error)return e.context.logger.error(g.error.split(" ").join("_")),p(g.error.split(" ").join("_"));let{session:y,user:A}=g.data;await P(e,{session:y,user:A});let k;try{k=(g.isRegister&&f||c).toString()}catch{k=g.isRegister&&f||c}throw e.redirect(k)});import"zod";import{APIError as rn}from"better-call";var It=T("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw q(e),new rn("BAD_REQUEST",{message:w.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),q(e),e.json({success:!0})});import{z as B}from"zod";import{APIError as ue}from"better-call";function Pt(e,t,r){let n=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([o,i])=>n.searchParams.set(o,i)),n.href}function nn(e,t,r){let n=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([o,i])=>n.searchParams.set(o,i)),n.href}var Lt=T("/forget-password",{method:"POST",body:B.object({email:B.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:B.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ue("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let o=60*60*1,i=j(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||o,"sec"),a=M(24);await e.context.internalAdapter.createVerificationValue({value:n.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:i});let u=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:n.user,url:u,token:a},e.request),e.json({status:!0})}),Dt=T("/reset-password/:token",{method:"GET",query:B.object({callbackURL:B.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(Pt(e.context,r,{error:"INVALID_TOKEN"}));let n=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!n||n.expiresAt<new Date?e.redirect(Pt(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(nn(e.context,r,{token:t}))}),Ct=T("/reset-password",{query:B.optional(B.object({token:B.string().optional(),currentURL:B.string().optional()})),method:"POST",body:B.object({newPassword:B.string({description:"The new password to set"}),token:B.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new ue("BAD_REQUEST",{message:w.INVALID_TOKEN});let{newPassword:r}=e.body,n=e.context.password?.config.minPasswordLength,o=e.context.password?.config.maxPasswordLength;if(r.length<n)throw new ue("BAD_REQUEST",{message:w.PASSWORD_TOO_SHORT});if(r.length>o)throw new ue("BAD_REQUEST",{message:w.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(i);if(!a||a.expiresAt<new Date)throw new ue("BAD_REQUEST",{message:w.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let u=a.value,c=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(u)).find(f=>f.providerId==="credential")?(await e.context.internalAdapter.updatePassword(u,c),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:u,providerId:"credential",password:c,accountId:u}),e.json({status:!0}))});import{z as O}from"zod";import{APIError as x}from"better-call";import{z as R}from"zod";import{APIError as on}from"better-call";var Ca=R.object({id:R.string(),providerId:R.string(),accountId:R.string(),userId:R.string(),accessToken:R.string().nullish(),refreshToken:R.string().nullish(),idToken:R.string().nullish(),accessTokenExpiresAt:R.date().nullish(),refreshTokenExpiresAt:R.date().nullish(),scope:R.string().nullish(),password:R.string().nullish(),createdAt:R.date().default(()=>new Date),updatedAt:R.date().default(()=>new Date)}),Na=R.object({id:R.string(),email:R.string().transform(e=>e.toLowerCase()),emailVerified:R.boolean().default(!1),name:R.string(),image:R.string().nullish(),createdAt:R.date().default(()=>new Date),updatedAt:R.date().default(()=>new Date)}),Ba=R.object({id:R.string(),userId:R.string(),expiresAt:R.date(),createdAt:R.date().default(()=>new Date),updatedAt:R.date().default(()=>new Date),token:R.string(),ipAddress:R.string().nullish(),userAgent:R.string().nullish()}),ja=R.object({id:R.string(),value:R.string(),createdAt:R.date().default(()=>new Date),updatedAt:R.date().default(()=>new Date),expiresAt:R.date(),identifier:R.string()});function Nt(e,t){let r=t.fields,n={};for(let o in e){let i=r[o];if(!i){n[o]=e[o];continue}i.returned!==!1&&(n[o]=e[o])}return n}function De(e,t){let r={...t==="user"?e.user?.additionalFields:{},...t==="session"?e.session?.additionalFields:{}};for(let n of e.plugins||[])n.schema&&n.schema[t]&&(r={...r,...n.schema[t].fields});return r}function Ce(e,t){let r=De(e,"user");return Nt(t,{fields:r})}function ke(e,t){let r=De(e,"session");return Nt(t,{fields:r})}function sn(e,t){let r=t.action||"create",n=t.fields,o={};for(let i in n){if(i in e){if(n[i].input===!1){if(n[i].defaultValue){o[i]=n[i].defaultValue;continue}continue}if(n[i].validator?.input&&e[i]!==void 0){o[i]=n[i].validator.input.parse(e[i]);continue}if(n[i].transform?.input&&e[i]!==void 0){o[i]=n[i].transform?.input(e[i]);continue}o[i]=e[i];continue}if(n[i].defaultValue&&r==="create"){o[i]=n[i].defaultValue;continue}if(n[i].required&&r==="create")throw new on("BAD_REQUEST",{message:`${i} is required`})}return o}function Re(e,t,r){let n=De(e,"user");return sn(t||{},{fields:n,action:r})}var Bt=()=>T("/update-user",{method:"POST",body:O.record(O.string(),O.any()),use:[N],metadata:{openapi:{description:"Update the current user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{name:{type:"string",description:"The name of the user"},image:{type:"string",description:"The image of the user"}}}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"}}}}}}}}}},async e=>{let t=e.body;if(t.email)throw new x("BAD_REQUEST",{message:w.EMAIL_CAN_NOT_BE_UPDATED});let{name:r,image:n,...o}=t,i=e.context.session;if(n===void 0&&r===void 0&&Object.keys(o).length===0)return e.json({status:!0});let a=Re(e.context.options,o,"update"),u=await e.context.internalAdapter.updateUserByEmail(i.user.email,{name:r,image:n,...a});return await P(e,{session:i.session,user:u}),e.json({status:!0})}),jt=T("/change-password",{method:"POST",body:O.object({newPassword:O.string({description:"The new password to set"}),currentPassword:O.string({description:"The current password"}),revokeOtherSessions:O.boolean({description:"Revoke all other sessions"}).optional()}),use:[N],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:n}=e.body,o=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new x("BAD_REQUEST",{message:w.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new x("BAD_REQUEST",{message:w.PASSWORD_TOO_LONG});let c=(await e.context.internalAdapter.findAccounts(o.user.id)).find(m=>m.providerId==="credential"&&m.password);if(!c||!c.password)throw new x("BAD_REQUEST",{message:w.CREDENTIAL_ACCOUNT_NOT_FOUND});let s=await e.context.password.hash(t);if(!await e.context.password.verify({hash:c.password,password:r}))throw new x("BAD_REQUEST",{message:w.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(c.id,{password:s});let f=null;if(n){await e.context.internalAdapter.deleteSessions(o.user.id);let m=await e.context.internalAdapter.createSession(o.user.id,e.headers);if(!m)throw new x("INTERNAL_SERVER_ERROR",{message:w.FAILED_TO_GET_SESSION});await P(e,{session:m,user:o.user}),f=m.token}return e.json({token:f})}),Ft=T("/set-password",{method:"POST",body:O.object({newPassword:O.string()}),metadata:{SERVER_ONLY:!0},use:[N]},async e=>{let{newPassword:t}=e.body,r=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new x("BAD_REQUEST",{message:w.PASSWORD_TOO_SHORT});let o=e.context.password.config.maxPasswordLength;if(t.length>o)throw e.context.logger.error("Password is too long"),new x("BAD_REQUEST",{message:w.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(c=>c.providerId==="credential"&&c.password),u=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:u}),e.json({status:!0});throw new x("BAD_REQUEST",{message:"user already has a password"})}),qt=T("/delete-user",{method:"POST",use:[N],body:O.object({callbackURL:O.string().optional(),password:O.string().optional(),token:O.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new x("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(u=>u.providerId==="credential"&&u.password);if(!i||!i.password)throw new x("BAD_REQUEST",{message:w.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new x("BAD_REQUEST",{message:w.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let o=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-o>i)throw new x("BAD_REQUEST",{message:w.SESSION_EXPIRED})}if(e.body.token)return await Ne({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let o=ae(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${o}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${o}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:o},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),q(e);let n=e.context.options.user.deleteUser?.afterDelete;return n&&await n(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Ne=T("/delete-user/callback",{method:"GET",query:O.object({token:O.string(),callbackURL:O.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new x("NOT_FOUND");let t=await J(e);if(!t)throw new x("NOT_FOUND",{message:w.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new x("NOT_FOUND",{message:w.INVALID_TOKEN});if(r.value!==t.user.id)throw new x("NOT_FOUND",{message:w.INVALID_TOKEN});let n=e.context.options.user.deleteUser?.beforeDelete;n&&await n(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),q(e);let o=e.context.options.user.deleteUser?.afterDelete;if(o&&await o(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Vt=T("/change-email",{method:"POST",query:O.object({currentURL:O.string().optional()}).optional(),body:O.object({newEmail:O.string({description:"The new email to set"}).email(),callbackURL:O.string({description:"The URL to redirect to after email verification"}).optional()}),use:[N],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new x("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new x("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new x("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let o=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new x("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await $(e.context.secret,e.context.session.user.email,e.body.newEmail),n=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:n,token:r},e.request),e.json({status:!0})});var an=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,Mt=T("/error",{method:"GET",metadata:{...X,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(an(t),{headers:{"Content-Type":"text/html"}})});var $t=T("/ok",{method:"GET",metadata:{...X,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as te}from"zod";import{APIError as G}from"better-call";var zt=()=>T("/sign-up/email",{method:"POST",query:te.object({currentURL:te.string().optional()}).optional(),body:te.record(te.string(),te.any()),metadata:{openapi:{description:"Sign up a user using email and password",requestBody:{content:{"application/json":{schema:{type:"object",properties:{name:{type:"string",description:"The name of the user"},email:{type:"string",description:"The email of the user"},password:{type:"string",description:"The password of the user"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["name","email","password"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",description:"The id of the user"},email:{type:"string",description:"The email of the user"},name:{type:"string",description:"The name of the user"},image:{type:"string",description:"The image of the user"},emailVerified:{type:"boolean",description:"If the email is verified"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.enabled)throw new G("BAD_REQUEST",{message:"Email and password sign up is not enabled"});let t=e.body,{name:r,email:n,password:o,image:i,callbackURL:a,...u}=t;if(!te.string().email().safeParse(n).success)throw new G("BAD_REQUEST",{message:w.INVALID_EMAIL});let s=e.context.password.config.minPasswordLength;if(o.length<s)throw e.context.logger.error("Password is too short"),new G("BAD_REQUEST",{message:w.PASSWORD_TOO_SHORT});let d=e.context.password.config.maxPasswordLength;if(o.length>d)throw e.context.logger.error("Password is too long"),new G("BAD_REQUEST",{message:w.PASSWORD_TOO_LONG});if((await e.context.internalAdapter.findUserByEmail(n))?.user)throw e.context.logger.info(`Sign-up attempt for existing email: ${n}`),new G("UNPROCESSABLE_ENTITY",{message:w.USER_ALREADY_EXISTS});let m=Re(e.context.options,u),l;try{if(l=await e.context.internalAdapter.createUser({email:n.toLowerCase(),name:r,image:i,...m,emailVerified:!1}),!l)throw new G("BAD_REQUEST",{message:w.FAILED_TO_CREATE_USER})}catch(y){throw ge&&e.context.logger.error("Failed to create user",y),new G("UNPROCESSABLE_ENTITY",{message:w.FAILED_TO_CREATE_USER,details:y})}if(!l)throw new G("UNPROCESSABLE_ENTITY",{message:w.FAILED_TO_CREATE_USER});let p=await e.context.password.hash(o);if(await e.context.internalAdapter.linkAccount({userId:l.id,providerId:"credential",accountId:l.id,password:p}),e.context.options.emailVerification?.sendOnSignUp){let y=await $(e.context.secret,l.email),A=`${e.context.baseURL}/verify-email?token=${y}&callbackURL=${t.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:l,url:A,token:y},e.request)}if(!e.context.options.emailAndPassword.autoSignIn||e.context.options.emailAndPassword.requireEmailVerification)return e.json({token:null});let g=await e.context.internalAdapter.createSession(l.id,e.request);if(!g)throw new G("BAD_REQUEST",{message:w.FAILED_TO_CREATE_SESSION});return await P(e,{session:g,user:l}),e.json({token:g.token})});import{z as le}from"zod";import{APIError as Ht}from"better-call";var Gt=T("/list-accounts",{method:"GET",use:[N],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(n=>({id:n.id,provider:n.providerId})))}),Wt=T("/link-social",{method:"POST",requireHeaders:!0,query:le.object({currentURL:le.string().optional()}).optional(),body:le.object({callbackURL:le.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:le.enum(Pe,{description:"The OAuth2 provider to use"})}),use:[N],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(u=>u.providerId===e.body.provider))throw new Ht("BAD_REQUEST",{message:w.SOCIAL_ACCOUNT_ALREADY_LINKED});let o=e.context.socialProviders.find(u=>u.id===e.body.provider);if(!o)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Ht("NOT_FOUND",{message:w.PROVIDER_NOT_FOUND});let i=await ye(e,{userId:t.user.id,email:t.user.email}),a=await o.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${o.id}`});return e.json({url:a.toString(),redirect:!0})});function Te(e,t){if(t.advanced?.ipAddress?.disableIpTracking)return null;let r="127.0.0.1";if(ze)return r;let o=t.advanced?.ipAddress?.ipAddressHeaders||["x-client-ip","x-forwarded-for","cf-connecting-ip","fastly-client-ip","x-real-ip","x-cluster-client-ip","x-forwarded","forwarded-for","forwarded"],i=e instanceof Request?e.headers:e;for(let a of o){let u=i.get(a);if(typeof u=="string"){let c=u.split(",")[0].trim();if(c)return c}}return null}function dn(e,t,r){let n=Date.now(),o=t*1e3;return n-r.lastRequest<o&&r.count>=e}function cn(e){return new Response(JSON.stringify({message:"Too many requests. Please try again later."}),{status:429,statusText:"Too Many Requests",headers:{"X-Retry-After":e.toString()}})}function un(e,t){let r=Date.now(),n=t*1e3;return Math.ceil((e+n-r)/1e3)}function ln(e,t){let r="rateLimit",n=e.adapter;return{get:async o=>(await n.findMany({model:r,where:[{field:"key",value:o}]}))[0],set:async(o,i,a)=>{try{a?await n.updateMany({model:t??"rateLimit",where:[{field:"key",value:o}],update:{count:i.count,lastRequest:i.lastRequest}}):await n.create({model:t??"rateLimit",data:{key:o,count:i.count,lastRequest:i.lastRequest}})}catch(u){e.logger.error("Error setting rate limit",u)}}}}var Kt=new Map;function pn(e){return e.options.rateLimit?.customStorage?e.options.rateLimit.customStorage:e.rateLimit.storage==="secondary-storage"?{get:async r=>{let n=await e.options.secondaryStorage?.get(r);return n?JSON.parse(n):void 0},set:async(r,n)=>{await e.options.secondaryStorage?.set?.(r,JSON.stringify(n))}}:e.rateLimit.storage==="memory"?{async get(r){return Kt.get(r)},async set(r,n,o){Kt.set(r,n)}}:ln(e,e.rateLimit.modelName)}async function Qt(e,t){if(!t.rateLimit.enabled)return;let r=t.baseURL,n=e.url.replace(r,"").split("?")[0],o=t.rateLimit.window,i=t.rateLimit.max,a=Te(e,t.options)+n,c=fn().find(m=>m.pathMatcher(n));c&&(o=c.window,i=c.max);for(let m of t.options.plugins||[])if(m.rateLimit){let l=m.rateLimit.find(p=>p.pathMatcher(n));if(l){o=l.window,i=l.max;break}}if(t.rateLimit.customRules){let m=Object.keys(t.rateLimit.customRules).find(l=>l.includes("*")?pe(l)(n):l===n);if(m){let l=t.rateLimit.customRules[m],p=typeof l=="function"?await l(e):l;p&&(o=p.window,i=p.max)}}let s=pn(t),d=await s.get(a),f=Date.now();if(!d)await s.set(a,{key:a,count:1,lastRequest:f});else{let m=f-d.lastRequest;if(dn(i,o,d)){let l=un(d.lastRequest,o);return cn(l)}else m>o*1e3?await s.set(a,{...d,count:1,lastRequest:f},!0):await s.set(a,{...d,count:d.count+1,lastRequest:f},!0)}}function fn(){return[{pathMatcher(t){return t.startsWith("/sign-in")||t.startsWith("/sign-up")||t.startsWith("/change-password")||t.startsWith("/change-email")},window:10,max:3}]}import"defu";import{APIError as xt}from"better-call";function Be(e,t){let r=t.plugins?.reduce((u,c)=>({...u,...c.endpoints}),{}),n=t.plugins?.map(u=>u.middlewares?.map(c=>{let s=async d=>c.middleware({...d,context:{...e,...d.context}});return s.path=c.path,s.options=c.middleware.options,s.headers=c.middleware.headers,{path:c.path,middleware:s}})).filter(u=>u!==void 0).flat()||[],i={...{signInSocial:St,callbackOAuth:_t,getSession:Le(),signOut:It,signUpEmail:zt(),signInEmail:vt,forgetPassword:Lt,resetPassword:Ct,verifyEmail:Ot,sendVerificationEmail:Ut,changeEmail:Vt,changePassword:jt,setPassword:Ft,updateUser:Bt(),deleteUser:qt,forgetPasswordCallback:Dt,listSessions:bt(),revokeSession:kt,revokeSessions:Rt,revokeOtherSessions:Tt,linkSocialAccount:Wt,listUserAccounts:Gt,deleteUserCallback:Ne},...r,ok:$t,error:Mt},a={};for(let[u,c]of Object.entries(i))a[u]=async(s={})=>{c.headers=new Headers;let d={setHeader(h,b){c.headers.set(h,b)},setCookie(h,b,S){yn(c.headers,h,b,S)},getCookie(h,b){let _=s.headers?.get("cookie");return gn(_||"",h,b)},getSignedCookie(h,b,S){let _=s.headers;return _?hn(_,b,h,S):null},async setSignedCookie(h,b,S,_){await wn(c.headers,h,b,S,_)},redirect(h){return c.headers.set("Location",h),new K("FOUND")},responseHeader:c.headers},f=await e,m=null,l={...d,...s,path:c.path,context:{...f,...s.context,session:null,setNewSession:function(h){this.newSession=h,m=h}}},p=t.plugins||[],g=p.map(h=>{if(h.hooks?.before)return h.hooks.before}).filter(h=>h!==void 0).flat(),y=p.map(h=>{if(h.hooks?.after)return h.hooks.after}).filter(h=>h!==void 0).flat();t.hooks?.before&&g.push({matcher:()=>!0,handler:t.hooks.before}),t.hooks?.after&&y.push({matcher:()=>!0,handler:t.hooks.after});for(let h of g){if(!h.matcher(l))continue;let b=await h.handler(l);if(b&&"context"in b){l={...l,...b.context};continue}if(b)return b}let A;try{A=await c(l),m&&(l.context.newSession=m)}catch(h){if(m&&(l.context.newSession=m),h instanceof K){if(!y?.length)throw h.headers=c.headers,h;l.context.returned=h,l.context.returned.headers=c.headers;for(let b of y||[])if(b.matcher(l))try{let _=await b.handler(l);_&&"response"in _&&(l.context.returned=_.response)}catch(_){if(_ instanceof K){l.context.returned=_;continue}throw _}if(l.context.returned instanceof K)throw l.context.returned.headers=c.headers,l.context.returned;return l.context.returned}throw h}l.context.returned=A,l.responseHeader=c.headers;for(let h of y)if(h.matcher(l))try{let S=await h.handler(l);if(S)if("responseHeader"in S){let _=S.responseHeader;l.responseHeader=_}else l.context.returned=S}catch(S){if(S instanceof K){l.context.returned=S;continue}throw S}let k=l.context.returned;if(k instanceof Response&&c.headers.forEach((h,b)=>{b==="set-cookie"?k.headers.append(b,h):k.headers.set(b,h)}),k instanceof K)throw k.headers=c.headers,k;return k},a[u].path=c.path,a[u].method=c.method,a[u].options=c.options,a[u].headers=c.headers;return{api:a,middlewares:n}}var Zt=(e,t)=>{let{api:r,middlewares:n}=Be(e,t),o=new URL(e.baseURL).pathname;return mn(r,{extraContext:e,basePath:o,routerMiddleware:[{path:"/**",middleware:Ke},...n],async onRequest(i){for(let a of e.options.plugins||[])if(a.onRequest){let u=await a.onRequest(i,e);if(u&&"response"in u)return u.response}return Qt(i,e)},async onResponse(i){for(let a of e.options.plugins||[])if(a.onResponse){let u=await a.onResponse(i,e);if(u)return u.response}return i},onError(i){if(i instanceof K&&i.status==="FOUND")return;if(t.onAPIError?.throw)throw i;if(t.onAPIError?.onError){t.onAPIError.onError(i,e);return}let a=t.logger?.level,u=a==="error"||a==="warn"||a==="debug"?L:void 0;if(t.logger?.disabled!==!0){if(i&&typeof i=="object"&&"message"in i&&typeof i.message=="string"&&(i.message.includes("no column")||i.message.includes("column")||i.message.includes("relation")||i.message.includes("table")||i.message.includes("does not exist"))){e.logger?.error(i.message);return}i instanceof K?(i.status==="INTERNAL_SERVER_ERROR"&&e.logger.error(i.status,i),u?.error(i.message)):e.logger?.error(i&&typeof i=="object"&&"name"in i?i.name:"",i)}}})};import{defu as Rn}from"defu";function Jt(e,t){let r=t.hooks;async function n(a,u,c){let s=a;for(let m of r||[]){let l=m[u]?.create?.before;if(l){let p=await l(a);if(p===!1)return null;typeof p=="object"&&"data"in p&&(s=p.data)}}let d=c?await c.fn(s):null,f=!c||c.executeMainFn?await e.create({model:u,data:s}):d;for(let m of r||[]){let l=m[u]?.create?.after;l&&await l(f)}return f}async function o(a,u,c,s){let d=a;for(let l of r||[]){let p=l[c]?.update?.before;if(p){let g=await p(a);if(g===!1)return null;d=typeof g=="object"?g.data:g}}let f=s?await s.fn(d):null,m=!s||s.executeMainFn?await e.update({model:c,update:d,where:u}):f;for(let l of r||[]){let p=l[c]?.update?.after;p&&await p(m)}return m}async function i(a,u,c,s){let d=a;for(let l of r||[]){let p=l[c]?.update?.before;if(p){let g=await p(a);if(g===!1)return null;d=typeof g=="object"?g.data:g}}let f=s?await s.fn(d):null,m=!s||s.executeMainFn?await e.updateMany({model:c,update:d,where:u}):f;for(let l of r||[]){let p=l[c]?.update?.after;p&&await p(m)}return m}return{createWithHooks:n,updateWithHooks:o,updateManyWithHooks:i}}var je=(e,t)=>{let r=t.options,n=r.secondaryStorage,o=r.session?.expiresIn||60*60*24*7,{createWithHooks:i,updateWithHooks:a,updateManyWithHooks:u}=Jt(e,t),c=async s=>{await n?.set(s.token,JSON.stringify({session:s.session,user:s.user}),s.session.expiresAt?Math.floor(((s.session.expiresAt instanceof Date?s.session.expiresAt.getTime():new Date(s.session.expiresAt).getTime())-Date.now())/1e3):o)};return{createOAuthUser:async(s,d)=>{let f=await i({createdAt:new Date,updatedAt:new Date,...s},"user"),m=await i({...d,userId:f.id||s.id,createdAt:new Date,updatedAt:new Date},"account");return{user:f,account:m}},createUser:async s=>await i({createdAt:new Date,updatedAt:new Date,emailVerified:!1,...s,email:s.email.toLowerCase()},"user"),createAccount:async s=>await i({createdAt:new Date,updatedAt:new Date,...s},"account"),listSessions:async s=>{if(n){let f=await n.get(`active-sessions-${s}`);if(!f)return[];let m=ee(f)||[],l=Date.now(),p=m.filter(y=>y.expiresAt>l),g=[];for(let y of p){let A=await n.get(y.token);if(A){let k=JSON.parse(A),h=ke(t.options,{...k.session,expiresAt:new Date(k.session.expiresAt)});g.push(h)}}return g}return await e.findMany({model:"session",where:[{field:"userId",value:s}]})},listUsers:async(s,d,f,m)=>await e.findMany({model:"user",limit:s,offset:d,sortBy:f,where:m}),deleteUser:async s=>{await e.deleteMany({model:"session",where:[{field:"userId",value:s}]}),await e.deleteMany({model:"account",where:[{field:"userId",value:s}]}),await e.delete({model:"user",where:[{field:"id",value:s}]})},createSession:async(s,d,f,m)=>{let l=d instanceof Request?d.headers:d,{id:p,...g}=m||{},y={ipAddress:d&&Te(d,t.options)||"",userAgent:l?.get("user-agent")||"",...g,expiresAt:f?j(60*60*24,"sec"):j(o,"sec"),userId:s,token:M(32),createdAt:new Date,updatedAt:new Date};return await i(y,"session",n?{fn:async()=>{let k=await e.findOne({model:"user",where:[{field:"id",value:s}]});n.set(y.token,JSON.stringify({session:y,user:k}),o);let h=await n.get(`active-sessions-${s}`),b=[],S=Date.now();return h&&(b=ee(h)||[],b=b.filter(_=>_.expiresAt>S)),b.push({token:y.token,expiresAt:S+o*1e3}),await n.set(`active-sessions-${s}`,JSON.stringify(b),o),y},executeMainFn:r.session?.storeSessionInDatabase}:void 0)},findSession:async s=>{if(n){let p=await n.get(s);if(p){let g=JSON.parse(p),y=ke(t.options,{...g.session,expiresAt:new Date(g.session.expiresAt),createdAt:new Date(g.session.createdAt),updatedAt:new Date(g.session.updatedAt)}),A=Ce(t.options,{...g.user,createdAt:new Date(g.user.createdAt),updatedAt:new Date(g.user.updatedAt)});return{session:y,user:A}}}let d=await e.findOne({model:"session",where:[{value:s,field:"token"}]});if(!d)return null;let f=await e.findOne({model:"user",where:[{value:d.userId,field:"id"}]});if(!f)return null;let m=ke(t.options,d),l=Ce(t.options,f);return n&&await c({token:s,user:l,session:m}),{session:m,user:l}},findSessions:async s=>{if(n){let l=[];for(let p of s){let g=await n.get(p);if(g){let y=JSON.parse(g),A={session:{...y.session,expiresAt:new Date(y.session.expiresAt)},user:{...y.user,createdAt:new Date(y.user.createdAt),updatedAt:new Date(y.user.updatedAt)}};l.push(A)}}return l}let d=await e.findMany({model:"session",where:[{field:"token",value:s,operator:"in"}]}),f=d.map(l=>l.userId);if(!f.length)return[];let m=await e.findMany({model:"user",where:[{field:"id",value:f,operator:"in"}]});return d.map(l=>{let p=m.find(g=>g.id===l.userId);return p?{session:l,user:p}:null})},updateSession:async(s,d)=>await a(d,[{field:"token",value:s}],"session",n?{async fn(m){let l=await n.get(s),p=null;if(l){let g=JSON.parse(l);return p={...g.session,...m},await c({token:s,user:g.user,session:p}),p}else return null},executeMainFn:r.session?.storeSessionInDatabase}:void 0),deleteSession:async s=>{if(n){await n.delete(s),r.session?.storeSessionInDatabase&&await e.delete({model:"session",where:[{field:"token",value:s}]});return}await e.delete({model:"session",where:[{field:"token",value:s}]})},deleteAccounts:async s=>{await e.deleteMany({model:"account",where:[{field:"userId",value:s}]})},deleteSessions:async s=>{if(n){if(typeof s=="string"){let d=await n.get(`active-sessions-${s}`),f=d?ee(d):[];if(!f)return;for(let m of f)await n.delete(m.token)}else for(let d of s)await n.get(d)&&await n.delete(d);r.session?.storeSessionInDatabase&&await e.deleteMany({model:"session",where:[{field:Array.isArray(s)?"token":"userId",value:s,operator:Array.isArray(s)?"in":void 0}]});return}await e.deleteMany({model:"session",where:[{field:Array.isArray(s)?"token":"userId",value:s,operator:Array.isArray(s)?"in":void 0}]})},findOAuthUser:async(s,d,f)=>{let m=null;if(m=await e.findOne({model:"user",where:[{value:s.toLowerCase(),field:"email"}]}),!m){let p=await e.findOne({model:"account",where:[{value:d,field:"accountId"},{value:f,field:"providerId"}]});return p?(m=await e.findOne({model:"user",where:[{value:p.userId,field:"id"}]}),{user:m,accounts:[p]}):null}let l=await e.findMany({model:"account",where:[{value:m.id,field:"userId"}]});return{user:m,accounts:l||[]}},findUserByEmail:async(s,d)=>{let f=await e.findOne({model:"user",where:[{value:s.toLowerCase(),field:"email"}]});if(!f)return null;if(d?.includeAccounts){let m=await e.findMany({model:"account",where:[{value:f.id,field:"userId"}]});return{user:f,accounts:m}}return{user:f,accounts:[]}},findUserById:async s=>await e.findOne({model:"user",where:[{field:"id",value:s}]}),linkAccount:async s=>await i({...s,createdAt:new Date,updatedAt:new Date},"account"),updateUser:async(s,d)=>await a(d,[{field:"id",value:s}],"user"),updateUserByEmail:async(s,d)=>await a(d,[{field:"email",value:s}],"user"),updatePassword:async(s,d)=>{await u({password:d},[{field:"userId",value:s},{field:"providerId",value:"credential"}],"account")},findAccounts:async s=>await e.findMany({model:"account",where:[{field:"userId",value:s}]}),findAccount:async s=>await e.findOne({model:"account",where:[{field:"accountId",value:s}]}),findAccountByUserId:async s=>await e.findMany({model:"account",where:[{field:"userId",value:s}]}),updateAccount:async(s,d)=>await a(d,[{field:"id",value:s}],"account"),createVerificationValue:async s=>await i({createdAt:new Date,updatedAt:new Date,...s},"verification"),findVerificationValue:async s=>(await e.findMany({model:"verification",where:[{field:"identifier",value:s}],sortBy:{field:"createdAt",direction:"desc"},limit:1}))[0],deleteVerificationValue:async s=>{await e.delete({model:"verification",where:[{field:"id",value:s}]})},deleteVerificationByIdentifier:async s=>{await e.delete({model:"verification",where:[{field:"identifier",value:s}]})},updateVerificationValue:async(s,d)=>await a(d,[{field:"id",value:s}],"verification")}};var W=e=>{let t=e.plugins?.reduce((c,s)=>{let d=s.schema;if(!d)return c;for(let[f,m]of Object.entries(d))c[f]={fields:{...c[f]?.fields,...m.fields},modelName:m.modelName||f};return c},{}),r=e.rateLimit?.storage==="database",n={rateLimit:{modelName:e.rateLimit?.modelName||"rateLimit",fields:{key:{type:"string",fieldName:e.rateLimit?.fields?.key||"key"},count:{type:"number",fieldName:e.rateLimit?.fields?.count||"count"},lastRequest:{type:"number",fieldName:e.rateLimit?.fields?.lastRequest||"lastRequest"}}}},{user:o,session:i,account:a,...u}=t||{};return{user:{modelName:e.user?.modelName||"user",fields:{name:{type:"string",required:!0,fieldName:e.user?.fields?.name||"name"},email:{type:"string",unique:!0,required:!0,fieldName:e.user?.fields?.email||"email"},emailVerified:{type:"boolean",defaultValue:()=>!1,required:!0,fieldName:e.user?.fields?.emailVerified||"emailVerified"},image:{type:"string",required:!1,fieldName:e.user?.fields?.image||"image"},createdAt:{type:"date",defaultValue:()=>new Date,required:!0,fieldName:e.user?.fields?.createdAt||"createdAt"},updatedAt:{type:"date",defaultValue:()=>new Date,required:!0,fieldName:e.user?.fields?.updatedAt||"updatedAt"},...o?.fields,...e.user?.additionalFields},order:1},session:{modelName:e.session?.modelName||"session",fields:{expiresAt:{type:"date",required:!0,fieldName:e.session?.fields?.expiresAt||"expiresAt"},token:{type:"string",required:!0,fieldName:e.session?.fields?.token||"token",unique:!0},createdAt:{type:"date",required:!0,fieldName:e.session?.fields?.createdAt||"createdAt"},updatedAt:{type:"date",required:!0,fieldName:e.session?.fields?.updatedAt||"updatedAt"},ipAddress:{type:"string",required:!1,fieldName:e.session?.fields?.ipAddress||"ipAddress"},userAgent:{type:"string",required:!1,fieldName:e.session?.fields?.userAgent||"userAgent"},userId:{type:"string",fieldName:e.session?.fields?.userId||"userId",references:{model:e.user?.modelName||"user",field:"id",onDelete:"cascade"},required:!0},...i?.fields,...e.session?.additionalFields},order:2},account:{modelName:e.account?.modelName||"account",fields:{accountId:{type:"string",required:!0,fieldName:e.account?.fields?.accountId||"accountId"},providerId:{type:"string",required:!0,fieldName:e.account?.fields?.providerId||"providerId"},userId:{type:"string",references:{model:e.user?.modelName||"user",field:"id",onDelete:"cascade"},required:!0,fieldName:e.account?.fields?.userId||"userId"},accessToken:{type:"string",required:!1,fieldName:e.account?.fields?.accessToken||"accessToken"},refreshToken:{type:"string",required:!1,fieldName:e.account?.fields?.refreshToken||"refreshToken"},idToken:{type:"string",required:!1,fieldName:e.account?.fields?.idToken||"idToken"},accessTokenExpiresAt:{type:"date",required:!1,fieldName:e.account?.fields?.accessTokenExpiresAt||"accessTokenExpiresAt"},refreshTokenExpiresAt:{type:"date",required:!1,fieldName:e.account?.fields?.accessTokenExpiresAt||"refreshTokenExpiresAt"},scope:{type:"string",required:!1,fieldName:e.account?.fields?.scope||"scope"},password:{type:"string",required:!1,fieldName:e.account?.fields?.password||"password"},createdAt:{type:"date",required:!0,fieldName:e.account?.fields?.createdAt||"createdAt"},updatedAt:{type:"date",required:!0,fieldName:e.account?.fields?.updatedAt||"updatedAt"},...a?.fields},order:3},verification:{modelName:e.verification?.modelName||"verification",fields:{identifier:{type:"string",required:!0,fieldName:e.verification?.fields?.identifier||"identifier"},value:{type:"string",required:!0,fieldName:e.verification?.fields?.value||"value"},expiresAt:{type:"date",required:!0,fieldName:e.verification?.fields?.expiresAt||"expiresAt"},createdAt:{type:"date",required:!1,defaultValue:()=>new Date,fieldName:e.verification?.fields?.createdAt||"createdAt"},updatedAt:{type:"date",required:!1,defaultValue:()=>new Date,fieldName:e.verification?.fields?.updatedAt||"updatedAt"}},order:4},...u,...r?n:{}}};import{z as Ac}from"zod";import{Kysely as Yt,MssqlDialect as An}from"kysely";import{MysqlDialect as Xt,PostgresDialect as er,SqliteDialect as tr}from"kysely";function rr(e){if(!e)return null;if("dialect"in e)return rr(e.dialect);if("createDriver"in e){if(e instanceof tr)return"sqlite";if(e instanceof Xt)return"mysql";if(e instanceof er)return"postgres";if(e instanceof An)return"mssql"}return"aggregate"in e?"sqlite":"getConnection"in e?"mysql":"connect"in e?"postgres":null}var Fe=async e=>{let t=e.database;if(!t)return{kysely:null,databaseType:null};if("db"in t)return{kysely:t.db,databaseType:t.type};if("dialect"in t)return{kysely:new Yt({dialect:t.dialect}),databaseType:t.type};let r,n=rr(t);return"createDriver"in t&&(r=t),"aggregate"in t&&(r=new tr({database:t})),"getConnection"in t&&(r=new Xt(t)),"connect"in t&&(r=new er({pool:t})),{kysely:r?new Yt({dialect:r}):null,databaseType:n}};function Ee(e,t,r){return r==="update"?e:e==null&&t.defaultValue?typeof t.defaultValue=="function"?t.defaultValue():t.defaultValue:e}var bn=(e,t,r)=>{let n=W(t);function o(s,d){if(d==="id")return d;let f=n[s].fields[d];return f||console.log("Field not found",s,d),f.fieldName||d}function i(s,d,f){let{type:m="sqlite"}=r||{},l=n[d].fields[f];return l.type==="boolean"&&m==="sqlite"&&s!==null&&s!==void 0?s?1:0:l.type==="date"&&s&&s instanceof Date&&m==="sqlite"?s.toISOString():s}function a(s,d,f){let{type:m="sqlite"}=r||{},l=n[d].fields[f];return l.type==="boolean"&&m==="sqlite"&&s!==null?s===1:l.type==="date"&&s?new Date(s):s}function u(s){return n[s].modelName}let c=t?.advanced?.generateId===!1;return{transformInput(s,d,f){let m=c||f==="update"?{}:{id:t.advanced?.generateId?t.advanced.generateId({model:d}):s.id||M()},l=n[d].fields;for(let p in l){let g=s[p];m[l[p].fieldName||p]=Ee(i(g,d,p),l[p],f)}return m},transformOutput(s,d,f=[]){if(!s)return null;let m=s.id?f.length===0||f.includes("id")?{id:s.id}:{}:{},l=n[d].fields;for(let p in l){if(f.length&&!f.includes(p))continue;let g=l[p];g&&(m[p]=a(s[g.fieldName||p],d,p))}return m},convertWhereClause(s,d){if(!d)return{and:null,or:null};let f={and:[],or:[]};return d.forEach(m=>{let{field:l,value:p,operator:g="=",connector:y="AND"}=m,A=o(s,l),k=h=>g.toLowerCase()==="in"?h(A,"in",Array.isArray(p)?p:[p]):g==="contains"?h(A,"like",`%${p}%`):g==="starts_with"?h(A,"like",`${p}%`):g==="ends_with"?h(A,"like",`%${p}`):g==="eq"?h(A,"=",p):g==="ne"?h(A,"<>",p):g==="gt"?h(A,">",p):g==="gte"?h(A,">=",p):g==="lt"?h(A,"<",p):g==="lte"?h(A,"<=",p):h(A,g,p);y==="OR"?f.or.push(k):f.and.push(k)}),{and:f.and.length?f.and:null,or:f.or.length?f.or:null}},async withReturning(s,d,f,m){let l;if(r?.type!=="mysql")l=await d.returningAll().executeTakeFirst();else{await d.execute();let p=s.id?"id":m[0].field?m[0].field:"id",g=s[p]||m[0].value;l=await e.selectFrom(u(f)).selectAll().where(o(f,p),"=",g).executeTakeFirst()}return l},getModelName:u,getField:o}},nr=(e,t)=>r=>{let{transformInput:n,withReturning:o,transformOutput:i,convertWhereClause:a,getModelName:u,getField:c}=bn(e,r,t);return{id:"kysely",async create(s){let{model:d,data:f,select:m}=s,l=n(f,d,"create"),p=e.insertInto(u(d)).values(l);return i(await o(l,p,d,[]),d,m)},async findOne(s){let{model:d,where:f,select:m}=s,{and:l,or:p}=a(d,f),g=e.selectFrom(u(d)).selectAll();l&&(g=g.where(A=>A.and(l.map(k=>k(A))))),p&&(g=g.where(A=>A.or(p.map(k=>k(A)))));let y=await g.executeTakeFirst();return y?i(y,d,m):null},async findMany(s){let{model:d,where:f,limit:m,offset:l,sortBy:p}=s,{and:g,or:y}=a(d,f),A=e.selectFrom(u(d));g&&(A=A.where(h=>h.and(g.map(b=>b(h))))),y&&(A=A.where(h=>h.or(y.map(b=>b(h))))),A=A.limit(m||100),l&&(A=A.offset(l)),p&&(A=A.orderBy(c(d,p.field),p.direction));let k=await A.selectAll().execute();return k?k.map(h=>i(h,d)):[]},async update(s){let{model:d,where:f,update:m}=s,{and:l,or:p}=a(d,f),g=n(m,d,"update"),y=e.updateTable(u(d)).set(g);return l&&(y=y.where(k=>k.and(l.map(h=>h(k))))),p&&(y=y.where(k=>k.or(p.map(h=>h(k))))),await i(await o(g,y,d,f),d)},async updateMany(s){let{model:d,where:f,update:m}=s,{and:l,or:p}=a(d,f),g=n(m,d,"update"),y=e.updateTable(u(d)).set(g);return l&&(y=y.where(k=>k.and(l.map(h=>h(k))))),p&&(y=y.where(k=>k.or(p.map(h=>h(k))))),(await y.execute()).length},async delete(s){let{model:d,where:f}=s,{and:m,or:l}=a(d,f),p=e.deleteFrom(u(d));m&&(p=p.where(g=>g.and(m.map(y=>y(g))))),l&&(p=p.where(g=>g.or(l.map(y=>y(g))))),await p.execute()},async deleteMany(s){let{model:d,where:f}=s,{and:m,or:l}=a(d,f),p=e.deleteFrom(u(d));return m&&(p=p.where(g=>g.and(m.map(y=>y(g))))),l&&(p=p.where(g=>g.or(l.map(y=>y(g))))),(await p.execute()).length},options:t}};var kn=e=>{let t=W(e);function r(n,o){return o==="id"?o:t[n].fields[o].fieldName||o}return{transformInput(n,o,i){let a=i==="update"?{}:{id:e.advanced?.generateId?e.advanced.generateId({model:o}):n.id||M()},u=t[o].fields;for(let c in u){let s=n[c];s===void 0&&!u[c].defaultValue||(a[u[c].fieldName||c]=Ee(s,u[c],i))}return a},transformOutput(n,o,i=[]){if(!n)return null;let a=n.id||n._id?i.length===0||i.includes("id")?{id:n.id}:{}:{},u=t[o].fields;for(let c in u){if(i.length&&!i.includes(c))continue;let s=u[c];s&&(a[c]=n[s.fieldName||c])}return a},convertWhereClause(n,o,i){return o.filter(a=>n.every(u=>{let{field:c,value:s,operator:d}=u,f=r(i,c);if(d==="in"){if(!Array.isArray(s))throw new Error("Value must be an array");return s.includes(a[f])}else return d==="contains"?a[f].includes(s):d==="starts_with"?a[f].startsWith(s):d==="ends_with"?a[f].endsWith(s):a[f]===s}))},getField:r}},or=e=>t=>{let{transformInput:r,transformOutput:n,convertWhereClause:o,getField:i}=kn(t);return{id:"memory",create:async({model:a,data:u})=>{let c=r(u,a,"create");return e[a].push(c),n(c,a)},findOne:async({model:a,where:u,select:c})=>{let s=e[a],f=o(u,s,a)[0]||null;return n(f,a,c)},findMany:async({model:a,where:u,sortBy:c,limit:s,offset:d})=>{let f=e[a];return u&&(f=o(u,f,a)),c&&(f=f.sort((m,l)=>{let p=i(a,c.field);return c.direction==="asc"?m[p]>l[p]?1:-1:m[p]<l[p]?1:-1})),d!==void 0&&(f=f.slice(d)),s!==void 0&&(f=f.slice(0,s)),f.map(m=>n(m,a))},update:async({model:a,where:u,update:c})=>{let s=e[a],d=o(u,s,a);return d.forEach(f=>{Object.assign(f,r(c,a,"update"))}),n(d[0],a)},delete:async({model:a,where:u})=>{let c=e[a],s=o(u,c,a);e[a]=c.filter(d=>!s.includes(d))},deleteMany:async({model:a,where:u})=>{let c=e[a],s=o(u,c,a),d=0;return e[a]=c.filter(f=>s.includes(f)?(d++,!1):!s.includes(f)),d},updateMany(a){let{model:u,where:c,update:s}=a,d=e[u],f=o(c,d,u);return f.forEach(m=>{Object.assign(m,s)}),f[0]||null}}};async function ir(e){if(!e.database){let n=W(e),o=Object.keys(n).reduce((i,a)=>(i[a]=[],i),{});return L.warn("No database configuration provided. Using memory adapter in development"),or(o)(e)}if(typeof e.database=="function")return e.database(e);let{kysely:t,databaseType:r}=await Fe(e);if(!t)throw new C("Failed to initialize database adapter");return nr(t,{type:r||"sqlite"})(e)}var qe="better-auth-secret-123456789";import{APIError as sr}from"better-call";async function ar(e,t){let n=(await t.context.internalAdapter.findAccounts(e))?.find(a=>a.providerId==="credential"),o=n?.password;if(!n||!o||!t.body.password)throw new sr("BAD_REQUEST",{message:"No password credential found"});if(!await t.context.password.verify({hash:o,password:t.body.password}))throw new sr("BAD_REQUEST",{message:"Invalid password"});return!0}var dr=async e=>{let t=await ir(e),r=e.plugins||[],n=En(e),o=we(e.logger),i=ie(e.baseURL,e.basePath),a=e.secret||D.BETTER_AUTH_SECRET||D.AUTH_SECRET||qe;a===qe&&oe&&o.error("You are using the default secret. Please set `BETTER_AUTH_SECRET` in your environment variables or pass `secret` in your auth config."),e={...e,secret:a,baseURL:i?new URL(i).origin:"",basePath:e.basePath||"/api/auth",plugins:r.concat(n),emailAndPassword:{...e.emailAndPassword,enabled:e.emailAndPassword?.enabled??!1,autoSignIn:e.emailAndPassword?.autoSignIn??!0}};let u=Qe(e),c=W(e),s=Object.keys(e.socialProviders||{}).map(l=>{let p=e.socialProviders?.[l];return p.enabled===!1?null:(p.clientId||o.warn(`Social provider ${l} is missing clientId or clientSecret`),Ie[l](p))}).filter(l=>l!==null),d=({model:l,size:p})=>typeof e?.advanced?.generateId=="function"?e.advanced.generateId({model:l,size:p}):M(p),f={appName:e.appName||"Better Auth",socialProviders:s,options:e,tables:c,trustedOrigins:Un(e),baseURL:i||"",sessionConfig:{updateAge:e.session?.updateAge!==void 0?e.session.updateAge:24*60*60,expiresIn:e.session?.expiresIn||60*60*24*7,freshAge:e.session?.freshAge===void 0?5*60:e.session.freshAge},secret:a,rateLimit:{...e.rateLimit,enabled:e.rateLimit?.enabled??oe,window:e.rateLimit?.window||10,max:e.rateLimit?.max||100,storage:e.rateLimit?.storage||(e.secondaryStorage?"secondary-storage":"memory")},authCookies:u,logger:o,generateId:d,session:null,secondaryStorage:e.secondaryStorage,password:{hash:e.emailAndPassword?.password?.hash||et,verify:e.emailAndPassword?.password?.verify||tt,config:{minPasswordLength:e.emailAndPassword?.minPasswordLength||8,maxPasswordLength:e.emailAndPassword?.maxPasswordLength||128},checkPassword:ar},setNewSession(l){this.newSession=l},newSession:null,adapter:t,internalAdapter:je(t,{options:e,hooks:e.databaseHooks?[e.databaseHooks]:[],generateId:d}),createAuthCookie:xe(e)},{context:m}=Tn(f);return m};function Tn(e){let t=e.options,r=t.plugins||[],n=e,o=[];for(let i of r)if(i.init){let a=i.init(e);typeof a=="object"&&(a.options&&(a.options.databaseHooks&&o.push(a.options.databaseHooks),t=Rn(t,a.options)),a.context&&(n={...n,...a.context}))}return o.push(t.databaseHooks),n.internalAdapter=je(e.adapter,{options:t,hooks:o.filter(i=>i!==void 0),generateId:e.generateId}),n.options=t,{context:n}}function En(e){let t=[];return e.advanced?.crossSubDomainCookies?.enabled,t}function Un(e){let t=ie(e.baseURL,e.basePath);if(!t)return[];let r=[new URL(t).origin];e.trustedOrigins&&r.push(...e.trustedOrigins);let n=D.BETTER_AUTH_TRUSTED_ORIGINS;return n&&r.push(...n.split(",")),r}var _u=e=>{let t=dr(e),{api:r}=Be(t,e),n=e.plugins?.reduce((o,i)=>i.$ERROR_CODES?{...o,...i.$ERROR_CODES}:o,{});return{handler:async o=>{let i=await t,a=i.options.basePath||"/api/auth",u=new URL(o.url);if(!i.options.baseURL){let s=ie(void 0,a)||`${u.origin}${a}`;i.options.baseURL=s,i.baseURL=s}i.trustedOrigins=[...e.trustedOrigins||[],i.baseURL,u.origin];let{handler:c}=Zt(i,e);return c(o)},api:r,options:e,$context:t,$Infer:{},$ERROR_CODES:{...n,...w}}};export{C as BetterAuthError,X as HIDE_METADATA,He as MissingDependencyError,_u as betterAuth,ki as capitalizeFirstLetter,xe as createCookieGetter,we as createLogger,q as deleteSessionCookie,M as generateId,ye as generateState,Qe as getCookies,ve as levels,L as logger,Jn as parseCookies,Mn as parseSetCookieHeader,nt as parseState,Se as setCookieCache,P as setSessionCookie,Dr as shouldPublishLog};
