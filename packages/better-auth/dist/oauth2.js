var y=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));import{createHash as k}from"@better-auth/utils/hash";import{base64Url as A}from"@better-auth/utils/base64";async function h(e){let t=await k("SHA-256").digest(e);return A.encode(new Uint8Array(t),{padding:!1})}function U(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?y(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function V({id:e,options:t,authorizationEndpoint:r,state:n,codeVerifier:a,scopes:p,claims:o,redirectURI:c,duration:d}){let s=new URL(r);if(s.searchParams.set("response_type","code"),s.searchParams.set("client_id",t.clientId),s.searchParams.set("state",n),s.searchParams.set("scope",p.join(" ")),s.searchParams.set("redirect_uri",t.redirectURI||c),a){let u=await h(a);s.searchParams.set("code_challenge_method","S256"),s.searchParams.set("code_challenge",u)}if(o){let u=o.reduce((f,b)=>(f[b]=null,f),{});s.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return d&&s.searchParams.set("duration",d),s}import{betterFetch as x}from"@better-fetch/fetch";import{jwtVerify as L}from"jose";async function $({code:e,codeVerifier:t,redirectURI:r,options:n,tokenEndpoint:a,authentication:p}){let o=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(o.set("grant_type","authorization_code"),o.set("code",e),t&&o.set("code_verifier",t),o.set("redirect_uri",r),p==="basic"){let f=btoa(`${n.clientId}:${n.clientSecret}`);c.authorization=`Basic ${f}`}else o.set("client_id",n.clientId),o.set("client_secret",n.clientSecret);let{data:d,error:s}=await x(a,{method:"POST",body:o,headers:c});if(s)throw s;return U(d)}async function q(e,t){let{data:r,error:n}=await x(t,{method:"GET",headers:{accept:"application/json","user-agent":"better-auth"}});if(n)throw n;let a=r.keys,p=JSON.parse(atob(e.split(".")[0])),o=a.find(d=>d.kid===p.kid);if(!o)throw new Error("Key not found");return await L(e,o)}import{z as i}from"zod";import{APIError as R}from"better-call";var m=Object.create(null),l=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?m:globalThis),w=new Proxy(m,{get(e,t){return l()[t]??m[t]},has(e,t){let r=l();return t in r||t in m},set(e,t,r){let n=l(!0);return n[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=l(!0);return delete r[t],!0},ownKeys(){let e=l(!0);return Object.keys(e)}});function T(e){return e?e!=="false":!1}var v=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var G=v==="test"||T(w.TEST);function _(e){try{return new URL(e).origin}catch{return null}}import{createHash as de}from"@better-auth/utils/hash";import{xchacha20poly1305 as ue}from"@noble/ciphers/chacha";import{bytesToHex as me,hexToBytes as ge,utf8ToBytes as ye}from"@noble/ciphers/utils";import{managedNonce as Ue}from"@noble/ciphers/webcrypto";import{scryptAsync as te}from"@noble/hashes/scrypt";import{getRandomValues as ne}from"uncrypto";import{hex as se}from"@better-auth/utils/hex";import{createRandomStringGenerator as E}from"@better-auth/utils/random";var g=E("a-z","0-9","A-Z","-_");async function ve(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?_(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new R("BAD_REQUEST",{message:"callbackURL is required"});let n=g(128),a=g(32),p=JSON.stringify({callbackURL:r,codeVerifier:n,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),o=new Date;o.setMinutes(o.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:p,identifier:a,expiresAt:o});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new R("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:n}}async function Ee(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let n=i.object({callbackURL:i.string(),codeVerifier:i.string(),errorURL:i.string().optional(),newUserURL:i.string().optional(),expiresAt:i.number(),link:i.object({email:i.string(),userId:i.string()}).optional()}).parse(JSON.parse(r.value));if(n.errorURL||(n.errorURL=`${e.context.baseURL}/error`),n.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),n}export{V as createAuthorizationURL,h as generateCodeChallenge,ve as generateState,U as getOAuth2Tokens,Ee as parseState,$ as validateAuthorizationCode,q as validateToken};
