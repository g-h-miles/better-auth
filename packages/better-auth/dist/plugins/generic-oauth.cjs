"use strict";var de=Object.defineProperty;var Lt=Object.getOwnPropertyDescriptor;var Pt=Object.getOwnPropertyNames;var xt=Object.prototype.hasOwnProperty;var s=(e,r)=>de(e,"name",{value:r,configurable:!0});var Dt=(e,r)=>{for(var t in r)de(e,t,{get:r[t],enumerable:!0})},Ct=(e,r,t,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of Pt(r))!xt.call(e,i)&&i!==t&&de(e,i,{get:()=>r[i],enumerable:!(o=Lt(r,i))||o.enumerable});return e};var jt=e=>Ct(de({},"__esModule",{value:!0}),e);var vr={};Dt(vr,{genericOAuth:()=>Ir});module.exports=jt(vr);var ae=require("@better-fetch/fetch"),W=require("better-call"),L=require("zod");var oe=require("better-call");var xe=require("better-call");var G=require("better-call"),Se=(0,G.createMiddleware)(async()=>({})),ie=(0,G.createMiddlewareCreator)({use:[Se,(0,G.createMiddleware)(async()=>({}))]}),f=(0,G.createEndpointCreator)({use:[Se]});function me(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}s(me,"escapeRegExpChar");function Nt(e){let r="";for(let t=0;t<e.length;t++)r+=me(e[t]);return r}s(Nt,"escapeRegExpString");function Ie(e,r=!0){if(Array.isArray(e))return`(?:${e.map(u=>`^${Ie(u,r)}$`).join("|")})`;let t="",o="",i=".";r===!0?(t="/",o="[/\\\\]",i="[^/\\\\]"):r&&(t=r,o=Nt(t),o.length>1?(o=`(?:${o})`,i=`((?!${o}).)`):i=`[^${o}]`);let n=r?`${o}+?`:"",a=r?`${o}*?`:"",c=r?e.split(t):[e],d="";for(let l=0;l<c.length;l++){let u=c[l],h=c[l+1],g="";if(!(!u&&l>0)){if(r&&(l===c.length-1?g=a:h!=="**"?g=n:g=""),r&&u==="**"){g&&(d+=l===0?"":g,d+=`(?:${i}*?${g})*?`);continue}for(let y=0;y<u.length;y++){let b=u[y];b==="\\"?y<u.length-1&&(d+=me(u[y+1]),y++):b==="?"?d+=i:b==="*"?d+=`${i}*?`:d+=me(b)}d+=g}}return d}s(Ie,"transform");function $t(e,r){if(typeof r!="string")throw new TypeError(`Sample must be a string, but ${typeof r} given`);return e.test(r)}s($t,"isMatch");function fe(e,r){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof r=="string"||typeof r=="boolean")&&(r={separator:r}),arguments.length===2&&!(typeof r>"u"||typeof r=="object"&&r!==null&&!Array.isArray(r)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof r} given`);if(r=r||{},r.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let t=Ie(e,r.separator),o=new RegExp(`^${t}$`,r.flags),i=$t.bind(null,o);return i.options=r,i.pattern=e,i.regexp=o,i}s(fe,"wildcardMatch");var ce=Object.create(null),ne=s(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ce:globalThis),"_getEnv"),ve=new Proxy(ce,{get(e,r){return ne()[r]??ce[r]},has(e,r){let t=ne();return r in t||r in ce},set(e,r,t){let o=ne(!0);return o[r]=t,!0},deleteProperty(e,r){if(!r)return!1;let t=ne(!0);return delete t[r],!0},ownKeys(){let e=ne(!0);return Object.keys(e)}});function Vt(e){return e?e!=="false":!1}s(Vt,"toBoolean");var ge=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var he=ge==="dev"||ge==="development",Bt=ge==="test"||Vt(ve.TEST);var z=class extends Error{static{s(this,"BetterAuthError")}constructor(r,t){super(r),this.name="BetterAuthError",this.message=r,this.cause=t,this.stack=""}};function Le(e){try{return new URL(e).origin}catch{return null}}s(Le,"getOrigin");function Pe(e){return e.includes("://")?new URL(e).host:e}s(Pe,"getHost");var Mt=ie(async e=>{if(e.request?.method!=="POST")return;let{body:r,query:t,context:o}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",n=r?.callbackURL||t?.callbackURL,a=r?.redirectTo,c=t?.currentURL,d=r?.errorCallbackURL,l=r?.newUserCallbackURL,u=o.trustedOrigins,h=e.headers?.has("cookie"),g=s((b,E)=>b.startsWith("/")?!1:E.includes("*")?fe(E)(Pe(b)):b.startsWith(E),"matchesPattern"),y=s((b,E)=>{if(!b)return;if(!u.some(M=>g(b,M)||b?.startsWith("/")&&E!=="origin"&&!b.includes(":")))throw e.context.logger.error(`Invalid ${E}: ${b}`),e.context.logger.info(`If it's a valid URL, please add ${b} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${u}`),new xe.APIError("FORBIDDEN",{message:`Invalid ${E}`})},"validateURL");h&&!e.context.options.advanced?.disableCSRFCheck&&y(i,"origin"),n&&y(n,"callbackURL"),a&&y(a,"redirectURL"),c&&y(c,"currentURL"),d&&y(d,"errorCallbackURL"),l&&y(a,"newUserCallbackURL")});var T=require("better-call"),k=require("zod");var q=s((e,r="ms")=>new Date(Date.now()+(r==="sec"?e*1e3:e)),"getDate");var De=require("@better-auth/utils/base64");var Ce=require("@better-auth/utils/hmac");async function we(e,r){if(e.context.options.session?.cookieCache?.enabled){let o=De.base64Url.encode(JSON.stringify({session:r,expiresAt:q(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,Ce.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(r))}),{padding:!1});if(o.length>4093)throw new z("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}s(we,"setCookieCache");async function S(e,r,t,o){let i=e.context.authCookies.sessionToken.options,n=t?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,r.session.token,e.context.secret,{...i,maxAge:n,...o}),t&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await we(e,r),e.context.setNewSession(r),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(r.session.token,JSON.stringify({user:r.user,session:r.session}),Math.floor((new Date(r.session.expiresAt).getTime()-Date.now())/1e3))}s(S,"setSessionCookie");function D(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}s(D,"deleteSessionCookie");var Me=require("@better-fetch/fetch"),ze=require("better-call"),F=require("jose");var je=require("@better-auth/utils/hash"),Ne=require("@better-auth/utils/base64");async function $e(e){let r=await(0,je.createHash)("SHA-256").digest(e);return Ne.base64Url.encode(new Uint8Array(r),{padding:!1})}s($e,"generateCodeChallenge");function le(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?q(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}s(le,"getOAuth2Tokens");async function R({id:e,options:r,authorizationEndpoint:t,state:o,codeVerifier:i,scopes:n,claims:a,redirectURI:c,duration:d}){let l=new URL(t);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",r.clientId),l.searchParams.set("state",o),l.searchParams.set("scope",n.join(" ")),l.searchParams.set("redirect_uri",r.redirectURI||c),i){let u=await $e(i);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",u)}if(a){let u=a.reduce((h,g)=>(h[g]=null,h),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return d&&l.searchParams.set("duration",d),l}s(R,"createAuthorizationURL");var Ve=require("@better-fetch/fetch");var zt=require("jose");async function A({code:e,codeVerifier:r,redirectURI:t,options:o,tokenEndpoint:i,authentication:n}){let a=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),r&&a.set("code_verifier",r),a.set("redirect_uri",t),n==="basic"){let h=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${h}`}else a.set("client_id",o.clientId),a.set("client_secret",o.clientSecret);let{data:d,error:l}=await(0,Ve.betterFetch)(i,{method:"POST",body:a,headers:c});if(l)throw l;return le(d)}s(A,"validateAuthorizationCode");var C=require("zod"),ye=require("better-call");var Gt=require("@better-auth/utils/hash"),Qt=require("@noble/ciphers/chacha"),be=require("@noble/ciphers/utils"),Wt=require("@noble/ciphers/webcrypto");var qt=require("@noble/hashes/scrypt"),Ft=require("uncrypto"),Ht=require("@better-auth/utils/hex");var Be=require("@better-auth/utils/random"),se=(0,Be.createRandomStringGenerator)("a-z","0-9","A-Z","-_");async function K(e,r){let t=e.body?.callbackURL||(e.query?.currentURL?Le(e.query?.currentURL):"")||e.context.options.baseURL;if(!t)throw new ye.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=se(128),i=se(32),n=JSON.stringify({callbackURL:t,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:r,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:n,identifier:i,expiresAt:a});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new ye.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}s(K,"generateState");async function ue(e){let r=e.query.state||e.body.state,t=await e.context.internalAdapter.findVerificationValue(r);if(!t)throw e.context.logger.error("State Mismatch. Verification not found",{state:r}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=C.z.object({callbackURL:C.z.string(),codeVerifier:C.z.string(),errorURL:C.z.string().optional(),newUserURL:C.z.string().optional(),expiresAt:C.z.number(),link:C.z.object({email:C.z.string(),userId:C.z.string()}).optional()}).parse(JSON.parse(t.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(t.id),e.context.logger.error("State expired.",{state:r}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(t.id),o}s(ue,"parseState");var qe=s(e=>{let r="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:t,scopes:o,redirectURI:i}){let n=o||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${n.join(" ")}&state=${t}&response_mode=form_post`)},validateAuthorizationCode:s(async({code:t,codeVerifier:o,redirectURI:i})=>A({code:t,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async verifyIdToken(t,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,o);let i=(0,F.decodeProtectedHeader)(t),{kid:n,alg:a}=i;if(!n||!a)return!1;let c=await Zt(n),{payload:d}=await(0,F.jwtVerify)(t,c,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{d[l]!==void 0&&(d[l]=!!d[l])}),o&&d.nonce!==o?!1:!!d},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let o=(0,F.decodeJwt)(t.idToken);if(!o)return null;let i=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:i,emailVerified:!1,email:o.email,...n},data:o}}}},"apple"),Zt=s(async e=>{let r="https://appleid.apple.com",t="/auth/keys",{data:o}=await(0,Me.betterFetch)(`${r}${t}`);if(!o?.keys)throw new ze.APIError("BAD_REQUEST",{message:"Keys not found"});let i=o.keys.find(n=>n.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await(0,F.importJWK)(i,i.alg)},"getApplePublicKey");var Fe=require("@better-fetch/fetch");var He=s(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:r,scopes:t,redirectURI:o}){let i=t||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${r}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:s(async({code:r,redirectURI:t})=>A({code:r,redirectURI:e.redirectURI||t,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,Fe.betterFetch)("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${r.accessToken}`}});if(o)return null;if(t.avatar===null){let n=t.discriminator==="0"?Number(BigInt(t.id)>>BigInt(22))%6:parseInt(t.discriminator)%5;t.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=t.avatar.startsWith("a_")?"gif":"png";t.image_url=`https://cdn.discordapp.com/avatars/${t.id}/${t.avatar}.${n}`}let i=await e.mapProfileToUser?.(t);return{user:{id:t.id,name:t.display_name||t.username||"",email:t.email,emailVerified:t.verified,image:t.image_url,...i},data:t}}}),"discord");var Ge=require("@better-fetch/fetch");var Qe=s(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:r,scopes:t,redirectURI:o}){let i=t||["email","public_profile"];return e.scope&&i.push(...e.scope),await R({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:r,redirectURI:o})},validateAuthorizationCode:s(async({code:r,redirectURI:t})=>A({code:r,redirectURI:e.redirectURI||t,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,Ge.betterFetch)("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:r.accessToken}});if(o)return null;let i=await e.mapProfileToUser?.(t);return{user:{id:t.id,name:t.name,email:t.email,image:t.picture.data.url,emailVerified:t.email_verified,...i},data:t}}}),"facebook");var Ae=require("@better-fetch/fetch");var We=s(e=>{let r="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:t,scopes:o,codeVerifier:i,redirectURI:n}){let a=o||["user:email"];return e.scope&&a.push(...e.scope),R({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:t,redirectURI:n})},validateAuthorizationCode:s(async({code:t,redirectURI:o})=>A({code:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:o,error:i}=await(0,Ae.betterFetch)("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${t.accessToken}`}});if(i)return null;let n=!1,{data:a}=await(0,Ae.betterFetch)("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});a&&(o.email=(a.find(d=>d.primary)??a[0])?.email,n=a.find(d=>d.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:n,...c},data:o}}}},"github");var Re=["info","success","warn","error","debug"];function Kt(e,r){return Re.indexOf(r)<=Re.indexOf(e)}s(Kt,"shouldPublishLog");var j={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Jt={info:j.fg.blue,success:j.fg.green,warn:j.fg.yellow,error:j.fg.red,debug:j.fg.magenta},Yt=s((e,r)=>{let t=new Date().toISOString();return`${j.dim}${t}${j.reset} ${Jt[e]}${e.toUpperCase()}${j.reset} ${j.bright}Better Auth${j.reset} ${r}`},"formatMessage"),Xt=s(e=>{let r=e?.disabled!==!0,t=e?.level??"error",o=s((i,n,a=[])=>{if(!r||!Kt(t,i))return;let c=Yt(i,n);if(!e||typeof e.log!="function"){i==="error"?console.error(c,...a):i==="warn"?console.warn(c,...a):console.log(c,...a);return}e.log(i==="success"?"info":i,c,...a)},"LogFunc");return Object.fromEntries(Re.map(i=>[i,(...[n,...a])=>o(i,n,a)]))},"createLogger"),P=Xt();var Ze=require("@better-fetch/fetch"),Ke=require("jose");var Je=s(e=>({id:"google",name:"Google",async createAuthorizationURL({state:r,scopes:t,codeVerifier:o,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw P.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new z("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new z("codeVerifier is required for Google");let n=t||["email","profile","openid"];e.scope&&n.push(...e.scope);let a=await R({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:r,codeVerifier:o,redirectURI:i});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:s(async({code:r,codeVerifier:t,redirectURI:o})=>A({code:r,codeVerifier:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(r,t){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,t);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${r}`,{data:i}=await(0,Ze.betterFetch)(o);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let t=(0,Ke.decodeJwt)(r.idToken),o=await e.mapProfileToUser?.(t);return{user:{id:t.sub,name:t.name,email:t.email,image:t.picture,emailVerified:t.email_verified,...o},data:t}}}),"google");var Ye=require("@better-fetch/fetch");var Xe=require("jose");var et=s(e=>{let r=e.tenantId||"common",t=`https://login.microsoftonline.com/${r}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${r}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let n=i.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),R({id:"microsoft",options:e,authorizationEndpoint:t,state:i.state,codeVerifier:i.codeVerifier,scopes:n,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:n,redirectURI:a}){return A({code:i,codeVerifier:n,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:o})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let n=(0,Xe.decodeJwt)(i.idToken),a=e.profilePhotoSize||48;await(0,Ye.betterFetch)(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(d){if(!(e.disableProfilePhoto||!d.response.ok))try{let u=await d.response.clone().arrayBuffer(),h=Buffer.from(u).toString("base64");n.picture=`data:image/jpeg;base64, ${h}`}catch(l){P.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let c=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...c},data:n}}}},"microsoft");var tt=require("@better-fetch/fetch");var rt=s(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:r,scopes:t,codeVerifier:o,redirectURI:i}){let n=t||["user-read-email"];return e.scope&&n.push(...e.scope),R({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:r,codeVerifier:o,redirectURI:i})},validateAuthorizationCode:s(async({code:r,codeVerifier:t,redirectURI:o})=>A({code:r,codeVerifier:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,tt.betterFetch)("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(t);return{user:{id:t.id,name:t.display_name,email:t.email,image:t.images[0]?.url,emailVerified:!1,...i},data:t}}}),"spotify");var J={isAction:!1};var ot=require("@better-auth/utils/random");var it=s(e=>(0,ot.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32),"generateId");var nt=require("jose");var st=s(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:r,scopes:t,redirectURI:o}){let i=t||["user:read:email","openid"];return e.scope&&i.push(...e.scope),R({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:r,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:s(async({code:r,redirectURI:t})=>A({code:r,redirectURI:e.redirectURI||t,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let t=r.idToken;if(!t)return P.error("No idToken found in token"),null;let o=(0,nt.decodeJwt)(t),i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...i},data:o}}}),"twitch");var at=require("@better-fetch/fetch");var dt=s(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(r){let t=r.scopes||["users.read","tweet.read","offline.access"];return e.scope&&t.push(...e.scope),R({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:t,state:r.state,codeVerifier:r.codeVerifier,redirectURI:r.redirectURI})},validateAuthorizationCode:s(async({code:r,codeVerifier:t,redirectURI:o})=>A({code:r,codeVerifier:t,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,at.betterFetch)("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(t);return{user:{id:t.data.id,name:t.data.name,email:t.data.username||null,image:t.data.profile_image_url,emailVerified:t.data.verified||!1,...i},data:t}}}),"twitter");var ct=require("@better-fetch/fetch");var lt=s(e=>{let r="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:s(async({state:t,scopes:o,codeVerifier:i,redirectURI:n})=>{let a=o||["account_info.read"];return e.scope&&a.push(...e.scope),await R({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:t,redirectURI:n,codeVerifier:i})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:t,codeVerifier:o,redirectURI:i})=>await A({code:t,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:o,error:i}=await(0,ct.betterFetch)("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${t.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...n},data:o}}}},"dropbox");var ut=require("@better-fetch/fetch");var pt=s(e=>{let r="https://www.linkedin.com/oauth/v2/authorization",t="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:s(async({state:o,scopes:i,redirectURI:n})=>{let a=i||["profile","email","openid"];return e.scope&&a.push(...e.scope),await R({id:"linkedin",options:e,authorizationEndpoint:r,scopes:a,state:o,redirectURI:n})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:o,redirectURI:i})=>await A({code:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(o){let{data:i,error:n}=await(0,ut.betterFetch)("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(n)return null;let a=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...a},data:i}}}},"linkedin");var mt=require("@better-fetch/fetch");var ke=s((e="")=>e.split("://").map(r=>r.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),er=s(e=>{let r=e||"https://gitlab.com";return{authorizationEndpoint:ke(`${r}/oauth/authorize`),tokenEndpoint:ke(`${r}/oauth/token`),userinfoEndpoint:ke(`${r}/api/v4/user`)}},"issuerToEndpoints"),ft=s(e=>{let{authorizationEndpoint:r,tokenEndpoint:t,userinfoEndpoint:o}=er(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:s(async({state:a,scopes:c,codeVerifier:d,redirectURI:l})=>{let u=c||["read_user"];return e.scope&&u.push(...e.scope),await R({id:i,options:e,authorizationEndpoint:r,scopes:u,state:a,redirectURI:l,codeVerifier:d})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:a,redirectURI:c,codeVerifier:d})=>A({code:a,redirectURI:e.redirectURI||c,options:e,codeVerifier:d,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:c,error:d}=await(0,mt.betterFetch)(o,{headers:{authorization:`Bearer ${a.accessToken}`}});if(d||c.state!=="active"||c.locked)return null;let l=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...l},data:c}}}},"gitlab");var Ue=require("@better-fetch/fetch");var gt=s(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:r,scopes:t,redirectURI:o}){let i=t||["identity"];return e.scope&&i.push(...e.scope),R({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:r,redirectURI:o,duration:e.duration})},validateAuthorizationCode:s(async({code:r,redirectURI:t})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:r,redirect_uri:e.redirectURI||t}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:a}=await(0,Ue.betterFetch)("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:o.toString()});if(a)throw a;return le(n)},"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,Ue.betterFetch)("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let i=await e.mapProfileToUser?.(t);return{user:{id:t.id,name:t.name,email:t.oauth_client_id,emailVerified:t.has_verified_email,image:t.icon_img?.split("?")[0],...i},data:t}}}),"reddit");var ht=require("zod"),tr={apple:qe,discord:He,facebook:Qe,github:We,microsoft:et,google:Je,spotify:rt,twitch:st,twitter:dt,dropbox:lt,linkedin:pt,gitlab:ft,reddit:gt},Ee=Object.keys(tr),wt=ht.z.enum(Ee,{description:"OAuth2 provider to use"});var v=require("zod");var Y=require("better-call");var N=require("better-call");var H=require("zod");function bt(e){try{return JSON.parse(e)}catch{return null}}s(bt,"safeJSONParse");var p={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var yt=require("@better-auth/utils/hmac"),At=require("@better-auth/utils/base64"),Rt=require("@better-auth/utils/binary");var kt=s(()=>f("/get-session",{method:"GET",query:H.z.optional(H.z.object({disableCookieCache:H.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(H.z.string().transform(e=>e==="true")).optional(),disableRefresh:H.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let r=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!r)return e.json(null);let t=e.getCookie(e.context.authCookies.sessionData.name),o=t?bt(Rt.binary.decode(At.base64.decode(t))):null;if(o&&!await(0,yt.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return D(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let u=o.session;if(o.expiresAt<Date.now()||u.session.expiresAt<new Date){let g=e.context.authCookies.sessionData.name;e.setCookie(g,"",{maxAge:0})}else return e.json(u)}let n=await e.context.internalAdapter.findSession(r);if(e.context.session=n,!n||n.session.expiresAt<new Date)return D(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(n);let a=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-a*1e3+c*1e3<=Date.now()){let u=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:q(e.context.sessionConfig.expiresIn,"sec")});if(!u)return D(e),e.json(null,{status:401});let h=(u.expiresAt.valueOf()-Date.now())/1e3;return await S(e,{session:u,user:n.user},!1,{maxAge:h}),e.json({session:u,user:n.user})}return await we(e,n),e.json(n)}catch(r){throw e.context.logger.error("INTERNAL_SERVER_ERROR",r),new N.APIError("INTERNAL_SERVER_ERROR",{message:p.FAILED_TO_GET_SESSION})}}),"getSession"),Q=s(async(e,r)=>{if(e.context.session)return e.context.session;let t=await kt()({...e,_flag:"json",headers:e.headers,query:r}).catch(o=>null);return e.context.session=t,t},"getSessionFromCtx"),x=ie(async e=>{let r=await Q(e);if(!r?.session)throw new N.APIError("UNAUTHORIZED");return{session:r}}),vn=ie(async e=>{let r=await Q(e);if(!r?.session)throw new N.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:r};let t=e.context.sessionConfig.freshAge,o=r.session.updatedAt?.valueOf()||r.session.createdAt.valueOf();if(!(Date.now()-o<t*1e3))throw new N.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:r}});var rr=f("/revoke-session",{method:"POST",body:H.z.object({token:H.z.string({description:"The token to revoke"})}),use:[x],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let r=e.body.token,t=await e.context.internalAdapter.findSession(r);if(!t)throw new N.APIError("BAD_REQUEST",{message:"Session not found"});if(t.session.userId!==e.context.session.user.id)throw new N.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(r)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new N.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),or=f("/revoke-sessions",{method:"POST",use:[x],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(r){throw e.context.logger.error(r&&typeof r=="object"&&"name"in r?r.name:"",r),new N.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),ir=f("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[x],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let r=e.context.session;if(!r.user)throw new N.APIError("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(r.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(i.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});var _t=require("jose");var Ut=require("jose");async function Et(e,r,t=3600){return await new Ut.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+t).sign(new TextEncoder().encode(r))}s(Et,"signJWT");async function V(e,r,t){return await Et({email:r.toLowerCase(),updateTo:t},e)}s(V,"createEmailVerificationToken");async function nr(e,r){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Y.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let t=await V(e.context.secret,r.email),o=`${e.context.baseURL}/verify-email?token=${t}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:r,url:o,token:t},e.request)}s(nr,"sendVerificationEmailFn");var sr=f("/send-verification-email",{method:"POST",query:v.z.object({currentURL:v.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:v.z.object({email:v.z.string({description:"The email to send the verification email to"}).email(),callbackURL:v.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Y.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:r}=e.body,t=await e.context.internalAdapter.findUserByEmail(r);if(!t)throw new Y.APIError("BAD_REQUEST",{message:p.USER_NOT_FOUND});return await nr(e,t.user),e.json({status:!0})}),ar=f("/verify-email",{method:"GET",query:v.z.object({token:v.z.string({description:"The token to verify the email"}),callbackURL:v.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function r(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new Y.APIError("UNAUTHORIZED",{message:c})}s(r,"redirectOnError");let{token:t}=e.query,o;try{o=await(0,_t.jwtVerify)(t,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),r("invalid_token")}let n=v.z.object({email:v.z.string().email(),updateTo:v.z.string().optional()}).parse(o.payload),a=await e.context.internalAdapter.findUserByEmail(n.email);if(!a)return r("user_not_found");if(n.updateTo){let c=await Q(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return r("unauthorized")}if(c.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return r("unauthorized")}let d=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),l=await V(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:d,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await Q(e)){let d=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!d)throw new Y.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await S(e,{session:d,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function X(e,{userInfo:r,account:t,callbackURL:o}){let i=await e.context.internalAdapter.findOAuthUser(r.email.toLowerCase(),t.accountId,t.providerId).catch(d=>{throw P.error(`Better auth was unable to query your database.
Error: `,d),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=i?.user,a=!n;if(i){let d=i.accounts.find(l=>l.providerId===t.providerId);if(d){let l=Object.fromEntries(Object.entries({accessToken:t.accessToken,idToken:t.idToken,refreshToken:t.refreshToken,accessTokenExpiresAt:t.accessTokenExpiresAt,refreshTokenExpiresAt:t.refreshTokenExpiresAt}).filter(([u,h])=>h!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(d.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(t.providerId)&&!r.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return he&&P.warn(`User already exist but account isn't linked to ${t.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:t.providerId,accountId:r.id.toString(),userId:i.user.id,accessToken:t.accessToken,idToken:t.idToken,refreshToken:t.refreshToken,accessTokenExpiresAt:t.accessTokenExpiresAt,refreshTokenExpiresAt:t.refreshTokenExpiresAt,scope:t.scope})}catch(h){return P.error("Unable to link account",h),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...r,email:r.email.toLowerCase(),id:void 0},{accessToken:t.accessToken,idToken:t.idToken,refreshToken:t.refreshToken,accessTokenExpiresAt:t.accessTokenExpiresAt,refreshTokenExpiresAt:t.refreshTokenExpiresAt,scope:t.scope,providerId:t.providerId,accountId:r.id.toString()}).then(d=>d?.user),!r.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let d=await V(e.context.secret,n.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:l,token:d},e.request)}}catch(d){return d instanceof _e.APIError?{error:d.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(n.id,e.request);return c?{data:{session:c,user:n},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}s(X,"handleOAuthUserInfo");var dr=f("/sign-in/social",{method:"POST",query:k.z.object({currentURL:k.z.string().optional()}).optional(),body:k.z.object({callbackURL:k.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:k.z.string().optional(),errorCallbackURL:k.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:wt,disableRedirect:k.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:k.z.optional(k.z.object({token:k.z.string({description:"ID token from the provider"}),nonce:k.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:k.z.string({description:"Access token from the provider"}).optional(),refreshToken:k.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:k.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let r=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!r)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new T.APIError("NOT_FOUND",{message:p.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!r.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new T.APIError("NOT_FOUND",{message:p.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:a}=e.body.idToken;if(!await r.verifyIdToken(n,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new T.APIError("UNAUTHORIZED",{message:p.INVALID_TOKEN});let d=await r.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!d||!d?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new T.APIError("UNAUTHORIZED",{message:p.FAILED_TO_GET_USER_INFO});if(!d.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new T.APIError("UNAUTHORIZED",{message:p.USER_EMAIL_NOT_FOUND});let l=await X(e,{userInfo:{email:d.user.email,id:d.user.id,name:d.user.name||"",image:d.user.image,emailVerified:d.user.emailVerified||!1},account:{providerId:r.id,accountId:d.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new T.APIError("UNAUTHORIZED",{message:l.error});return await S(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:t,state:o}=await K(e),i=await r.createAuthorizationURL({state:o,codeVerifier:t,redirectURI:`${e.context.baseURL}/callback/${r.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),cr=f("/sign-in/email",{method:"POST",body:k.z.object({email:k.z.string({description:"Email of the user"}),password:k.z.string({description:"Password of the user"}),callbackURL:k.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:k.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new T.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:r,password:t}=e.body;if(!k.z.string().email().safeParse(r).success)throw new T.APIError("BAD_REQUEST",{message:p.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(r,{includeAccounts:!0});if(!i)throw await e.context.password.hash(t),e.context.logger.error("User not found",{email:r}),new T.APIError("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});let n=i.accounts.find(l=>l.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:r}),new T.APIError("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});let a=n?.password;if(!a)throw e.context.logger.error("Password not found",{email:r}),new T.APIError("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:t}))throw e.context.logger.error("Invalid password"),new T.APIError("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new T.APIError("UNAUTHORIZED",{message:p.EMAIL_NOT_VERIFIED});let l=await V(e.context.secret,i.user.email),u=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:u,token:l},e.request),e.context.logger.error("Email not verified",{email:r}),new T.APIError("FORBIDDEN",{message:p.EMAIL_NOT_VERIFIED})}let d=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!d)throw e.context.logger.error("Failed to create session"),new T.APIError("UNAUTHORIZED",{message:p.FAILED_TO_CREATE_SESSION});return await S(e,{session:d,user:i.user},e.body.rememberMe===!1),e.json({user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var ee=require("zod");var pe=ee.z.object({code:ee.z.string().optional(),error:ee.z.string().optional(),error_description:ee.z.string().optional(),state:ee.z.string().optional()}),lr=f("/callback/:id",{method:["GET","POST"],body:pe.optional(),query:pe.optional(),metadata:J},async e=>{let r;try{if(e.method==="GET")r=pe.parse(e.query);else if(e.method==="POST")r=pe.parse(e.body);else throw new Error("Unsupported method")}catch(w){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",w),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:t,error:o,state:i,error_description:n}=r;if(!i)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!t)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${n}`);let a=e.context.socialProviders.find(w=>w.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:d,link:l,errorURL:u,newUserURL:h}=await ue(e),g;try{g=await a.validateAuthorizationCode({code:t,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(w){throw e.context.logger.error("",w),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let y=await a.getUserInfo(g).then(w=>w?.user);function b(w){let O=u||d||`${e.context.baseURL}/error`;throw O.includes("?")?O=`${O}&error=${w}`:O=`${O}?error=${w}`,e.redirect(O)}if(s(b,"redirectOnError"),!y)return e.context.logger.error("Unable to get user info"),b("unable_to_get_user_info");if(!y.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),b("email_not_found");if(!d)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==y.email.toLowerCase())return b("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:a.id,accountId:y.id}))return b("unable_to_link_account");let O;try{O=d.toString()}catch{O=d}throw e.redirect(O)}let E=await X(e,{userInfo:{...y,email:y.email,name:y.name||y.email},account:{providerId:a.id,accountId:y.id,...g,scope:g.scopes?.join(",")},callbackURL:d});if(E.error)return e.context.logger.error(E.error.split(" ").join("_")),b(E.error.split(" ").join("_"));let{session:B,user:M}=E.data;await S(e,{session:B,user:M});let $;try{$=(E.isRegister&&h||d).toString()}catch{$=E.isRegister&&h||d}throw e.redirect($)});var ds=require("zod");var Tt=require("better-call");var ur=f("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let r=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!r)throw D(e),new Tt.APIError("BAD_REQUEST",{message:p.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(r),D(e),e.json({success:!0})});var I=require("zod");var te=require("better-call");function Ot(e,r,t){let o=r?new URL(r,e.baseURL):new URL(`${e.baseURL}/error`);return t&&Object.entries(t).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}s(Ot,"redirectError");function pr(e,r,t){let o=new URL(r,e.baseURL);return t&&Object.entries(t).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}s(pr,"redirectCallback");var mr=f("/forget-password",{method:"POST",body:I.z.object({email:I.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:I.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new te.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:r,redirectTo:t}=e.body,o=await e.context.internalAdapter.findUserByEmail(r,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:r}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,n=q(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),a=it(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:n});let c=`${e.context.baseURL}/reset-password/${a}?callbackURL=${t}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:a},e.request),e.json({status:!0})}),fr=f("/reset-password/:token",{method:"GET",query:I.z.object({callbackURL:I.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:r}=e.params,{callbackURL:t}=e.query;if(!r||!t)throw e.redirect(Ot(e.context,t,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${r}`);throw!o||o.expiresAt<new Date?e.redirect(Ot(e.context,t,{error:"INVALID_TOKEN"})):e.redirect(pr(e.context,t,{token:r}))}),gr=f("/reset-password",{query:I.z.optional(I.z.object({token:I.z.string().optional(),currentURL:I.z.string().optional()})),method:"POST",body:I.z.object({newPassword:I.z.string({description:"The new password to set"}),token:I.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let r=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!r)throw new te.APIError("BAD_REQUEST",{message:p.INVALID_TOKEN});let{newPassword:t}=e.body,o=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(t.length<o)throw new te.APIError("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});if(t.length>i)throw new te.APIError("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let n=`reset-password:${r}`,a=await e.context.internalAdapter.findVerificationValue(n);if(!a||a.expiresAt<new Date)throw new te.APIError("BAD_REQUEST",{message:p.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let c=a.value,d=await e.context.password.hash(t);return(await e.context.internalAdapter.findAccounts(c)).find(h=>h.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,d),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:d,accountId:c}),e.json({status:!0}))});var _=require("zod");var U=require("better-call");var m=require("zod"),hr=require("better-call");var As=m.z.object({id:m.z.string(),providerId:m.z.string(),accountId:m.z.string(),userId:m.z.string(),accessToken:m.z.string().nullish(),refreshToken:m.z.string().nullish(),idToken:m.z.string().nullish(),accessTokenExpiresAt:m.z.date().nullish(),refreshTokenExpiresAt:m.z.date().nullish(),scope:m.z.string().nullish(),password:m.z.string().nullish(),createdAt:m.z.date().default(()=>new Date),updatedAt:m.z.date().default(()=>new Date)}),Rs=m.z.object({id:m.z.string(),email:m.z.string().transform(e=>e.toLowerCase()),emailVerified:m.z.boolean().default(!1),name:m.z.string(),image:m.z.string().nullish(),createdAt:m.z.date().default(()=>new Date),updatedAt:m.z.date().default(()=>new Date)}),ks=m.z.object({id:m.z.string(),userId:m.z.string(),expiresAt:m.z.date(),createdAt:m.z.date().default(()=>new Date),updatedAt:m.z.date().default(()=>new Date),token:m.z.string(),ipAddress:m.z.string().nullish(),userAgent:m.z.string().nullish()}),Us=m.z.object({id:m.z.string(),value:m.z.string(),createdAt:m.z.date().default(()=>new Date),updatedAt:m.z.date().default(()=>new Date),expiresAt:m.z.date(),identifier:m.z.string()});var br=f("/change-password",{method:"POST",body:_.z.object({newPassword:_.z.string({description:"The new password to set"}),currentPassword:_.z.string({description:"The current password"}),revokeOtherSessions:_.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[x],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:r,currentPassword:t,revokeOtherSessions:o}=e.body,i=e.context.session,n=e.context.password.config.minPasswordLength;if(r.length<n)throw e.context.logger.error("Password is too short"),new U.APIError("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(r.length>a)throw e.context.logger.error("Password is too long"),new U.APIError("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let d=(await e.context.internalAdapter.findAccounts(i.user.id)).find(g=>g.providerId==="credential"&&g.password);if(!d||!d.password)throw new U.APIError("BAD_REQUEST",{message:p.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(r);if(!await e.context.password.verify({hash:d.password,password:t}))throw new U.APIError("BAD_REQUEST",{message:p.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(d.id,{password:l});let h=null;if(o){await e.context.internalAdapter.deleteSessions(i.user.id);let g=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!g)throw new U.APIError("INTERNAL_SERVER_ERROR",{message:p.FAILED_TO_GET_SESSION});await S(e,{session:g,user:i.user}),h=g.token}return e.json({token:h})}),yr=f("/set-password",{method:"POST",body:_.z.object({newPassword:_.z.string()}),metadata:{SERVER_ONLY:!0},use:[x]},async e=>{let{newPassword:r}=e.body,t=e.context.session,o=e.context.password.config.minPasswordLength;if(r.length<o)throw e.context.logger.error("Password is too short"),new U.APIError("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(r.length>i)throw e.context.logger.error("Password is too long"),new U.APIError("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password),c=await e.context.password.hash(r);if(!a)return await e.context.internalAdapter.linkAccount({userId:t.user.id,providerId:"credential",accountId:t.user.id,password:c}),e.json({status:!0});throw new U.APIError("BAD_REQUEST",{message:"user already has a password"})}),Ar=f("/delete-user",{method:"POST",use:[x],body:_.z.object({callbackURL:_.z.string().optional(),password:_.z.string().optional(),token:_.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new U.APIError("NOT_FOUND");let r=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(r.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!n||!n.password)throw new U.APIError("BAD_REQUEST",{message:p.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new U.APIError("BAD_REQUEST",{message:p.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=r.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-i>n)throw new U.APIError("BAD_REQUEST",{message:p.SESSION_EXPIRED})}if(e.body.token)return await St({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=se(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:r.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:r.user,url:n,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let t=e.context.options.user.deleteUser?.beforeDelete;t&&await t(r.user,e.request),await e.context.internalAdapter.deleteUser(r.user.id),await e.context.internalAdapter.deleteSessions(r.user.id),await e.context.internalAdapter.deleteAccounts(r.user.id),D(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(r.user,e.request),e.json({success:!0,message:"User deleted"})}),St=f("/delete-user/callback",{method:"GET",query:_.z.object({token:_.z.string(),callbackURL:_.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new U.APIError("NOT_FOUND");let r=await Q(e);if(!r)throw new U.APIError("NOT_FOUND",{message:p.FAILED_TO_GET_USER_INFO});let t=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!t||t.expiresAt<new Date)throw t&&await e.context.internalAdapter.deleteVerificationValue(t.id),new U.APIError("NOT_FOUND",{message:p.INVALID_TOKEN});if(t.value!==r.user.id)throw new U.APIError("NOT_FOUND",{message:p.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(r.user,e.request),await e.context.internalAdapter.deleteUser(r.user.id),await e.context.internalAdapter.deleteSessions(r.user.id),await e.context.internalAdapter.deleteAccounts(r.user.id),await e.context.internalAdapter.deleteVerificationValue(t.id),D(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(r.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Rr=f("/change-email",{method:"POST",query:_.z.object({currentURL:_.z.string().optional()}).optional(),body:_.z.object({newEmail:_.z.string({description:"The new email to set"}).email(),callbackURL:_.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[x],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new U.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new U.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new U.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new U.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let t=await V(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${t}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:t},e.request),e.json({status:!0})});var kr=s((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),Ur=f("/error",{method:"GET",metadata:{...J,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let r=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(kr(r),{headers:{"Content-Type":"text/html"}})});var Er=f("/ok",{method:"GET",metadata:{...J,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var _r=require("zod");var Tr=require("better-call");var re=require("zod");var Te=require("better-call");var Or=f("/list-accounts",{method:"GET",use:[x],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let r=e.context.session,t=await e.context.internalAdapter.findAccounts(r.user.id);return e.json(t.map(o=>({id:o.id,provider:o.providerId})))}),Sr=f("/link-social",{method:"POST",requireHeaders:!0,query:re.z.object({currentURL:re.z.string().optional()}).optional(),body:re.z.object({callbackURL:re.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:re.z.enum(Ee,{description:"The OAuth2 provider to use"})}),use:[x],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let r=e.context.session;if((await e.context.internalAdapter.findAccounts(r.user.id)).find(c=>c.providerId===e.body.provider))throw new Te.APIError("BAD_REQUEST",{message:p.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Te.APIError("NOT_FOUND",{message:p.PROVIDER_NOT_FOUND});let n=await K(e,{userId:r.user.id,email:r.user.email}),a=await i.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:a.toString(),redirect:!0})});var Ma=require("defu");var _e=require("better-call");var vt=require("jose");async function It(e,r){if(e.idToken){let o=(0,vt.decodeJwt)(e.idToken);if(o&&o.sub&&o.email)return{id:o.sub,emailVerified:o.email_verified,image:o.picture,...o}}if(!r)return null;let t=await(0,ae.betterFetch)(r,{method:"GET",headers:{Authorization:`Bearer ${e.accessToken}`}});return{id:t.data?.sub,emailVerified:t.data?.email_verified,email:t.data?.email,image:t.data?.picture,name:t.data?.name,...t.data}}s(It,"getUserInfo");var Ir=s(e=>{let r={INVALID_OAUTH_CONFIGURATION:"Invalid OAuth configuration"};return{id:"generic-oauth",init:s(t=>({context:{socialProviders:e.config.map(i=>{let n=i.userInfoUrl;return{id:i.providerId,name:i.providerId,createAuthorizationURL(a){return R({id:i.providerId,options:{clientId:i.clientId,clientSecret:i.clientSecret,redirectURI:i.redirectURI},authorizationEndpoint:i.authorizationUrl,state:a.state,codeVerifier:i.pkce?a.codeVerifier:void 0,scopes:i.scopes||[],redirectURI:`${t.baseURL}/oauth2/callback/${i.providerId}`})},async validateAuthorizationCode(a){let c=i.tokenUrl;if(i.discoveryUrl){let d=await(0,ae.betterFetch)(i.discoveryUrl,{method:"GET"});d.data&&(c=d.data.token_endpoint,n=d.data.userinfo_endpoint)}if(!c)throw new W.APIError("BAD_REQUEST",{message:"Invalid OAuth configuration. Token URL not found."});return A({code:a.code,codeVerifier:a.codeVerifier,redirectURI:a.redirectURI,options:{clientId:i.clientId,clientSecret:i.clientSecret},tokenEndpoint:c})},async getUserInfo(a){if(!n)return null;let c=i.getUserInfo?await i.getUserInfo(a):await It(a,n);return c?{user:{id:c?.id,email:c?.email,emailVerified:c?.emailVerified,image:c?.image,name:c?.name,...i.mapProfileToUser?.(c)},data:c}:null}}}).concat(t.socialProviders)}}),"init"),endpoints:{signInWithOAuth2:f("/sign-in/oauth2",{method:"POST",query:L.z.object({currentURL:L.z.string({description:"Redirect to the current URL after sign in"}).optional()}).optional(),body:L.z.object({providerId:L.z.string({description:"The provider ID for the OAuth provider"}),callbackURL:L.z.string({description:"The URL to redirect to after sign in"}).optional(),errorCallbackURL:L.z.string({description:"The URL to redirect to if an error occurs"}).optional(),disableRedirect:L.z.boolean({description:"Disable redirect"}).optional()}),metadata:{openapi:{description:"Sign in with OAuth2",responses:{200:{description:"Sign in with OAuth2",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}}}}}}}}}},async t=>{let{providerId:o}=t.body,i=e.config.find(Z=>Z.providerId===o);if(!i)throw new W.APIError("BAD_REQUEST",{message:`No config found for provider ${o}`});let{discoveryUrl:n,authorizationUrl:a,tokenUrl:c,clientId:d,clientSecret:l,scopes:u,redirectURI:h,responseType:g,pkce:y,prompt:b,accessType:E}=i,B=a,M=c;if(n){let Z=await(0,ae.betterFetch)(n,{onError(Oe){t.context.logger.error(Oe.error.message,Oe.error,{discoveryUrl:n})}});Z.data&&(B=Z.data.authorization_endpoint,M=Z.data.token_endpoint)}if(!B||!M)throw new W.APIError("BAD_REQUEST",{message:r.INVALID_OAUTH_CONFIGURATION});let{state:$,codeVerifier:w}=await K(t),O=await R({id:o,options:{clientId:d,clientSecret:l,redirectURI:h},authorizationEndpoint:B,state:$,codeVerifier:y?w:void 0,scopes:u||[],redirectURI:`${t.context.baseURL}/oauth2/callback/${o}`});return g&&g!=="code"&&O.searchParams.set("response_type",g),b&&O.searchParams.set("prompt",b),E&&O.searchParams.set("access_type",E),t.json({url:O.toString(),redirect:!t.body.disableRedirect})}),oAuth2Callback:f("/oauth2/callback/:providerId",{method:"GET",query:L.z.object({code:L.z.string({description:"The OAuth2 code"}).optional(),error:L.z.string({description:"The error message, if any"}).optional(),state:L.z.string({description:"The state parameter from the OAuth2 request"}).optional()}),metadata:{openapi:{description:"OAuth2 callback",responses:{200:{description:"OAuth2 callback",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"}}}}}}}}}},async t=>{if(t.query.error||!t.query.code)throw t.redirect(`${t.context.options.baseURL}?error=${t.query.error||"oAuth_code_missing"}`);let o=e.config.find(w=>w.providerId===t.params.providerId);if(!o)throw new W.APIError("BAD_REQUEST",{message:`No config found for provider ${t.params.providerId}`});let i,n=await ue(t),{callbackURL:a,codeVerifier:c,errorURL:d}=n,l=t.query.code,u=o.tokenUrl,h=o.userInfoUrl;if(o.discoveryUrl){let w=await(0,ae.betterFetch)(o.discoveryUrl,{method:"GET"});w.data&&(u=w.data.token_endpoint,h=w.data.userinfo_endpoint)}try{if(!u)throw new W.APIError("BAD_REQUEST",{message:"Invalid OAuth configuration."});i=await A({code:l,codeVerifier:c,redirectURI:`${t.context.baseURL}/oauth2/callback/${o.providerId}`,options:{clientId:o.clientId,clientSecret:o.clientSecret},tokenEndpoint:u})}catch(w){throw t.context.logger.error(w&&typeof w=="object"&&"name"in w?w.name:"",w),t.redirect(`${d}?error=oauth_code_verification_failed`)}if(!i)throw new W.APIError("BAD_REQUEST",{message:"Invalid OAuth configuration."});let g=o.getUserInfo?await o.getUserInfo(i):await It(i,h);if(!g?.email)throw t.context.logger.error("Unable to get user info",g),t.redirect(`${t.context.baseURL}/error?error=email_is_missing`);let y=o.mapProfileToUser?await o.mapProfileToUser(g):null,b=await X(t,{userInfo:{...g,...y},account:{providerId:o.providerId,accountId:g.id,...i,scope:i.scopes?.join(",")}});function E(w){throw t.redirect(`${d||a||`${t.context.baseURL}/error`}?error=${w}`)}if(s(E,"redirectOnError"),b.error)return E(b.error.split(" ").join("_"));let{session:B,user:M}=b.data;await S(t,{session:B,user:M});let $;try{$=new URL(a).toString()}catch{$=a}throw t.redirect($)})},$ERROR_CODES:r}},"genericOAuth");0&&(module.exports={genericOAuth});
