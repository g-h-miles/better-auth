"use strict";var ue=Object.defineProperty;var vt=Object.getOwnPropertyDescriptor;var Lt=Object.getOwnPropertyNames;var Pt=Object.prototype.hasOwnProperty;var xt=(e,r)=>{for(var t in r)ue(e,t,{get:r[t],enumerable:!0})},Dt=(e,r,t,o)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of Lt(r))!Pt.call(e,i)&&i!==t&&ue(e,i,{get:()=>r[i],enumerable:!(o=vt(r,i))||o.enumerable});return e};var Ct=e=>Dt(ue({},"__esModule",{value:!0}),e);var Ir={};xt(Ir,{genericOAuth:()=>Sr});module.exports=Ct(Ir);var se=require("@better-fetch/fetch"),Q=require("better-call"),v=require("zod");var re=require("better-call");var Pe=require("better-call");var H=require("better-call"),Oe=(0,H.createMiddleware)(async()=>({})),oe=(0,H.createMiddlewareCreator)({use:[Oe,(0,H.createMiddleware)(async()=>({}))]}),m=(0,H.createEndpointCreator)({use:[Oe]});function pe(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function jt(e){let r="";for(let t=0;t<e.length;t++)r+=pe(e[t]);return r}function Se(e,r=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${Se(l,r)}$`).join("|")})`;let t="",o="",i=".";r===!0?(t="/",o="[/\\\\]",i="[^/\\\\]"):r&&(t=r,o=jt(t),o.length>1?(o=`(?:${o})`,i=`((?!${o}).)`):i=`[^${o}]`);let n=r?`${o}+?`:"",s=r?`${o}*?`:"",d=r?e.split(t):[e],a="";for(let c=0;c<d.length;c++){let l=d[c],g=d[c+1],f="";if(!(!l&&c>0)){if(r&&(c===d.length-1?f=s:g!=="**"?f=n:f=""),r&&l==="**"){f&&(a+=c===0?"":f,a+=`(?:${i}*?${f})*?`);continue}for(let b=0;b<l.length;b++){let w=l[b];w==="\\"?b<l.length-1&&(a+=pe(l[b+1]),b++):w==="?"?a+=i:w==="*"?a+=`${i}*?`:a+=pe(w)}a+=f}}return a}function Nt(e,r){if(typeof r!="string")throw new TypeError(`Sample must be a string, but ${typeof r} given`);return e.test(r)}function me(e,r){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof r=="string"||typeof r=="boolean")&&(r={separator:r}),arguments.length===2&&!(typeof r>"u"||typeof r=="object"&&r!==null&&!Array.isArray(r)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof r} given`);if(r=r||{},r.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let t=Se(e,r.separator),o=new RegExp(`^${t}$`,r.flags),i=Nt.bind(null,o);return i.options=r,i.pattern=e,i.regexp=o,i}var ae=Object.create(null),ie=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ae:globalThis),Ie=new Proxy(ae,{get(e,r){return ie()[r]??ae[r]},has(e,r){let t=ie();return r in t||r in ae},set(e,r,t){let o=ie(!0);return o[r]=t,!0},deleteProperty(e,r){if(!r)return!1;let t=ie(!0);return delete t[r],!0},ownKeys(){let e=ie(!0);return Object.keys(e)}});function $t(e){return e?e!=="false":!1}var fe=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var ge=fe==="dev"||fe==="development",Vt=fe==="test"||$t(Ie.TEST);var M=class extends Error{constructor(r,t){super(r),this.name="BetterAuthError",this.message=r,this.cause=t,this.stack=""}};function ve(e){try{return new URL(e).origin}catch{return null}}function Le(e){return e.includes("://")?new URL(e).host:e}var Bt=oe(async e=>{if(e.request?.method!=="POST")return;let{body:r,query:t,context:o}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",n=r?.callbackURL||t?.callbackURL,s=r?.redirectTo,d=t?.currentURL,a=r?.errorCallbackURL,c=r?.newUserCallbackURL,l=o.trustedOrigins,g=e.headers?.has("cookie"),f=(w,U)=>w.startsWith("/")?!1:U.includes("*")?me(U)(Le(w)):w.startsWith(U),b=(w,U)=>{if(!w)return;if(!l.some(B=>f(w,B)||w?.startsWith("/")&&U!=="origin"&&!w.includes(":")))throw e.context.logger.error(`Invalid ${U}: ${w}`),e.context.logger.info(`If it's a valid URL, please add ${w} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new Pe.APIError("FORBIDDEN",{message:`Invalid ${U}`})};g&&!e.context.options.advanced?.disableCSRFCheck&&b(i,"origin"),n&&b(n,"callbackURL"),s&&b(s,"redirectURL"),d&&b(d,"currentURL"),a&&b(a,"errorCallbackURL"),c&&b(s,"newUserCallbackURL")});var _=require("better-call"),R=require("zod");var z=(e,r="ms")=>new Date(Date.now()+(r==="sec"?e*1e3:e));var xe=require("@better-auth/utils/base64");var De=require("@better-auth/utils/hmac");async function he(e,r){if(e.context.options.session?.cookieCache?.enabled){let o=xe.base64Url.encode(JSON.stringify({session:r,expiresAt:z(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,De.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(r))}),{padding:!1});if(o.length>4093)throw new M("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function O(e,r,t,o){let i=e.context.authCookies.sessionToken.options,n=t?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,r.session.token,e.context.secret,{...i,maxAge:n,...o}),t&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await he(e,r),e.context.setNewSession(r),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(r.session.token,JSON.stringify({user:r.user,session:r.session}),Math.floor((new Date(r.session.expiresAt).getTime()-Date.now())/1e3))}function x(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var Be=require("@better-fetch/fetch"),Me=require("better-call"),q=require("jose");var Ce=require("@better-auth/utils/hash"),je=require("@better-auth/utils/base64");async function Ne(e){let r=await(0,Ce.createHash)("SHA-256").digest(e);return je.base64Url.encode(new Uint8Array(r),{padding:!1})}function de(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?z(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function A({id:e,options:r,authorizationEndpoint:t,state:o,codeVerifier:i,scopes:n,claims:s,redirectURI:d,duration:a}){let c=new URL(t);if(c.searchParams.set("response_type","code"),c.searchParams.set("client_id",r.clientId),c.searchParams.set("state",o),c.searchParams.set("scope",n.join(" ")),c.searchParams.set("redirect_uri",r.redirectURI||d),i){let l=await Ne(i);c.searchParams.set("code_challenge_method","S256"),c.searchParams.set("code_challenge",l)}if(s){let l=s.reduce((g,f)=>(g[f]=null,g),{});c.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return a&&c.searchParams.set("duration",a),c}var $e=require("@better-fetch/fetch");var Mt=require("jose");async function y({code:e,codeVerifier:r,redirectURI:t,options:o,tokenEndpoint:i,authentication:n}){let s=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(s.set("grant_type","authorization_code"),s.set("code",e),r&&s.set("code_verifier",r),s.set("redirect_uri",t),n==="basic"){let g=btoa(`${o.clientId}:${o.clientSecret}`);d.authorization=`Basic ${g}`}else s.set("client_id",o.clientId),s.set("client_secret",o.clientSecret);let{data:a,error:c}=await(0,$e.betterFetch)(i,{method:"POST",body:s,headers:d});if(c)throw c;return de(a)}var D=require("zod"),be=require("better-call");var Ht=require("@better-auth/utils/hash"),Gt=require("@noble/ciphers/chacha"),we=require("@noble/ciphers/utils"),Qt=require("@noble/ciphers/webcrypto");var zt=require("@noble/hashes/scrypt"),qt=require("uncrypto"),Ft=require("@better-auth/utils/hex");var Ve=require("@better-auth/utils/random"),ne=(0,Ve.createRandomStringGenerator)("a-z","0-9","A-Z","-_");async function Z(e,r){let t=e.body?.callbackURL||(e.query?.currentURL?ve(e.query?.currentURL):"")||e.context.options.baseURL;if(!t)throw new be.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=ne(128),i=ne(32),n=JSON.stringify({callbackURL:t,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:r,expiresAt:Date.now()+10*60*1e3}),s=new Date;s.setMinutes(s.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:n,identifier:i,expiresAt:s});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new be.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:o}}async function ce(e){let r=e.query.state||e.body.state,t=await e.context.internalAdapter.findVerificationValue(r);if(!t)throw e.context.logger.error("State Mismatch. Verification not found",{state:r}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=D.z.object({callbackURL:D.z.string(),codeVerifier:D.z.string(),errorURL:D.z.string().optional(),newUserURL:D.z.string().optional(),expiresAt:D.z.number(),link:D.z.object({email:D.z.string(),userId:D.z.string()}).optional()}).parse(JSON.parse(t.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(t.id),e.context.logger.error("State expired.",{state:r}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(t.id),o}var ze=e=>{let r="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:t,scopes:o,redirectURI:i}){let n=o||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${n.join(" ")}&state=${t}&response_mode=form_post`)},validateAuthorizationCode:async({code:t,codeVerifier:o,redirectURI:i})=>y({code:t,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),async verifyIdToken(t,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,o);let i=(0,q.decodeProtectedHeader)(t),{kid:n,alg:s}=i;if(!n||!s)return!1;let d=await Wt(n),{payload:a}=await(0,q.jwtVerify)(t,d,{algorithms:[s],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(c=>{a[c]!==void 0&&(a[c]=!!a[c])}),o&&a.nonce!==o?!1:!!a},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let o=(0,q.decodeJwt)(t.idToken);if(!o)return null;let i=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:i,emailVerified:!1,email:o.email,...n},data:o}}}},Wt=async e=>{let r="https://appleid.apple.com",t="/auth/keys",{data:o}=await(0,Be.betterFetch)(`${r}${t}`);if(!o?.keys)throw new Me.APIError("BAD_REQUEST",{message:"Keys not found"});let i=o.keys.find(n=>n.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await(0,q.importJWK)(i,i.alg)};var qe=require("@better-fetch/fetch");var Fe=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:r,scopes:t,redirectURI:o}){let i=t||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${r}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:r,redirectURI:t})=>y({code:r,redirectURI:e.redirectURI||t,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,qe.betterFetch)("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${r.accessToken}`}});if(o)return null;if(t.avatar===null){let n=t.discriminator==="0"?Number(BigInt(t.id)>>BigInt(22))%6:parseInt(t.discriminator)%5;t.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=t.avatar.startsWith("a_")?"gif":"png";t.image_url=`https://cdn.discordapp.com/avatars/${t.id}/${t.avatar}.${n}`}let i=await e.mapProfileToUser?.(t);return{user:{id:t.id,name:t.display_name||t.username||"",email:t.email,emailVerified:t.verified,image:t.image_url,...i},data:t}}});var He=require("@better-fetch/fetch");var Ge=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:r,scopes:t,redirectURI:o}){let i=t||["email","public_profile"];return e.scope&&i.push(...e.scope),await A({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:r,redirectURI:o})},validateAuthorizationCode:async({code:r,redirectURI:t})=>y({code:r,redirectURI:e.redirectURI||t,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,He.betterFetch)("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:r.accessToken}});if(o)return null;let i=await e.mapProfileToUser?.(t);return{user:{id:t.id,name:t.name,email:t.email,image:t.picture.data.url,emailVerified:t.email_verified,...i},data:t}}});var ye=require("@better-fetch/fetch");var Qe=e=>{let r="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:t,scopes:o,codeVerifier:i,redirectURI:n}){let s=o||["user:email"];return e.scope&&s.push(...e.scope),A({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:s,state:t,redirectURI:n})},validateAuthorizationCode:async({code:t,redirectURI:o})=>y({code:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:r}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:o,error:i}=await(0,ye.betterFetch)("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${t.accessToken}`}});if(i)return null;let n=!1,{data:s}=await(0,ye.betterFetch)("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});s&&(o.email=(s.find(a=>a.primary)??s[0])?.email,n=s.find(a=>a.email===o.email)?.verified??!1);let d=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:n,...d},data:o}}}};var Ae=["info","success","warn","error","debug"];function Zt(e,r){return Ae.indexOf(r)<=Ae.indexOf(e)}var C={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Kt={info:C.fg.blue,success:C.fg.green,warn:C.fg.yellow,error:C.fg.red,debug:C.fg.magenta},Jt=(e,r)=>{let t=new Date().toISOString();return`${C.dim}${t}${C.reset} ${Kt[e]}${e.toUpperCase()}${C.reset} ${C.bright}Better Auth${C.reset} ${r}`},Yt=e=>{let r=e?.disabled!==!0,t=e?.level??"error",o=(i,n,s=[])=>{if(!r||!Zt(t,i))return;let d=Jt(i,n);if(!e||typeof e.log!="function"){i==="error"?console.error(d,...s):i==="warn"?console.warn(d,...s):console.log(d,...s);return}e.log(i==="success"?"info":i,d,...s)};return Object.fromEntries(Ae.map(i=>[i,(...[n,...s])=>o(i,n,s)]))},L=Yt();var We=require("@better-fetch/fetch"),Ze=require("jose"),Ke=e=>({id:"google",name:"Google",async createAuthorizationURL({state:r,scopes:t,codeVerifier:o,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw L.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new M("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new M("codeVerifier is required for Google");let n=t||["email","profile","openid"];e.scope&&n.push(...e.scope);let s=await A({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:r,codeVerifier:o,redirectURI:i});return e.accessType&&s.searchParams.set("access_type",e.accessType),e.prompt&&s.searchParams.set("prompt",e.prompt),s},validateAuthorizationCode:async({code:r,codeVerifier:t,redirectURI:o})=>y({code:r,codeVerifier:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(r,t){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,t);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${r}`,{data:i}=await(0,We.betterFetch)(o);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let t=(0,Ze.decodeJwt)(r.idToken),o=await e.mapProfileToUser?.(t);return{user:{id:t.sub,name:t.name,email:t.email,image:t.picture,emailVerified:t.email_verified,...o},data:t}}});var Je=require("@better-fetch/fetch");var Ye=require("jose"),Xe=e=>{let r=e.tenantId||"common",t=`https://login.microsoftonline.com/${r}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${r}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let n=i.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),A({id:"microsoft",options:e,authorizationEndpoint:t,state:i.state,codeVerifier:i.codeVerifier,scopes:n,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:n,redirectURI:s}){return y({code:i,codeVerifier:n,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:o})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let n=(0,Ye.decodeJwt)(i.idToken),s=e.profilePhotoSize||48;await(0,Je.betterFetch)(`https://graph.microsoft.com/v1.0/me/photos/${s}x${s}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let l=await a.response.clone().arrayBuffer(),g=Buffer.from(l).toString("base64");n.picture=`data:image/jpeg;base64, ${g}`}catch(c){L.error(c&&typeof c=="object"&&"name"in c?c.name:"",c)}}});let d=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...d},data:n}}}};var et=require("@better-fetch/fetch");var tt=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:r,scopes:t,codeVerifier:o,redirectURI:i}){let n=t||["user-read-email"];return e.scope&&n.push(...e.scope),A({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:r,codeVerifier:o,redirectURI:i})},validateAuthorizationCode:async({code:r,codeVerifier:t,redirectURI:o})=>y({code:r,codeVerifier:t,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,et.betterFetch)("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(t);return{user:{id:t.id,name:t.display_name,email:t.email,image:t.images[0]?.url,emailVerified:!1,...i},data:t}}});var K={isAction:!1};var rt=require("@better-auth/utils/random"),ot=e=>(0,rt.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32);var it=require("jose"),nt=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:r,scopes:t,redirectURI:o}){let i=t||["user:read:email","openid"];return e.scope&&i.push(...e.scope),A({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:r,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:r,redirectURI:t})=>y({code:r,redirectURI:e.redirectURI||t,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let t=r.idToken;if(!t)return L.error("No idToken found in token"),null;let o=(0,it.decodeJwt)(t),i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...i},data:o}}});var st=require("@better-fetch/fetch");var at=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(r){let t=r.scopes||["users.read","tweet.read","offline.access"];return e.scope&&t.push(...e.scope),A({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:t,state:r.state,codeVerifier:r.codeVerifier,redirectURI:r.redirectURI})},validateAuthorizationCode:async({code:r,codeVerifier:t,redirectURI:o})=>y({code:r,codeVerifier:t,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,st.betterFetch)("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(t);return{user:{id:t.data.id,name:t.data.name,email:t.data.username||null,image:t.data.profile_image_url,emailVerified:t.data.verified||!1,...i},data:t}}});var dt=require("@better-fetch/fetch");var ct=e=>{let r="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:t,scopes:o,codeVerifier:i,redirectURI:n})=>{let s=o||["account_info.read"];return e.scope&&s.push(...e.scope),await A({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:s,state:t,redirectURI:n,codeVerifier:i})},validateAuthorizationCode:async({code:t,codeVerifier:o,redirectURI:i})=>await y({code:t,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:o,error:i}=await(0,dt.betterFetch)("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${t.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...n},data:o}}}};var lt=require("@better-fetch/fetch");var ut=e=>{let r="https://www.linkedin.com/oauth/v2/authorization",t="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:i,redirectURI:n})=>{let s=i||["profile","email","openid"];return e.scope&&s.push(...e.scope),await A({id:"linkedin",options:e,authorizationEndpoint:r,scopes:s,state:o,redirectURI:n})},validateAuthorizationCode:async({code:o,redirectURI:i})=>await y({code:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),async getUserInfo(o){let{data:i,error:n}=await(0,lt.betterFetch)("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(n)return null;let s=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...s},data:i}}}};var pt=require("@better-fetch/fetch");var Re=(e="")=>e.split("://").map(r=>r.replace(/\/{2,}/g,"/")).join("://"),Xt=e=>{let r=e||"https://gitlab.com";return{authorizationEndpoint:Re(`${r}/oauth/authorize`),tokenEndpoint:Re(`${r}/oauth/token`),userinfoEndpoint:Re(`${r}/api/v4/user`)}},mt=e=>{let{authorizationEndpoint:r,tokenEndpoint:t,userinfoEndpoint:o}=Xt(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:async({state:s,scopes:d,codeVerifier:a,redirectURI:c})=>{let l=d||["read_user"];return e.scope&&l.push(...e.scope),await A({id:i,options:e,authorizationEndpoint:r,scopes:l,state:s,redirectURI:c,codeVerifier:a})},validateAuthorizationCode:async({code:s,redirectURI:d,codeVerifier:a})=>y({code:s,redirectURI:e.redirectURI||d,options:e,codeVerifier:a,tokenEndpoint:t}),async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);let{data:d,error:a}=await(0,pt.betterFetch)(o,{headers:{authorization:`Bearer ${s.accessToken}`}});if(a||d.state!=="active"||d.locked)return null;let c=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...c},data:d}}}};var ke=require("@better-fetch/fetch");var ft=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:r,scopes:t,redirectURI:o}){let i=t||["identity"];return e.scope&&i.push(...e.scope),A({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:r,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:r,redirectURI:t})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:r,redirect_uri:e.redirectURI||t}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:s}=await(0,ke.betterFetch)("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:o.toString()});if(s)throw s;return de(n)},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:t,error:o}=await(0,ke.betterFetch)("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let i=await e.mapProfileToUser?.(t);return{user:{id:t.id,name:t.name,email:t.oauth_client_id,emailVerified:t.has_verified_email,image:t.icon_img?.split("?")[0],...i},data:t}}});var gt=require("zod"),er={apple:ze,discord:Fe,facebook:Ge,github:Qe,microsoft:Xe,google:Ke,spotify:tt,twitch:nt,twitter:at,dropbox:ct,linkedin:ut,gitlab:mt,reddit:ft},Ue=Object.keys(er),ht=gt.z.enum(Ue,{description:"OAuth2 provider to use"});var I=require("zod");var J=require("better-call");var j=require("better-call");var F=require("zod");function wt(e){try{return JSON.parse(e)}catch{return null}}var u={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var bt=require("@better-auth/utils/hmac"),yt=require("@better-auth/utils/base64"),At=require("@better-auth/utils/binary"),Rt=()=>m("/get-session",{method:"GET",query:F.z.optional(F.z.object({disableCookieCache:F.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(F.z.string().transform(e=>e==="true")).optional(),disableRefresh:F.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let r=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!r)return e.json(null);let t=e.getCookie(e.context.authCookies.sessionData.name),o=t?wt(At.binary.decode(yt.base64.decode(t))):null;if(o&&!await(0,bt.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return x(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=o.session;if(o.expiresAt<Date.now()||l.session.expiresAt<new Date){let f=e.context.authCookies.sessionData.name;e.setCookie(f,"",{maxAge:0})}else return e.json(l)}let n=await e.context.internalAdapter.findSession(r);if(e.context.session=n,!n||n.session.expiresAt<new Date)return x(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(n);let s=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-s*1e3+d*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:z(e.context.sessionConfig.expiresIn,"sec")});if(!l)return x(e),e.json(null,{status:401});let g=(l.expiresAt.valueOf()-Date.now())/1e3;return await O(e,{session:l,user:n.user},!1,{maxAge:g}),e.json({session:l,user:n.user})}return await he(e,n),e.json(n)}catch(r){throw e.context.logger.error("INTERNAL_SERVER_ERROR",r),new j.APIError("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION})}}),G=async(e,r)=>{if(e.context.session)return e.context.session;let t=await Rt()({...e,_flag:"json",headers:e.headers,query:r}).catch(o=>null);return e.context.session=t,t},P=oe(async e=>{let r=await G(e);if(!r?.session)throw new j.APIError("UNAUTHORIZED");return{session:r}}),Zi=oe(async e=>{let r=await G(e);if(!r?.session)throw new j.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:r};let t=e.context.sessionConfig.freshAge,o=r.session.updatedAt?.valueOf()||r.session.createdAt.valueOf();if(!(Date.now()-o<t*1e3))throw new j.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:r}});var tr=m("/revoke-session",{method:"POST",body:F.z.object({token:F.z.string({description:"The token to revoke"})}),use:[P],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let r=e.body.token,t=await e.context.internalAdapter.findSession(r);if(!t)throw new j.APIError("BAD_REQUEST",{message:"Session not found"});if(t.session.userId!==e.context.session.user.id)throw new j.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(r)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new j.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),rr=m("/revoke-sessions",{method:"POST",use:[P],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(r){throw e.context.logger.error(r&&typeof r=="object"&&"name"in r?r.name:"",r),new j.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),or=m("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[P],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let r=e.context.session;if(!r.user)throw new j.APIError("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(r.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(i.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});var Et=require("jose");var kt=require("jose");async function Ut(e,r,t=3600){return await new kt.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+t).sign(new TextEncoder().encode(r))}async function $(e,r,t){return await Ut({email:r.toLowerCase(),updateTo:t},e)}async function ir(e,r){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new J.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let t=await $(e.context.secret,r.email),o=`${e.context.baseURL}/verify-email?token=${t}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:r,url:o,token:t},e.request)}var nr=m("/send-verification-email",{method:"POST",query:I.z.object({currentURL:I.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:I.z.object({email:I.z.string({description:"The email to send the verification email to"}).email(),callbackURL:I.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new J.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:r}=e.body,t=await e.context.internalAdapter.findUserByEmail(r);if(!t)throw new J.APIError("BAD_REQUEST",{message:u.USER_NOT_FOUND});return await ir(e,t.user),e.json({status:!0})}),sr=m("/verify-email",{method:"GET",query:I.z.object({token:I.z.string({description:"The token to verify the email"}),callbackURL:I.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function r(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new J.APIError("UNAUTHORIZED",{message:d})}let{token:t}=e.query,o;try{o=await(0,Et.jwtVerify)(t,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return e.context.logger.error("Failed to verify email",d),r("invalid_token")}let n=I.z.object({email:I.z.string().email(),updateTo:I.z.string().optional()}).parse(o.payload),s=await e.context.internalAdapter.findUserByEmail(n.email);if(!s)return r("user_not_found");if(n.updateTo){let d=await G(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return r("unauthorized")}if(d.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return r("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),c=await $(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${c}`,token:c},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await G(e)){let a=await e.context.internalAdapter.createSession(s.user.id,e.request);if(!a)throw new J.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await O(e,{session:a,user:s.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function Y(e,{userInfo:r,account:t,callbackURL:o}){let i=await e.context.internalAdapter.findOAuthUser(r.email.toLowerCase(),t.accountId,t.providerId).catch(a=>{throw L.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=i?.user,s=!n;if(i){let a=i.accounts.find(c=>c.providerId===t.providerId);if(a){let c=Object.fromEntries(Object.entries({accessToken:t.accessToken,idToken:t.idToken,refreshToken:t.refreshToken,accessTokenExpiresAt:t.accessTokenExpiresAt,refreshTokenExpiresAt:t.refreshTokenExpiresAt}).filter(([l,g])=>g!==void 0));Object.keys(c).length>0&&await e.context.internalAdapter.updateAccount(a.id,c)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(t.providerId)&&!r.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return ge&&L.warn(`User already exist but account isn't linked to ${t.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:t.providerId,accountId:r.id.toString(),userId:i.user.id,accessToken:t.accessToken,idToken:t.idToken,refreshToken:t.refreshToken,accessTokenExpiresAt:t.accessTokenExpiresAt,refreshTokenExpiresAt:t.refreshTokenExpiresAt,scope:t.scope})}catch(g){return L.error("Unable to link account",g),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...r,email:r.email.toLowerCase(),id:void 0},{accessToken:t.accessToken,idToken:t.idToken,refreshToken:t.refreshToken,accessTokenExpiresAt:t.accessTokenExpiresAt,refreshTokenExpiresAt:t.refreshTokenExpiresAt,scope:t.scope,providerId:t.providerId,accountId:r.id.toString()}).then(a=>a?.user),!r.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let a=await $(e.context.secret,n.email),c=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:c,token:a},e.request)}}catch(a){return a instanceof Ee.APIError?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(n.id,e.request);return d?{data:{session:d,user:n},error:null,isRegister:s}:{error:"unable to create session",data:null,isRegister:!1}}var ar=m("/sign-in/social",{method:"POST",query:R.z.object({currentURL:R.z.string().optional()}).optional(),body:R.z.object({callbackURL:R.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:R.z.string().optional(),errorCallbackURL:R.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:ht,disableRedirect:R.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:R.z.optional(R.z.object({token:R.z.string({description:"ID token from the provider"}),nonce:R.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:R.z.string({description:"Access token from the provider"}).optional(),refreshToken:R.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:R.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let r=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!r)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new _.APIError("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!r.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new _.APIError("NOT_FOUND",{message:u.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:s}=e.body.idToken;if(!await r.verifyIdToken(n,s))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new _.APIError("UNAUTHORIZED",{message:u.INVALID_TOKEN});let a=await r.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new _.APIError("UNAUTHORIZED",{message:u.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new _.APIError("UNAUTHORIZED",{message:u.USER_EMAIL_NOT_FOUND});let c=await Y(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:r.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(c.error)throw new _.APIError("UNAUTHORIZED",{message:c.error});return await O(e,c.data),e.json({token:c.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:t,state:o}=await Z(e),i=await r.createAuthorizationURL({state:o,codeVerifier:t,redirectURI:`${e.context.baseURL}/callback/${r.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),dr=m("/sign-in/email",{method:"POST",body:R.z.object({email:R.z.string({description:"Email of the user"}),password:R.z.string({description:"Password of the user"}),callbackURL:R.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:R.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new _.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:r,password:t}=e.body;if(!R.z.string().email().safeParse(r).success)throw new _.APIError("BAD_REQUEST",{message:u.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(r,{includeAccounts:!0});if(!i)throw await e.context.password.hash(t),e.context.logger.error("User not found",{email:r}),new _.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let n=i.accounts.find(c=>c.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:r}),new _.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let s=n?.password;if(!s)throw e.context.logger.error("Password not found",{email:r}),new _.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:s,password:t}))throw e.context.logger.error("Invalid password"),new _.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new _.APIError("UNAUTHORIZED",{message:u.EMAIL_NOT_VERIFIED});let c=await $(e.context.secret,i.user.email),l=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:l,token:c},e.request),e.context.logger.error("Email not verified",{email:r}),new _.APIError("FORBIDDEN",{message:u.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new _.APIError("UNAUTHORIZED",{message:u.FAILED_TO_CREATE_SESSION});return await O(e,{session:a,user:i.user},e.body.rememberMe===!1),e.json({user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var X=require("zod");var le=X.z.object({code:X.z.string().optional(),error:X.z.string().optional(),error_description:X.z.string().optional(),state:X.z.string().optional()}),cr=m("/callback/:id",{method:["GET","POST"],body:le.optional(),query:le.optional(),metadata:K},async e=>{let r;try{if(e.method==="GET")r=le.parse(e.query);else if(e.method==="POST")r=le.parse(e.body);else throw new Error("Unsupported method")}catch(h){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",h),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:t,error:o,state:i,error_description:n}=r;if(!i)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!t)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${n}`);let s=e.context.socialProviders.find(h=>h.id===e.params.id);if(!s)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:a,link:c,errorURL:l,newUserURL:g}=await ce(e),f;try{f=await s.validateAuthorizationCode({code:t,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${s.id}`})}catch(h){throw e.context.logger.error("",h),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let b=await s.getUserInfo(f).then(h=>h?.user);function w(h){let T=l||a||`${e.context.baseURL}/error`;throw T.includes("?")?T=`${T}&error=${h}`:T=`${T}?error=${h}`,e.redirect(T)}if(!b)return e.context.logger.error("Unable to get user info"),w("unable_to_get_user_info");if(!b.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),w("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(c){if(c.email!==b.email.toLowerCase())return w("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:c.userId,providerId:s.id,accountId:b.id}))return w("unable_to_link_account");let T;try{T=a.toString()}catch{T=a}throw e.redirect(T)}let U=await Y(e,{userInfo:{...b,email:b.email,name:b.name||b.email},account:{providerId:s.id,accountId:b.id,...f,scope:f.scopes?.join(",")},callbackURL:a});if(U.error)return e.context.logger.error(U.error.split(" ").join("_")),w(U.error.split(" ").join("_"));let{session:V,user:B}=U.data;await O(e,{session:V,user:B});let N;try{N=(U.isRegister&&g||a).toString()}catch{N=U.isRegister&&g||a}throw e.redirect(N)});var Un=require("zod");var _t=require("better-call");var lr=m("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let r=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!r)throw x(e),new _t.APIError("BAD_REQUEST",{message:u.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(r),x(e),e.json({success:!0})});var S=require("zod");var ee=require("better-call");function Tt(e,r,t){let o=r?new URL(r,e.baseURL):new URL(`${e.baseURL}/error`);return t&&Object.entries(t).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}function ur(e,r,t){let o=new URL(r,e.baseURL);return t&&Object.entries(t).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}var pr=m("/forget-password",{method:"POST",body:S.z.object({email:S.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:S.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ee.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:r,redirectTo:t}=e.body,o=await e.context.internalAdapter.findUserByEmail(r,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:r}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,n=z(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),s=ot(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${s}`,expiresAt:n});let d=`${e.context.baseURL}/reset-password/${s}?callbackURL=${t}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:d,token:s},e.request),e.json({status:!0})}),mr=m("/reset-password/:token",{method:"GET",query:S.z.object({callbackURL:S.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:r}=e.params,{callbackURL:t}=e.query;if(!r||!t)throw e.redirect(Tt(e.context,t,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${r}`);throw!o||o.expiresAt<new Date?e.redirect(Tt(e.context,t,{error:"INVALID_TOKEN"})):e.redirect(ur(e.context,t,{token:r}))}),fr=m("/reset-password",{query:S.z.optional(S.z.object({token:S.z.string().optional(),currentURL:S.z.string().optional()})),method:"POST",body:S.z.object({newPassword:S.z.string({description:"The new password to set"}),token:S.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let r=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!r)throw new ee.APIError("BAD_REQUEST",{message:u.INVALID_TOKEN});let{newPassword:t}=e.body,o=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(t.length<o)throw new ee.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});if(t.length>i)throw new ee.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let n=`reset-password:${r}`,s=await e.context.internalAdapter.findVerificationValue(n);if(!s||s.expiresAt<new Date)throw new ee.APIError("BAD_REQUEST",{message:u.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(s.id);let d=s.value,a=await e.context.password.hash(t);return(await e.context.internalAdapter.findAccounts(d)).find(g=>g.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:a,accountId:d}),e.json({status:!0}))});var E=require("zod");var k=require("better-call");var p=require("zod"),gr=require("better-call"),Dn=p.z.object({id:p.z.string(),providerId:p.z.string(),accountId:p.z.string(),userId:p.z.string(),accessToken:p.z.string().nullish(),refreshToken:p.z.string().nullish(),idToken:p.z.string().nullish(),accessTokenExpiresAt:p.z.date().nullish(),refreshTokenExpiresAt:p.z.date().nullish(),scope:p.z.string().nullish(),password:p.z.string().nullish(),createdAt:p.z.date().default(()=>new Date),updatedAt:p.z.date().default(()=>new Date)}),Cn=p.z.object({id:p.z.string(),email:p.z.string().transform(e=>e.toLowerCase()),emailVerified:p.z.boolean().default(!1),name:p.z.string(),image:p.z.string().nullish(),createdAt:p.z.date().default(()=>new Date),updatedAt:p.z.date().default(()=>new Date)}),jn=p.z.object({id:p.z.string(),userId:p.z.string(),expiresAt:p.z.date(),createdAt:p.z.date().default(()=>new Date),updatedAt:p.z.date().default(()=>new Date),token:p.z.string(),ipAddress:p.z.string().nullish(),userAgent:p.z.string().nullish()}),Nn=p.z.object({id:p.z.string(),value:p.z.string(),createdAt:p.z.date().default(()=>new Date),updatedAt:p.z.date().default(()=>new Date),expiresAt:p.z.date(),identifier:p.z.string()});var wr=m("/change-password",{method:"POST",body:E.z.object({newPassword:E.z.string({description:"The new password to set"}),currentPassword:E.z.string({description:"The current password"}),revokeOtherSessions:E.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[P],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:r,currentPassword:t,revokeOtherSessions:o}=e.body,i=e.context.session,n=e.context.password.config.minPasswordLength;if(r.length<n)throw e.context.logger.error("Password is too short"),new k.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(r.length>s)throw e.context.logger.error("Password is too long"),new k.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(i.user.id)).find(f=>f.providerId==="credential"&&f.password);if(!a||!a.password)throw new k.APIError("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});let c=await e.context.password.hash(r);if(!await e.context.password.verify({hash:a.password,password:t}))throw new k.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:c});let g=null;if(o){await e.context.internalAdapter.deleteSessions(i.user.id);let f=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!f)throw new k.APIError("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION});await O(e,{session:f,user:i.user}),g=f.token}return e.json({token:g})}),br=m("/set-password",{method:"POST",body:E.z.object({newPassword:E.z.string()}),metadata:{SERVER_ONLY:!0},use:[P]},async e=>{let{newPassword:r}=e.body,t=e.context.session,o=e.context.password.config.minPasswordLength;if(r.length<o)throw e.context.logger.error("Password is too short"),new k.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(r.length>i)throw e.context.logger.error("Password is too long"),new k.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let s=(await e.context.internalAdapter.findAccounts(t.user.id)).find(a=>a.providerId==="credential"&&a.password),d=await e.context.password.hash(r);if(!s)return await e.context.internalAdapter.linkAccount({userId:t.user.id,providerId:"credential",accountId:t.user.id,password:d}),e.json({status:!0});throw new k.APIError("BAD_REQUEST",{message:"user already has a password"})}),yr=m("/delete-user",{method:"POST",use:[P],body:E.z.object({callbackURL:E.z.string().optional(),password:E.z.string().optional(),token:E.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new k.APIError("NOT_FOUND");let r=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(r.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!n||!n.password)throw new k.APIError("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new k.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=r.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-i>n)throw new k.APIError("BAD_REQUEST",{message:u.SESSION_EXPIRED})}if(e.body.token)return await Ot({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=ne(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:r.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:r.user,url:n,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let t=e.context.options.user.deleteUser?.beforeDelete;t&&await t(r.user,e.request),await e.context.internalAdapter.deleteUser(r.user.id),await e.context.internalAdapter.deleteSessions(r.user.id),await e.context.internalAdapter.deleteAccounts(r.user.id),x(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(r.user,e.request),e.json({success:!0,message:"User deleted"})}),Ot=m("/delete-user/callback",{method:"GET",query:E.z.object({token:E.z.string(),callbackURL:E.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new k.APIError("NOT_FOUND");let r=await G(e);if(!r)throw new k.APIError("NOT_FOUND",{message:u.FAILED_TO_GET_USER_INFO});let t=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!t||t.expiresAt<new Date)throw t&&await e.context.internalAdapter.deleteVerificationValue(t.id),new k.APIError("NOT_FOUND",{message:u.INVALID_TOKEN});if(t.value!==r.user.id)throw new k.APIError("NOT_FOUND",{message:u.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(r.user,e.request),await e.context.internalAdapter.deleteUser(r.user.id),await e.context.internalAdapter.deleteSessions(r.user.id),await e.context.internalAdapter.deleteAccounts(r.user.id),await e.context.internalAdapter.deleteVerificationValue(t.id),x(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(r.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Ar=m("/change-email",{method:"POST",query:E.z.object({currentURL:E.z.string().optional()}).optional(),body:E.z.object({newEmail:E.z.string({description:"The new email to set"}).email(),callbackURL:E.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[P],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new k.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new k.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new k.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new k.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let t=await $(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${t}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:t},e.request),e.json({status:!0})});var Rr=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,kr=m("/error",{method:"GET",metadata:{...K,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let r=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Rr(r),{headers:{"Content-Type":"text/html"}})});var Ur=m("/ok",{method:"GET",metadata:{...K,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var Er=require("zod");var _r=require("better-call");var te=require("zod");var _e=require("better-call");var Tr=m("/list-accounts",{method:"GET",use:[P],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let r=e.context.session,t=await e.context.internalAdapter.findAccounts(r.user.id);return e.json(t.map(o=>({id:o.id,provider:o.providerId})))}),Or=m("/link-social",{method:"POST",requireHeaders:!0,query:te.z.object({currentURL:te.z.string().optional()}).optional(),body:te.z.object({callbackURL:te.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:te.z.enum(Ue,{description:"The OAuth2 provider to use"})}),use:[P],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let r=e.context.session;if((await e.context.internalAdapter.findAccounts(r.user.id)).find(d=>d.providerId===e.body.provider))throw new _e.APIError("BAD_REQUEST",{message:u.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new _e.APIError("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});let n=await Z(e,{userId:r.user.id,email:r.user.email}),s=await i.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:s.toString(),redirect:!0})});var Zs=require("defu");var Ee=require("better-call");var It=require("jose");async function St(e,r){if(e.idToken){let o=(0,It.decodeJwt)(e.idToken);if(o&&o.sub&&o.email)return{id:o.sub,emailVerified:o.email_verified,image:o.picture,...o}}if(!r)return null;let t=await(0,se.betterFetch)(r,{method:"GET",headers:{Authorization:`Bearer ${e.accessToken}`}});return{id:t.data?.sub,emailVerified:t.data?.email_verified,email:t.data?.email,image:t.data?.picture,name:t.data?.name,...t.data}}var Sr=e=>{let r={INVALID_OAUTH_CONFIGURATION:"Invalid OAuth configuration"};return{id:"generic-oauth",init:t=>({context:{socialProviders:e.config.map(i=>{let n=i.userInfoUrl;return{id:i.providerId,name:i.providerId,createAuthorizationURL(s){return A({id:i.providerId,options:{clientId:i.clientId,clientSecret:i.clientSecret,redirectURI:i.redirectURI},authorizationEndpoint:i.authorizationUrl,state:s.state,codeVerifier:i.pkce?s.codeVerifier:void 0,scopes:i.scopes||[],redirectURI:`${t.baseURL}/oauth2/callback/${i.providerId}`})},async validateAuthorizationCode(s){let d=i.tokenUrl;if(i.discoveryUrl){let a=await(0,se.betterFetch)(i.discoveryUrl,{method:"GET"});a.data&&(d=a.data.token_endpoint,n=a.data.userinfo_endpoint)}if(!d)throw new Q.APIError("BAD_REQUEST",{message:"Invalid OAuth configuration. Token URL not found."});return y({code:s.code,codeVerifier:s.codeVerifier,redirectURI:s.redirectURI,options:{clientId:i.clientId,clientSecret:i.clientSecret},tokenEndpoint:d})},async getUserInfo(s){if(!n)return null;let d=i.getUserInfo?await i.getUserInfo(s):await St(s,n);return d?{user:{id:d?.id,email:d?.email,emailVerified:d?.emailVerified,image:d?.image,name:d?.name,...i.mapProfileToUser?.(d)},data:d}:null}}}).concat(t.socialProviders)}}),endpoints:{signInWithOAuth2:m("/sign-in/oauth2",{method:"POST",query:v.z.object({currentURL:v.z.string({description:"Redirect to the current URL after sign in"}).optional()}).optional(),body:v.z.object({providerId:v.z.string({description:"The provider ID for the OAuth provider"}),callbackURL:v.z.string({description:"The URL to redirect to after sign in"}).optional(),errorCallbackURL:v.z.string({description:"The URL to redirect to if an error occurs"}).optional(),disableRedirect:v.z.boolean({description:"Disable redirect"}).optional()}),metadata:{openapi:{description:"Sign in with OAuth2",responses:{200:{description:"Sign in with OAuth2",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}}}}}}}}}},async t=>{let{providerId:o}=t.body,i=e.config.find(W=>W.providerId===o);if(!i)throw new Q.APIError("BAD_REQUEST",{message:`No config found for provider ${o}`});let{discoveryUrl:n,authorizationUrl:s,tokenUrl:d,clientId:a,clientSecret:c,scopes:l,redirectURI:g,responseType:f,pkce:b,prompt:w,accessType:U}=i,V=s,B=d;if(n){let W=await(0,se.betterFetch)(n,{onError(Te){t.context.logger.error(Te.error.message,Te.error,{discoveryUrl:n})}});W.data&&(V=W.data.authorization_endpoint,B=W.data.token_endpoint)}if(!V||!B)throw new Q.APIError("BAD_REQUEST",{message:r.INVALID_OAUTH_CONFIGURATION});let{state:N,codeVerifier:h}=await Z(t),T=await A({id:o,options:{clientId:a,clientSecret:c,redirectURI:g},authorizationEndpoint:V,state:N,codeVerifier:b?h:void 0,scopes:l||[],redirectURI:`${t.context.baseURL}/oauth2/callback/${o}`});return f&&f!=="code"&&T.searchParams.set("response_type",f),w&&T.searchParams.set("prompt",w),U&&T.searchParams.set("access_type",U),t.json({url:T.toString(),redirect:!t.body.disableRedirect})}),oAuth2Callback:m("/oauth2/callback/:providerId",{method:"GET",query:v.z.object({code:v.z.string({description:"The OAuth2 code"}).optional(),error:v.z.string({description:"The error message, if any"}).optional(),state:v.z.string({description:"The state parameter from the OAuth2 request"}).optional()}),metadata:{openapi:{description:"OAuth2 callback",responses:{200:{description:"OAuth2 callback",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"}}}}}}}}}},async t=>{if(t.query.error||!t.query.code)throw t.redirect(`${t.context.options.baseURL}?error=${t.query.error||"oAuth_code_missing"}`);let o=e.config.find(h=>h.providerId===t.params.providerId);if(!o)throw new Q.APIError("BAD_REQUEST",{message:`No config found for provider ${t.params.providerId}`});let i,n=await ce(t),{callbackURL:s,codeVerifier:d,errorURL:a}=n,c=t.query.code,l=o.tokenUrl,g=o.userInfoUrl;if(o.discoveryUrl){let h=await(0,se.betterFetch)(o.discoveryUrl,{method:"GET"});h.data&&(l=h.data.token_endpoint,g=h.data.userinfo_endpoint)}try{if(!l)throw new Q.APIError("BAD_REQUEST",{message:"Invalid OAuth configuration."});i=await y({code:c,codeVerifier:d,redirectURI:`${t.context.baseURL}/oauth2/callback/${o.providerId}`,options:{clientId:o.clientId,clientSecret:o.clientSecret},tokenEndpoint:l})}catch(h){throw t.context.logger.error(h&&typeof h=="object"&&"name"in h?h.name:"",h),t.redirect(`${a}?error=oauth_code_verification_failed`)}if(!i)throw new Q.APIError("BAD_REQUEST",{message:"Invalid OAuth configuration."});let f=o.getUserInfo?await o.getUserInfo(i):await St(i,g);if(!f?.email)throw t.context.logger.error("Unable to get user info",f),t.redirect(`${t.context.baseURL}/error?error=email_is_missing`);let b=o.mapProfileToUser?await o.mapProfileToUser(f):null,w=await Y(t,{userInfo:{...f,...b},account:{providerId:o.providerId,accountId:f.id,...i,scope:i.scopes?.join(",")}});function U(h){throw t.redirect(`${a||s||`${t.context.baseURL}/error`}?error=${h}`)}if(w.error)return U(w.error.split(" ").join("_"));let{session:V,user:B}=w.data;await O(t,{session:V,user:B});let N;try{N=new URL(s).toString()}catch{N=s}throw t.redirect(N)})},$ERROR_CODES:r}};0&&(module.exports={genericOAuth});
