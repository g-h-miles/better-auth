var Qe=Object.defineProperty;var a=(e,t)=>Qe(e,"name",{value:t,configurable:!0});import{z as m}from"zod";import{APIError as Bd,createRouter as $d,getCookie as Vd,getSignedCookie as Md,setCookie as qd,setSignedCookie as zd}from"better-call";import{APIError as tt}from"better-call";import{createEndpointCreator as Ze,createMiddleware as fe,createMiddlewareCreator as Ke}from"better-call";var ge=fe(async()=>({})),q=Ke({use:[ge,fe(async()=>({}))]}),u=Ze({use:[ge]});function ne(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}a(ne,"escapeRegExpChar");function Je(e){let t="";for(let r=0;r<e.length;r++)t+=ne(e[r]);return t}a(Je,"escapeRegExpString");function he(e,t=!0){if(Array.isArray(e))return`(?:${e.map(f=>`^${he(f,t)}$`).join("|")})`;let r="",s="",o=".";t===!0?(r="/",s="[/\\\\]",o="[^/\\\\]"):t&&(r=t,s=Je(r),s.length>1?(s=`(?:${s})`,o=`((?!${s}).)`):o=`[^${s}]`);let n=t?`${s}+?`:"",i=t?`${s}*?`:"",c=t?e.split(r):[e],d="";for(let l=0;l<c.length;l++){let f=c[l],h=c[l+1],w="";if(!(!f&&l>0)){if(t&&(l===c.length-1?w=i:h!=="**"?w=n:w=""),t&&f==="**"){w&&(d+=l===0?"":w,d+=`(?:${o}*?${w})*?`);continue}for(let b=0;b<f.length;b++){let R=f[b];R==="\\"?b<f.length-1&&(d+=ne(f[b+1]),b++):R==="?"?d+=o:R==="*"?d+=`${o}*?`:d+=ne(R)}d+=w}}return d}a(he,"transform");function Ye(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}a(Ye,"isMatch");function ie(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=he(e,t.separator),s=new RegExp(`^${r}$`,t.flags),o=Ye.bind(null,s);return o.options=t,o.pattern=e,o.regexp=s,o}a(ie,"wildcardMatch");var Y=Object.create(null),G=a(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?Y:globalThis),"_getEnv"),we=new Proxy(Y,{get(e,t){return G()[t]??Y[t]},has(e,t){let r=G();return t in r||t in Y},set(e,t,r){let s=G(!0);return s[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=G(!0);return delete r[t],!0},ownKeys(){let e=G(!0);return Object.keys(e)}});function Xe(e){return e?e!=="false":!1}a(Xe,"toBoolean");var ae=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var de=ae==="dev"||ae==="development",et=ae==="test"||Xe(we.TEST);var z=class extends Error{static{a(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function ye(e){try{return new URL(e).origin}catch{return null}}a(ye,"getOrigin");function be(e){return e.includes("://")?new URL(e).host:e}a(be,"getHost");var rt=q(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:s}=e,o=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,i=t?.redirectTo,c=r?.currentURL,d=t?.errorCallbackURL,l=t?.newUserCallbackURL,f=s.trustedOrigins,h=e.headers?.has("cookie"),w=a((R,O)=>R.startsWith("/")?!1:O.includes("*")?ie(O)(be(R)):R.startsWith(O),"matchesPattern"),b=a((R,O)=>{if(!R)return;if(!f.some(oe=>w(R,oe)||R?.startsWith("/")&&O!=="origin"&&!R.includes(":")))throw e.context.logger.error(`Invalid ${O}: ${R}`),e.context.logger.info(`If it's a valid URL, please add ${R} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${f}`),new tt("FORBIDDEN",{message:`Invalid ${O}`})},"validateURL");h&&!e.context.options.advanced?.disableCSRFCheck&&b(o,"origin"),n&&b(n,"callbackURL"),i&&b(i,"redirectURL"),c&&b(c,"currentURL"),d&&b(d,"errorCallbackURL"),l&&b(i,"newUserCallbackURL")});import{APIError as S}from"better-call";import{z as E}from"zod";var I=a((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");import{base64Url as ot}from"@better-auth/utils/base64";import{createHMAC as st}from"@better-auth/utils/hmac";async function ce(e,t){if(e.context.options.session?.cookieCache?.enabled){let s=ot.encode(JSON.stringify({session:t,expiresAt:I(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await st("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(s.length>4093)throw new z("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,s,e.context.authCookies.sessionData.options)}}a(ce,"setCookieCache");async function T(e,t,r,s){let o=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...o,maxAge:n,...s}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await ce(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}a(T,"setSessionCookie");function L(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}a(L,"deleteSessionCookie");import{betterFetch as ct}from"@better-fetch/fetch";import{APIError as lt}from"better-call";import{decodeJwt as ut,decodeProtectedHeader as pt,importJWK as mt,jwtVerify as ft}from"jose";import{createHash as nt}from"@better-auth/utils/hash";import{base64Url as it}from"@better-auth/utils/base64";async function Ae(e){let t=await nt("SHA-256").digest(e);return it.encode(new Uint8Array(t),{padding:!1})}a(Ae,"generateCodeChallenge");function X(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?I(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}a(X,"getOAuth2Tokens");async function A({id:e,options:t,authorizationEndpoint:r,state:s,codeVerifier:o,scopes:n,claims:i,redirectURI:c,duration:d}){let l=new URL(r);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",t.clientId),l.searchParams.set("state",s),l.searchParams.set("scope",n.join(" ")),l.searchParams.set("redirect_uri",t.redirectURI||c),o){let f=await Ae(o);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",f)}if(i){let f=i.reduce((h,w)=>(h[w]=null,h),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...f}}))}return d&&l.searchParams.set("duration",d),l}a(A,"createAuthorizationURL");import{betterFetch as at}from"@better-fetch/fetch";import{jwtVerify as uo}from"jose";async function y({code:e,codeVerifier:t,redirectURI:r,options:s,tokenEndpoint:o,authentication:n}){let i=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(i.set("grant_type","authorization_code"),i.set("code",e),t&&i.set("code_verifier",t),i.set("redirect_uri",r),n==="basic"){let h=btoa(`${s.clientId}:${s.clientSecret}`);c.authorization=`Basic ${h}`}else i.set("client_id",s.clientId),i.set("client_secret",s.clientSecret);let{data:d,error:l}=await at(o,{method:"POST",body:i,headers:c});if(l)throw l;return X(d)}a(y,"validateAuthorizationCode");import{z as $}from"zod";import{APIError as Re}from"better-call";import{createHash as Io}from"@better-auth/utils/hash";import{xchacha20poly1305 as Lo}from"@noble/ciphers/chacha";import{bytesToHex as xo,hexToBytes as Do,utf8ToBytes as Co}from"@noble/ciphers/utils";import{managedNonce as No}from"@noble/ciphers/webcrypto";import{scryptAsync as bo}from"@noble/hashes/scrypt";import{getRandomValues as Ro}from"uncrypto";import{hex as Uo}from"@better-auth/utils/hex";import{createRandomStringGenerator as dt}from"@better-auth/utils/random";var W=dt("a-z","0-9","A-Z","-_");async function ee(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?ye(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Re("BAD_REQUEST",{message:"callbackURL is required"});let s=W(128),o=W(32),n=JSON.stringify({callbackURL:r,codeVerifier:s,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),i=new Date;i.setMinutes(i.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:n,identifier:o,expiresAt:i});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Re("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:s}}a(ee,"generateState");async function Ee(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let s=$.object({callbackURL:$.string(),codeVerifier:$.string(),errorURL:$.string().optional(),newUserURL:$.string().optional(),expiresAt:$.number(),link:$.object({email:$.string(),userId:$.string()}).optional()}).parse(JSON.parse(r.value));if(s.errorURL||(s.errorURL=`${e.context.baseURL}/error`),s.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),s}a(Ee,"parseState");var Ue=a(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:s,redirectURI:o}){let n=s||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||o}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:a(async({code:r,codeVerifier:s,redirectURI:o})=>y({code:r,codeVerifier:s,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,s){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,s);let o=pt(r),{kid:n,alg:i}=o;if(!n||!i)return!1;let c=await gt(n),{payload:d}=await ft(r,c,{algorithms:[i],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{d[l]!==void 0&&(d[l]=!!d[l])}),s&&d.nonce!==s?!1:!!d},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let s=ut(r.idToken);if(!s)return null;let o=s.user?`${s.user.name.firstName} ${s.user.name.lastName}`:s.email,n=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:o,emailVerified:!1,email:s.email,...n},data:s}}}},"apple"),gt=a(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:s}=await ct(`${t}${r}`);if(!s?.keys)throw new lt("BAD_REQUEST",{message:"Keys not found"});let o=s.keys.find(n=>n.kid===e);if(!o)throw new Error(`JWK with kid ${e} not found`);return await mt(o,o.alg)},"getApplePublicKey");import{betterFetch as ht}from"@better-fetch/fetch";var ke=a(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:s}){let o=r||["identify","email"];return e.scope&&o.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${o.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||s)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>y({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:s}=await ht("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(s)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...o},data:r}}}),"discord");import{betterFetch as wt}from"@better-fetch/fetch";var Te=a(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:s}){let o=r||["email","public_profile"];return e.scope&&o.push(...e.scope),await A({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:o,state:t,redirectURI:s})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>y({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:s}=await wt("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(s)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...o},data:r}}}),"facebook");import{betterFetch as _e}from"@better-fetch/fetch";var Se=a(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:s,codeVerifier:o,redirectURI:n}){let i=s||["user:email"];return e.scope&&i.push(...e.scope),A({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:i,state:r,redirectURI:n})},validateAuthorizationCode:a(async({code:r,redirectURI:s})=>y({code:r,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:s,error:o}=await _e("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(o)return null;let n=!1,{data:i}=await _e("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});i&&(s.email=(i.find(d=>d.primary)??i[0])?.email,n=i.find(d=>d.email===s.email)?.verified??!1);let c=await e.mapProfileToUser?.(s);return{user:{id:s.id.toString(),name:s.name||s.login,email:s.email,image:s.avatar_url,emailVerified:n,...c},data:s}}}},"github");var le=["info","success","warn","error","debug"];function yt(e,t){return le.indexOf(t)<=le.indexOf(e)}a(yt,"shouldPublishLog");var N={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},bt={info:N.fg.blue,success:N.fg.green,warn:N.fg.yellow,error:N.fg.red,debug:N.fg.magenta},At=a((e,t)=>{let r=new Date().toISOString();return`${N.dim}${r}${N.reset} ${bt[e]}${e.toUpperCase()}${N.reset} ${N.bright}Better Auth${N.reset} ${t}`},"formatMessage"),Rt=a(e=>{let t=e?.disabled!==!0,r=e?.level??"error",s=a((o,n,i=[])=>{if(!t||!yt(r,o))return;let c=At(o,n);if(!e||typeof e.log!="function"){o==="error"?console.error(c,...i):o==="warn"?console.warn(c,...i):console.log(c,...i);return}e.log(o==="success"?"info":o,c,...i)},"LogFunc");return Object.fromEntries(le.map(o=>[o,(...[n,...i])=>s(o,n,i)]))},"createLogger"),x=Rt();import{betterFetch as Et}from"@better-fetch/fetch";import{decodeJwt as Ut}from"jose";var Oe=a(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:s,redirectURI:o}){if(!e.clientId||!e.clientSecret)throw x.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new z("CLIENT_ID_AND_SECRET_REQUIRED");if(!s)throw new z("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let i=await A({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:s,redirectURI:o});return e.accessType&&i.searchParams.set("access_type",e.accessType),e.prompt&&i.searchParams.set("prompt",e.prompt),i},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:s})=>y({code:t,codeVerifier:r,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let s=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:o}=await Et(s);return o?o.aud===e.clientId&&o.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=Ut(t.idToken),s=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...s},data:r}}}),"google");import{betterFetch as kt}from"@better-fetch/fetch";import{decodeJwt as Tt}from"jose";var Ie=a(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,s=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(o){let n=o.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),A({id:"microsoft",options:e,authorizationEndpoint:r,state:o.state,codeVerifier:o.codeVerifier,scopes:n,redirectURI:o.redirectURI})},validateAuthorizationCode({code:o,codeVerifier:n,redirectURI:i}){return y({code:o,codeVerifier:n,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:s})},async getUserInfo(o){if(e.getUserInfo)return e.getUserInfo(o);if(!o.idToken)return null;let n=Tt(o.idToken),i=e.profilePhotoSize||48;await kt(`https://graph.microsoft.com/v1.0/me/photos/${i}x${i}/$value`,{headers:{Authorization:`Bearer ${o.accessToken}`},async onResponse(d){if(!(e.disableProfilePhoto||!d.response.ok))try{let f=await d.response.clone().arrayBuffer(),h=Buffer.from(f).toString("base64");n.picture=`data:image/jpeg;base64, ${h}`}catch(l){x.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let c=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...c},data:n}}}},"microsoft");import{betterFetch as _t}from"@better-fetch/fetch";var ve=a(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:s,redirectURI:o}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),A({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:s,redirectURI:o})},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:s})=>y({code:t,codeVerifier:r,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:s}=await _t("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(s)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...o},data:r}}}),"spotify");var H={isAction:!1};import{createRandomStringGenerator as St}from"@better-auth/utils/random";var Le=a(e=>St("a-z","A-Z","0-9")(e||32),"generateId");import{decodeJwt as Ot}from"jose";var Pe=a(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:s}){let o=r||["user:read:email","openid"];return e.scope&&o.push(...e.scope),A({id:"twitch",redirectURI:s,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:o,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>y({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return x.error("No idToken found in token"),null;let s=Ot(r),o=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:s.preferred_username,email:s.email,image:s.picture,emailVerified:!1,...o},data:s}}}),"twitch");import{betterFetch as It}from"@better-fetch/fetch";var xe=a(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),A({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:s})=>y({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||s,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:s}=await It("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(s)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...o},data:r}}}),"twitter");import{betterFetch as vt}from"@better-fetch/fetch";var De=a(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:a(async({state:r,scopes:s,codeVerifier:o,redirectURI:n})=>{let i=s||["account_info.read"];return e.scope&&i.push(...e.scope),await A({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:i,state:r,redirectURI:n,codeVerifier:o})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:r,codeVerifier:s,redirectURI:o})=>await y({code:r,codeVerifier:s,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:s,error:o}=await vt("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(s);return{user:{id:s.account_id,name:s.name?.display_name,email:s.email,emailVerified:s.email_verified||!1,image:s.profile_photo_url,...n},data:s}}}},"dropbox");import{betterFetch as Lt}from"@better-fetch/fetch";var Ce=a(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:a(async({state:s,scopes:o,redirectURI:n})=>{let i=o||["profile","email","openid"];return e.scope&&i.push(...e.scope),await A({id:"linkedin",options:e,authorizationEndpoint:t,scopes:i,state:s,redirectURI:n})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:s,redirectURI:o})=>await y({code:s,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(s){let{data:o,error:n}=await Lt("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${s.accessToken}`}});if(n)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.name,email:o.email,emailVerified:o.email_verified||!1,image:o.picture,...i},data:o}}}},"linkedin");import{betterFetch as Pt}from"@better-fetch/fetch";var ue=a((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),xt=a(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:ue(`${t}/oauth/authorize`),tokenEndpoint:ue(`${t}/oauth/token`),userinfoEndpoint:ue(`${t}/api/v4/user`)}},"issuerToEndpoints"),je=a(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:s}=xt(e.issuer),o="gitlab";return{id:o,name:"Gitlab",createAuthorizationURL:a(async({state:i,scopes:c,codeVerifier:d,redirectURI:l})=>{let f=c||["read_user"];return e.scope&&f.push(...e.scope),await A({id:o,options:e,authorizationEndpoint:t,scopes:f,state:i,redirectURI:l,codeVerifier:d})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:i,redirectURI:c,codeVerifier:d})=>y({code:i,redirectURI:e.redirectURI||c,options:e,codeVerifier:d,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);let{data:c,error:d}=await Pt(s,{headers:{authorization:`Bearer ${i.accessToken}`}});if(d||c.state!=="active"||c.locked)return null;let l=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...l},data:c}}}},"gitlab");import{betterFetch as Ne}from"@better-fetch/fetch";var Be=a(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:s}){let o=r||["identity"];return e.scope&&o.push(...e.scope),A({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:o,state:t,redirectURI:s,duration:e.duration})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>{let s=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),o={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:i}=await Ne("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:o,body:s.toString()});if(i)throw i;return X(n)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:s}=await Ne("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(s)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...o},data:r}}}),"reddit");import{z as Dt}from"zod";var Ct={apple:Ue,discord:ke,facebook:Te,github:Se,microsoft:Ie,google:Oe,spotify:ve,twitch:Pe,twitter:xe,dropbox:De,linkedin:Ce,gitlab:je,reddit:Be},pe=Object.keys(Ct),$e=Dt.enum(pe,{description:"OAuth2 provider to use"});import{z as C}from"zod";import{APIError as Q}from"better-call";import{APIError as V}from"better-call";import{z as F}from"zod";function Ve(e){try{return JSON.parse(e)}catch{return null}}a(Ve,"safeJSONParse");var p={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as jt}from"@better-auth/utils/hmac";import{base64 as Nt}from"@better-auth/utils/base64";import{binary as Bt}from"@better-auth/utils/binary";var Me=a(()=>u("/get-session",{method:"GET",query:F.optional(F.object({disableCookieCache:F.boolean({description:"Disable cookie cache and fetch session from database"}).or(F.string().transform(e=>e==="true")).optional(),disableRefresh:F.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),s=r?Ve(Bt.decode(Nt.decode(r))):null;if(s&&!await jt("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(s.session),s.signature))return L(e),e.json(null);let o=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(s?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let f=s.session;if(s.expiresAt<Date.now()||f.session.expiresAt<new Date){let w=e.context.authCookies.sessionData.name;e.setCookie(w,"",{maxAge:0})}else return e.json(f)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return L(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(o||e.query?.disableRefresh)return e.json(n);let i=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-i*1e3+c*1e3<=Date.now()){let f=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:I(e.context.sessionConfig.expiresIn,"sec")});if(!f)return L(e),e.json(null,{status:401});let h=(f.expiresAt.valueOf()-Date.now())/1e3;return await T(e,{session:f,user:n.user},!1,{maxAge:h}),e.json({session:f,user:n.user})}return await ce(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new V("INTERNAL_SERVER_ERROR",{message:p.FAILED_TO_GET_SESSION})}}),"getSession"),B=a(async(e,t)=>{if(e.context.session)return e.context.session;let r=await Me()({...e,_flag:"json",headers:e.headers,query:t}).catch(s=>null);return e.context.session=r,r},"getSessionFromCtx"),D=q(async e=>{let t=await B(e);if(!t?.session)throw new V("UNAUTHORIZED");return{session:t}}),pi=q(async e=>{let t=await B(e);if(!t?.session)throw new V("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,s=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-s<r*1e3))throw new V("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var $t=u("/revoke-session",{method:"POST",body:F.object({token:F.string({description:"The token to revoke"})}),use:[D],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new V("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new V("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(s){throw e.context.logger.error(s&&typeof s=="object"&&"name"in s?s.name:"",s),new V("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Vt=u("/revoke-sessions",{method:"POST",use:[D],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new V("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Mt=u("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[D],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new V("UNAUTHORIZED");let o=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(o.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});import{jwtVerify as zt}from"jose";import{SignJWT as qt}from"jose";async function qe(e,t,r=3600){return await new qt(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}a(qe,"signJWT");async function M(e,t,r){return await qe({email:t.toLowerCase(),updateTo:r},e)}a(M,"createEmailVerificationToken");async function Ft(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Q("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await M(e.context.secret,t.email),s=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:s,token:r},e.request)}a(Ft,"sendVerificationEmailFn");var Ht=u("/send-verification-email",{method:"POST",query:C.object({currentURL:C.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:C.object({email:C.string({description:"The email to send the verification email to"}).email(),callbackURL:C.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Q("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new Q("BAD_REQUEST",{message:p.USER_NOT_FOUND});return await Ft(e,r.user),e.json({status:!0})}),Gt=u("/verify-email",{method:"GET",query:C.object({token:C.string({description:"The token to verify the email"}),callbackURL:C.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new Q("UNAUTHORIZED",{message:c})}a(t,"redirectOnError");let{token:r}=e.query,s;try{s=await zt(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let n=C.object({email:C.string().email(),updateTo:C.string().optional()}).parse(s.payload),i=await e.context.internalAdapter.findUserByEmail(n.email);if(!i)return t("user_not_found");if(n.updateTo){let c=await B(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let d=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),l=await M(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:d,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await B(e)){let d=await e.context.internalAdapter.createSession(i.user.id,e.request);if(!d)throw new Q("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await T(e,{session:d,user:i.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function te(e,{userInfo:t,account:r,callbackURL:s}){let o=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(d=>{throw x.error(`Better auth was unable to query your database.
Error: `,d),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=o?.user,i=!n;if(o){let d=o.accounts.find(l=>l.providerId===r.providerId);if(d){let l=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([f,h])=>h!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(d.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return de&&x.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:o.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(h){return x.error("Unable to link account",h),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(d=>d?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let d=await M(e.context.secret,n.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${s}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:l,token:d},e.request)}}catch(d){return d instanceof _?{error:d.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(n.id,e.request);return c?{data:{session:c,user:n},error:null,isRegister:i}:{error:"unable to create session",data:null,isRegister:!1}}a(te,"handleOAuthUserInfo");var Wt=u("/sign-in/social",{method:"POST",query:E.object({currentURL:E.string().optional()}).optional(),body:E.object({callbackURL:E.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:E.string().optional(),errorCallbackURL:E.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:$e,disableRedirect:E.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:E.optional(E.object({token:E.string({description:"ID token from the provider"}),nonce:E.string({description:"Nonce used to generate the token"}).optional(),accessToken:E.string({description:"Access token from the provider"}).optional(),refreshToken:E.string({description:"Refresh token from the provider"}).optional(),expiresAt:E.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new S("NOT_FOUND",{message:p.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new S("NOT_FOUND",{message:p.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:i}=e.body.idToken;if(!await t.verifyIdToken(n,i))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new S("UNAUTHORIZED",{message:p.INVALID_TOKEN});let d=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!d||!d?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new S("UNAUTHORIZED",{message:p.FAILED_TO_GET_USER_INFO});if(!d.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new S("UNAUTHORIZED",{message:p.USER_EMAIL_NOT_FOUND});let l=await te(e,{userInfo:{email:d.user.email,id:d.user.id,name:d.user.name||"",image:d.user.image,emailVerified:d.user.emailVerified||!1},account:{providerId:t.id,accountId:d.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new S("UNAUTHORIZED",{message:l.error});return await T(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:s}=await ee(e),o=await t.createAuthorizationURL({state:s,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:o.toString(),redirect:!e.body.disableRedirect})}),Qt=u("/sign-in/email",{method:"POST",body:E.object({email:E.string({description:"Email of the user"}),password:E.string({description:"Password of the user"}),callbackURL:E.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:E.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new S("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!E.string().email().safeParse(t).success)throw new S("BAD_REQUEST",{message:p.INVALID_EMAIL});let o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new S("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});let n=o.accounts.find(l=>l.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new S("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});let i=n?.password;if(!i)throw e.context.logger.error("Password not found",{email:t}),new S("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:i,password:r}))throw e.context.logger.error("Invalid password"),new S("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!o.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new S("UNAUTHORIZED",{message:p.EMAIL_NOT_VERIFIED});let l=await M(e.context.secret,o.user.email),f=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:o.user,url:f,token:l},e.request),e.context.logger.error("Email not verified",{email:t}),new S("FORBIDDEN",{message:p.EMAIL_NOT_VERIFIED})}let d=await e.context.internalAdapter.createSession(o.user.id,e.headers,e.body.rememberMe===!1);if(!d)throw e.context.logger.error("Failed to create session"),new S("UNAUTHORIZED",{message:p.FAILED_TO_CREATE_SESSION});return await T(e,{session:d,user:o.user},e.body.rememberMe===!1),e.json({user:{id:o.user.id,email:o.user.email,name:o.user.name,image:o.user.image,emailVerified:o.user.emailVerified,createdAt:o.user.createdAt,updatedAt:o.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as Z}from"zod";var re=Z.object({code:Z.string().optional(),error:Z.string().optional(),error_description:Z.string().optional(),state:Z.string().optional()}),Zt=u("/callback/:id",{method:["GET","POST"],body:re.optional(),query:re.optional(),metadata:H},async e=>{let t;try{if(e.method==="GET")t=re.parse(e.query);else if(e.method==="POST")t=re.parse(e.body);else throw new Error("Unsupported method")}catch(v){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",v),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:s,state:o,error_description:n}=t;if(!o)throw e.context.logger.error("State not found",s),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${s||"no_code"}&error_description=${n}`);let i=e.context.socialProviders.find(v=>v.id===e.params.id);if(!i)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:d,link:l,errorURL:f,newUserURL:h}=await Ee(e),w;try{w=await i.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${i.id}`})}catch(v){throw e.context.logger.error("",v),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let b=await i.getUserInfo(w).then(v=>v?.user);function R(v){let j=f||d||`${e.context.baseURL}/error`;throw j.includes("?")?j=`${j}&error=${v}`:j=`${j}?error=${v}`,e.redirect(j)}if(a(R,"redirectOnError"),!b)return e.context.logger.error("Unable to get user info"),R("unable_to_get_user_info");if(!b.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),R("email_not_found");if(!d)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==b.email.toLowerCase())return R("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:i.id,accountId:b.id}))return R("unable_to_link_account");let j;try{j=d.toString()}catch{j=d}throw e.redirect(j)}let O=await te(e,{userInfo:{...b,email:b.email,name:b.name||b.email},account:{providerId:i.id,accountId:b.id,...w,scope:w.scopes?.join(",")},callbackURL:d});if(O.error)return e.context.logger.error(O.error.split(" ").join("_")),R(O.error.split(" ").join("_"));let{session:me,user:oe}=O.data;await T(e,{session:me,user:oe});let se;try{se=(O.isRegister&&h||d).toString()}catch{se=O.isRegister&&h||d}throw e.redirect(se)});import"zod";import{APIError as Kt}from"better-call";var Jt=u("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw L(e),new Kt("BAD_REQUEST",{message:p.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),L(e),e.json({success:!0})});import{z as P}from"zod";import{APIError as K}from"better-call";function ze(e,t,r){let s=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([o,n])=>s.searchParams.set(o,n)),s.href}a(ze,"redirectError");function Yt(e,t,r){let s=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([o,n])=>s.searchParams.set(o,n)),s.href}a(Yt,"redirectCallback");var Xt=u("/forget-password",{method:"POST",body:P.object({email:P.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:P.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new K("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,s=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!s)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let o=60*60*1,n=I(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||o,"sec"),i=Le(24);await e.context.internalAdapter.createVerificationValue({value:s.user.id.toString(),identifier:`reset-password:${i}`,expiresAt:n});let c=`${e.context.baseURL}/reset-password/${i}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:s.user,url:c,token:i},e.request),e.json({status:!0})}),er=u("/reset-password/:token",{method:"GET",query:P.object({callbackURL:P.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(ze(e.context,r,{error:"INVALID_TOKEN"}));let s=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!s||s.expiresAt<new Date?e.redirect(ze(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Yt(e.context,r,{token:t}))}),tr=u("/reset-password",{query:P.optional(P.object({token:P.string().optional(),currentURL:P.string().optional()})),method:"POST",body:P.object({newPassword:P.string({description:"The new password to set"}),token:P.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new K("BAD_REQUEST",{message:p.INVALID_TOKEN});let{newPassword:r}=e.body,s=e.context.password?.config.minPasswordLength,o=e.context.password?.config.maxPasswordLength;if(r.length<s)throw new K("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});if(r.length>o)throw new K("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,i=await e.context.internalAdapter.findVerificationValue(n);if(!i||i.expiresAt<new Date)throw new K("BAD_REQUEST",{message:p.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(i.id);let c=i.value,d=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(h=>h.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,d),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:d,accountId:c}),e.json({status:!0}))});import{z as k}from"zod";import{APIError as U}from"better-call";import{z as g}from"zod";import{APIError as fa}from"better-call";var ga=g.object({id:g.string(),providerId:g.string(),accountId:g.string(),userId:g.string(),accessToken:g.string().nullish(),refreshToken:g.string().nullish(),idToken:g.string().nullish(),accessTokenExpiresAt:g.date().nullish(),refreshTokenExpiresAt:g.date().nullish(),scope:g.string().nullish(),password:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),ha=g.object({id:g.string(),email:g.string().transform(e=>e.toLowerCase()),emailVerified:g.boolean().default(!1),name:g.string(),image:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),wa=g.object({id:g.string(),userId:g.string(),expiresAt:g.date(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),token:g.string(),ipAddress:g.string().nullish(),userAgent:g.string().nullish()}),ya=g.object({id:g.string(),value:g.string(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),expiresAt:g.date(),identifier:g.string()});function Fe(e,t){if(!t)return e;for(let r in t){let s=t[r]?.modelName;s&&(e[r].modelName=s);for(let o in e[r].fields){let n=t[r]?.fields?.[o];n&&(e[r].fields[o].fieldName=n)}}return e}a(Fe,"mergeSchema");var or=u("/change-password",{method:"POST",body:k.object({newPassword:k.string({description:"The new password to set"}),currentPassword:k.string({description:"The current password"}),revokeOtherSessions:k.boolean({description:"Revoke all other sessions"}).optional()}),use:[D],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:s}=e.body,o=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new U("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new U("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let d=(await e.context.internalAdapter.findAccounts(o.user.id)).find(w=>w.providerId==="credential"&&w.password);if(!d||!d.password)throw new U("BAD_REQUEST",{message:p.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(t);if(!await e.context.password.verify({hash:d.password,password:r}))throw new U("BAD_REQUEST",{message:p.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(d.id,{password:l});let h=null;if(s){await e.context.internalAdapter.deleteSessions(o.user.id);let w=await e.context.internalAdapter.createSession(o.user.id,e.headers);if(!w)throw new U("INTERNAL_SERVER_ERROR",{message:p.FAILED_TO_GET_SESSION});await T(e,{session:w,user:o.user}),h=w.token}return e.json({token:h})}),sr=u("/set-password",{method:"POST",body:k.object({newPassword:k.string()}),metadata:{SERVER_ONLY:!0},use:[D]},async e=>{let{newPassword:t}=e.body,r=e.context.session,s=e.context.password.config.minPasswordLength;if(t.length<s)throw e.context.logger.error("Password is too short"),new U("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});let o=e.context.password.config.maxPasswordLength;if(t.length>o)throw e.context.logger.error("Password is too long"),new U("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let i=(await e.context.internalAdapter.findAccounts(r.user.id)).find(d=>d.providerId==="credential"&&d.password),c=await e.context.password.hash(t);if(!i)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new U("BAD_REQUEST",{message:"user already has a password"})}),nr=u("/delete-user",{method:"POST",use:[D],body:k.object({callbackURL:k.string().optional(),password:k.string().optional(),token:k.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new U("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!n||!n.password)throw new U("BAD_REQUEST",{message:p.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new U("BAD_REQUEST",{message:p.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let o=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-o>n)throw new U("BAD_REQUEST",{message:p.SESSION_EXPIRED})}if(e.body.token)return await He({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let o=W(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${o}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${o}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:o},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),L(e);let s=e.context.options.user.deleteUser?.afterDelete;return s&&await s(t.user,e.request),e.json({success:!0,message:"User deleted"})}),He=u("/delete-user/callback",{method:"GET",query:k.object({token:k.string(),callbackURL:k.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new U("NOT_FOUND");let t=await B(e);if(!t)throw new U("NOT_FOUND",{message:p.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new U("NOT_FOUND",{message:p.INVALID_TOKEN});if(r.value!==t.user.id)throw new U("NOT_FOUND",{message:p.INVALID_TOKEN});let s=e.context.options.user.deleteUser?.beforeDelete;s&&await s(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),L(e);let o=e.context.options.user.deleteUser?.afterDelete;if(o&&await o(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),ir=u("/change-email",{method:"POST",query:k.object({currentURL:k.string().optional()}).optional(),body:k.object({newEmail:k.string({description:"The new email to set"}).email(),callbackURL:k.string({description:"The URL to redirect to after email verification"}).optional()}),use:[D],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new U("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new U("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new U("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let o=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new U("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await M(e.context.secret,e.context.session.user.email,e.body.newEmail),s=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:s,token:r},e.request),e.json({status:!0})});var ar=a((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),dr=u("/error",{method:"GET",metadata:{...H,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(ar(t),{headers:{"Content-Type":"text/html"}})});var cr=u("/ok",{method:"GET",metadata:{...H,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as Fa}from"zod";import{APIError as Ja}from"better-call";import{z as J}from"zod";import{APIError as Ge}from"better-call";var lr=u("/list-accounts",{method:"GET",use:[D],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(s=>({id:s.id,provider:s.providerId})))}),ur=u("/link-social",{method:"POST",requireHeaders:!0,query:J.object({currentURL:J.string().optional()}).optional(),body:J.object({callbackURL:J.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:J.enum(pe,{description:"The OAuth2 provider to use"})}),use:[D],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new Ge("BAD_REQUEST",{message:p.SOCIAL_ACCOUNT_ALREADY_LINKED});let o=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!o)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Ge("NOT_FOUND",{message:p.PROVIDER_NOT_FOUND});let n=await ee(e,{userId:t.user.id,email:t.user.email}),i=await o.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${o.id}`});return e.json({url:i.toString(),redirect:!0})});import"defu";import{APIError as _}from"better-call";import{APIError as pr}from"better-call";var We=a(async e=>{let t=e.context.returned;return t?t instanceof Response?t.status!==200?null:await t.clone().json():t instanceof pr?null:t:null},"getEndpointResponse");var yc=a(e=>{let t={defaultRole:"user",adminRole:"admin",...e},r={FAILED_TO_CREATE_USER:"Failed to create user",USER_ALREADY_EXISTS:"User already exists",USER_NOT_FOUND:"User not found",YOU_CANNOT_BAN_YOURSELF:"You cannot ban yourself",ONLY_ADMINS_CAN_ACCESS_THIS_ENDPOINT:"Only admins can access this endpoint"},s=q(async o=>{let n=await B(o);if(!n?.session)throw new _("UNAUTHORIZED");let i=n.user;if(!i.role||(Array.isArray(t.adminRole)?!t.adminRole.includes(i.role):i.role!==t.adminRole))throw new _("FORBIDDEN",{message:"Only admins can access this endpoint"});return{session:{user:i,session:n.session}}});return{id:"admin",init(o){return{options:{databaseHooks:{user:{create:{async before(n){if(e?.defaultRole!==!1)return{data:{role:e?.defaultRole??"user",...n}}}}},session:{create:{async before(n){let i=await o.internalAdapter.findUserById(n.userId);if(i.banned){if(i.banExpires&&i.banExpires.getTime()<Date.now()){await o.internalAdapter.updateUser(n.userId,{banned:!1,banReason:null,banExpires:null});return}return!1}}}}}}}},hooks:{after:[{matcher(o){return o.path==="/list-sessions"},handler:q(async o=>{let n=await We(o);if(!n)return;let i=n.filter(c=>!c.impersonatedBy);return o.json(i)})}]},endpoints:{setRole:u("/admin/set-role",{method:"POST",body:m.object({userId:m.string({description:"The user id"}),role:m.string({description:"The role to set. `admin` or `user` by default"})}),use:[s],metadata:{openapi:{operationId:"setRole",summary:"Set the role of a user",description:"Set the role of a user",responses:{200:{description:"User role updated",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{let n=await o.context.internalAdapter.updateUser(o.body.userId,{role:o.body.role});return o.json({user:n})}),createUser:u("/admin/create-user",{method:"POST",body:m.object({email:m.string({description:"The email of the user"}),password:m.string({description:"The password of the user"}),name:m.string({description:"The name of the user"}),role:m.string({description:"The role of the user"}),data:m.optional(m.record(m.any(),{description:"Extra fields for the user. Including custom additional fields."}))}),use:[s],metadata:{openapi:{operationId:"createUser",summary:"Create a new user",description:"Create a new user",responses:{200:{description:"User created",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{if(await o.context.internalAdapter.findUserByEmail(o.body.email))throw new _("BAD_REQUEST",{message:r.USER_ALREADY_EXISTS});let i=await o.context.internalAdapter.createUser({email:o.body.email,name:o.body.name,role:o.body.role,...o.body.data});if(!i)throw new _("INTERNAL_SERVER_ERROR",{message:r.FAILED_TO_CREATE_USER});let c=await o.context.password.hash(o.body.password);return await o.context.internalAdapter.linkAccount({accountId:i.id,providerId:"credential",password:c,userId:i.id}),o.json({user:i})}),listUsers:u("/admin/list-users",{method:"GET",use:[s],query:m.object({searchValue:m.string({description:"The value to search for"}).optional(),searchField:m.enum(["email","name"],{description:"The field to search in, defaults to email. Can be `email` or `name`"}).optional(),searchOperator:m.enum(["contains","starts_with","ends_with"],{description:"The operator to use for the search. Can be `contains`, `starts_with` or `ends_with`"}).optional(),limit:m.string({description:"The number of users to return"}).or(m.number()).optional(),offset:m.string({description:"The offset to start from"}).or(m.number()).optional(),sortBy:m.string({description:"The field to sort by"}).optional(),sortDirection:m.enum(["asc","desc"],{description:"The direction to sort by"}).optional(),filterField:m.string({description:"The field to filter by"}).optional(),filterValue:m.string({description:"The value to filter by"}).or(m.number()).or(m.boolean()).optional(),filterOperator:m.enum(["eq","ne","lt","lte","gt","gte"],{description:"The operator to use for the filter"}).optional()}),metadata:{openapi:{operationId:"listUsers",summary:"List users",description:"List users",responses:{200:{description:"List of users",content:{"application/json":{schema:{type:"object",properties:{users:{type:"array",items:{$ref:"#/components/schemas/User"}}}}}}}}}}},async o=>{let n=[];o.query?.searchValue&&n.push({field:o.query.searchField||"email",operator:o.query.searchOperator||"contains",value:o.query.searchValue}),o.query?.filterValue&&n.push({field:o.query.filterField||"email",operator:o.query.filterOperator||"eq",value:o.query.filterValue});try{let i=await o.context.internalAdapter.listUsers(Number(o.query?.limit)||void 0,Number(o.query?.offset)||void 0,o.query?.sortBy?{field:o.query.sortBy,direction:o.query.sortDirection||"asc"}:void 0,n.length?n:void 0);return o.json({users:i})}catch(i){return console.log(i),o.json({users:[]})}}),listUserSessions:u("/admin/list-user-sessions",{method:"POST",use:[s],body:m.object({userId:m.string({description:"The user id"})}),metadata:{openapi:{operationId:"listUserSessions",summary:"List user sessions",description:"List user sessions",responses:{200:{description:"List of user sessions",content:{"application/json":{schema:{type:"object",properties:{sessions:{type:"array",items:{$ref:"#/components/schemas/Session"}}}}}}}}}}},async o=>({sessions:await o.context.internalAdapter.listSessions(o.body.userId)})),unbanUser:u("/admin/unban-user",{method:"POST",body:m.object({userId:m.string({description:"The user id"})}),use:[s],metadata:{openapi:{operationId:"unbanUser",summary:"Unban a user",description:"Unban a user",responses:{200:{description:"User unbanned",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{let n=await o.context.internalAdapter.updateUser(o.body.userId,{banned:!1});return o.json({user:n})}),banUser:u("/admin/ban-user",{method:"POST",body:m.object({userId:m.string({description:"The user id"}),banReason:m.string({description:"The reason for the ban"}).optional(),banExpiresIn:m.number({description:"The number of seconds until the ban expires"}).optional()}),use:[s],metadata:{openapi:{operationId:"banUser",summary:"Ban a user",description:"Ban a user",responses:{200:{description:"User banned",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{if(o.body.userId===o.context.session.user.id)throw new _("BAD_REQUEST",{message:r.YOU_CANNOT_BAN_YOURSELF});let n=await o.context.internalAdapter.updateUser(o.body.userId,{banned:!0,banReason:o.body.banReason||e?.defaultBanReason||"No reason",banExpires:o.body.banExpiresIn?I(o.body.banExpiresIn,"sec"):e?.defaultBanExpiresIn?I(e.defaultBanExpiresIn,"sec"):void 0});return await o.context.internalAdapter.deleteSessions(o.body.userId),o.json({user:n})}),impersonateUser:u("/admin/impersonate-user",{method:"POST",body:m.object({userId:m.string({description:"The user id"})}),use:[s],metadata:{openapi:{operationId:"impersonateUser",summary:"Impersonate a user",description:"Impersonate a user",responses:{200:{description:"Impersonation session created",content:{"application/json":{schema:{type:"object",properties:{session:{$ref:"#/components/schemas/Session"},user:{$ref:"#/components/schemas/User"}}}}}}}}}},async o=>{let n=await o.context.internalAdapter.findUserById(o.body.userId);if(!n)throw new _("NOT_FOUND",{message:"User not found"});let i=await o.context.internalAdapter.createSession(n.id,void 0,!0,{impersonatedBy:o.context.session.user.id,expiresAt:e?.impersonationSessionDuration?I(e.impersonationSessionDuration,"sec"):I(60*60,"sec")});if(!i)throw new _("INTERNAL_SERVER_ERROR",{message:r.FAILED_TO_CREATE_USER});let c=o.context.authCookies;return L(o),await o.setSignedCookie("admin_session",o.context.session.session.token,o.context.secret,c.sessionToken.options),await T(o,{session:i,user:n},!0),o.json({session:i,user:n})}),stopImpersonating:u("/admin/stop-impersonating",{method:"POST"},async o=>{let n=await B(o);if(!n)throw new _("UNAUTHORIZED");if(!n.session.impersonatedBy)throw new _("BAD_REQUEST",{message:"You are not impersonating anyone"});let i=await o.context.internalAdapter.findUserById(n.session.impersonatedBy);if(!i)throw new _("INTERNAL_SERVER_ERROR",{message:"Failed to find user"});let c=await o.getSignedCookie("admin_session",o.context.secret);if(!c)throw new _("INTERNAL_SERVER_ERROR",{message:"Failed to find admin session"});let d=await o.context.internalAdapter.findSession(c);if(!d||d.session.userId!==i.id)throw new _("INTERNAL_SERVER_ERROR",{message:"Failed to find admin session"});return await T(o,d),o.json(d)}),revokeUserSession:u("/admin/revoke-user-session",{method:"POST",body:m.object({sessionToken:m.string({description:"The session token"})}),use:[s],metadata:{openapi:{operationId:"revokeUserSession",summary:"Revoke a user session",description:"Revoke a user session",responses:{200:{description:"Session revoked",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async o=>(await o.context.internalAdapter.deleteSession(o.body.sessionToken),o.json({success:!0}))),revokeUserSessions:u("/admin/revoke-user-sessions",{method:"POST",body:m.object({userId:m.string({description:"The user id"})}),use:[s],metadata:{openapi:{operationId:"revokeUserSessions",summary:"Revoke all user sessions",description:"Revoke all user sessions",responses:{200:{description:"Sessions revoked",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async o=>(await o.context.internalAdapter.deleteSessions(o.body.userId),o.json({success:!0}))),removeUser:u("/admin/remove-user",{method:"POST",body:m.object({userId:m.string({description:"The user id"})}),use:[s],metadata:{openapi:{operationId:"removeUser",summary:"Remove a user",description:"Delete a user and all their sessions and accounts. Cannot be undone.",responses:{200:{description:"User removed",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async o=>(await o.context.internalAdapter.deleteUser(o.body.userId),o.json({success:!0})))},$ERROR_CODES:r,schema:Fe(mr,t.schema)}},"admin"),mr={user:{fields:{role:{type:"string",required:!1,input:!1},banned:{type:"boolean",defaultValue:!1,required:!1,input:!1},banReason:{type:"string",required:!1,input:!1},banExpires:{type:"date",required:!1,input:!1}}},session:{fields:{impersonatedBy:{type:"string",required:!1}}}};export{yc as admin};
