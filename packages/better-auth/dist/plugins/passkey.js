var tt=Object.defineProperty;var a=(e,t)=>tt(e,"name",{value:t,configurable:!0});import{generateAuthenticationOptions as _r,generateRegistrationOptions as Sr,verifyAuthenticationResponse as Ur,verifyRegistrationResponse as Pr}from"@simplewebauthn/server";import{APIError as P}from"better-call";import{createRandomStringGenerator as rt}from"@better-auth/utils/random";var H=rt("a-z","0-9","A-Z","-_");import{z as I}from"zod";import{createEndpointCreator as ot,createMiddleware as be,createMiddlewareCreator as nt}from"better-call";var Ae=be(async()=>({})),Q=nt({use:[Ae,be(async()=>({}))]}),m=ot({use:[Ae]});import{APIError as Xc,createRouter as ed,getCookie as td,getSignedCookie as rd,setCookie as od,setSignedCookie as nd}from"better-call";import{APIError as dt}from"better-call";function ce(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}a(ce,"escapeRegExpChar");function st(e){let t="";for(let r=0;r<e.length;r++)t+=ce(e[r]);return t}a(st,"escapeRegExpString");function Re(e,t=!0){if(Array.isArray(e))return`(?:${e.map(u=>`^${Re(u,t)}$`).join("|")})`;let r="",o="",n=".";t===!0?(r="/",o="[/\\\\]",n="[^/\\\\]"):t&&(r=t,o=st(r),o.length>1?(o=`(?:${o})`,n=`((?!${o}).)`):n=`[^${o}]`);let i=t?`${o}+?`:"",c=t?`${o}*?`:"",d=t?e.split(r):[e],s="";for(let p=0;p<d.length;p++){let u=d[p],y=d[p+1],h="";if(!(!u&&p>0)){if(t&&(p===d.length-1?h=c:y!=="**"?h=i:h=""),t&&u==="**"){h&&(s+=p===0?"":h,s+=`(?:${n}*?${h})*?`);continue}for(let w=0;w<u.length;w++){let f=u[w];f==="\\"?w<u.length-1&&(s+=ce(u[w+1]),w++):f==="?"?s+=n:f==="*"?s+=`${n}*?`:s+=ce(f)}s+=h}}return s}a(Re,"transform");function it(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}a(it,"isMatch");function de(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Re(e,t.separator),o=new RegExp(`^${r}$`,t.flags),n=it.bind(null,o);return n.options=t,n.pattern=e,n.regexp=o,n}a(de,"wildcardMatch");var re=Object.create(null),J=a(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?re:globalThis),"_getEnv"),oe=new Proxy(re,{get(e,t){return J()[t]??re[t]},has(e,t){let r=J();return t in r||t in re},set(e,t,r){let o=J(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=J(!0);return delete r[t],!0},ownKeys(){let e=J(!0);return Object.keys(e)}});function at(e){return e?e!=="false":!1}a(at,"toBoolean");var pe=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var ue=pe==="dev"||pe==="development",ct=pe==="test"||at(oe.TEST);var N=class extends Error{static{a(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function ke(e){try{return new URL(e).origin}catch{return null}}a(ke,"getOrigin");function Ee(e){return e.includes("://")?new URL(e).host:e}a(Ee,"getHost");var pt=Q(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,n=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,c=t?.redirectTo,d=r?.currentURL,s=t?.errorCallbackURL,p=t?.newUserCallbackURL,u=o.trustedOrigins,y=e.headers?.has("cookie"),h=a((f,A)=>f.startsWith("/")?!1:A.includes("*")?de(A)(Ee(f)):f.startsWith(A),"matchesPattern"),w=a((f,A)=>{if(!f)return;if(!u.some(C=>h(f,C)||f?.startsWith("/")&&A!=="origin"&&!f.includes(":")))throw e.context.logger.error(`Invalid ${A}: ${f}`),e.context.logger.info(`If it's a valid URL, please add ${f} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${u}`),new dt("FORBIDDEN",{message:`Invalid ${A}`})},"validateURL");y&&!e.context.options.advanced?.disableCSRFCheck&&w(n,"origin"),i&&w(i,"callbackURL"),c&&w(c,"redirectURL"),d&&w(d,"currentURL"),s&&w(s,"errorCallbackURL"),p&&w(c,"newUserCallbackURL")});import{APIError as _}from"better-call";import{z as k}from"zod";var z=a((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");import{base64Url as ut}from"@better-auth/utils/base64";import{createHMAC as lt}from"@better-auth/utils/hmac";async function le(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=ut.encode(JSON.stringify({session:t,expiresAt:z(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await lt("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new N("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}a(le,"setCookieCache");async function U(e,t,r,o){let n=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...n,maxAge:i,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await le(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}a(U,"setSessionCookie");function j(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}a(j,"deleteSessionCookie");import{betterFetch as ht}from"@better-fetch/fetch";import{APIError as yt}from"better-call";import{decodeJwt as wt,decodeProtectedHeader as bt,importJWK as At,jwtVerify as Rt}from"jose";import{createHash as mt}from"@better-auth/utils/hash";import{base64Url as ft}from"@better-auth/utils/base64";async function Te(e){let t=await mt("SHA-256").digest(e);return ft.encode(new Uint8Array(t),{padding:!1})}a(Te,"generateCodeChallenge");function ne(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?z(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}a(ne,"getOAuth2Tokens");async function R({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:n,scopes:i,claims:c,redirectURI:d,duration:s}){let p=new URL(r);if(p.searchParams.set("response_type","code"),p.searchParams.set("client_id",t.clientId),p.searchParams.set("state",o),p.searchParams.set("scope",i.join(" ")),p.searchParams.set("redirect_uri",t.redirectURI||d),n){let u=await Te(n);p.searchParams.set("code_challenge_method","S256"),p.searchParams.set("code_challenge",u)}if(c){let u=c.reduce((y,h)=>(y[h]=null,y),{});p.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return s&&p.searchParams.set("duration",s),p}a(R,"createAuthorizationURL");import{betterFetch as gt}from"@better-fetch/fetch";import{jwtVerify as Po}from"jose";async function b({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:n,authentication:i}){let c=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(c.set("grant_type","authorization_code"),c.set("code",e),t&&c.set("code_verifier",t),c.set("redirect_uri",r),i==="basic"){let y=btoa(`${o.clientId}:${o.clientSecret}`);d.authorization=`Basic ${y}`}else c.set("client_id",o.clientId),c.set("client_secret",o.clientSecret);let{data:s,error:p}=await gt(n,{method:"POST",body:c,headers:d});if(p)throw p;return ne(s)}a(b,"validateAuthorizationCode");import{z as V}from"zod";import{APIError as Oe}from"better-call";import{createHash as Ho}from"@better-auth/utils/hash";import{xchacha20poly1305 as Wo}from"@noble/ciphers/chacha";import{bytesToHex as Qo,hexToBytes as Jo,utf8ToBytes as Zo}from"@noble/ciphers/utils";import{managedNonce as Xo}from"@noble/ciphers/webcrypto";import{scryptAsync as jo}from"@noble/hashes/scrypt";import{getRandomValues as Vo}from"uncrypto";import{hex as Fo}from"@better-auth/utils/hex";async function se(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?ke(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Oe("BAD_REQUEST",{message:"callbackURL is required"});let o=H(128),n=H(32),i=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),c=new Date;c.setMinutes(c.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:i,identifier:n,expiresAt:c});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Oe("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:o}}a(se,"generateState");async function _e(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=V.object({callbackURL:V.string(),codeVerifier:V.string(),errorURL:V.string().optional(),newUserURL:V.string().optional(),expiresAt:V.number(),link:V.object({email:V.string(),userId:V.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}a(_e,"parseState");var Se=a(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:n}){let i=o||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||n}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:a(async({code:r,codeVerifier:o,redirectURI:n})=>b({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let n=bt(r),{kid:i,alg:c}=n;if(!i||!c)return!1;let d=await kt(i),{payload:s}=await Rt(r,d,{algorithms:[c],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(p=>{s[p]!==void 0&&(s[p]=!!s[p])}),o&&s.nonce!==o?!1:!!s},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=wt(r.idToken);if(!o)return null;let n=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:n,emailVerified:!1,email:o.email,...i},data:o}}}},"apple"),kt=a(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await ht(`${t}${r}`);if(!o?.keys)throw new yt("BAD_REQUEST",{message:"Keys not found"});let n=o.keys.find(i=>i.kid===e);if(!n)throw new Error(`JWK with kid ${e} not found`);return await At(n,n.alg)},"getApplePublicKey");import{betterFetch as Et}from"@better-fetch/fetch";var Ue=a(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identify","email"];return e.scope&&n.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Et("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...n},data:r}}}),"discord");import{betterFetch as Tt}from"@better-fetch/fetch";var Pe=a(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["email","public_profile"];return e.scope&&n.push(...e.scope),await R({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:n,state:t,redirectURI:o})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Tt("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...n},data:r}}}),"facebook");import{betterFetch as Ie}from"@better-fetch/fetch";var ve=a(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:n,redirectURI:i}){let c=o||["user:email"];return e.scope&&c.push(...e.scope),R({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:c,state:r,redirectURI:i})},validateAuthorizationCode:a(async({code:r,redirectURI:o})=>b({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await Ie("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=!1,{data:c}=await Ie("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});c&&(o.email=(c.find(s=>s.primary)??c[0])?.email,i=c.find(s=>s.email===o.email)?.verified??!1);let d=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:i,...d},data:o}}}},"github");var me=["info","success","warn","error","debug"];function Ot(e,t){return me.indexOf(t)<=me.indexOf(e)}a(Ot,"shouldPublishLog");var B={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},_t={info:B.fg.blue,success:B.fg.green,warn:B.fg.yellow,error:B.fg.red,debug:B.fg.magenta},St=a((e,t)=>{let r=new Date().toISOString();return`${B.dim}${r}${B.reset} ${_t[e]}${e.toUpperCase()}${B.reset} ${B.bright}Better Auth${B.reset} ${t}`},"formatMessage"),Ut=a(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=a((n,i,c=[])=>{if(!t||!Ot(r,n))return;let d=St(n,i);if(!e||typeof e.log!="function"){n==="error"?console.error(d,...c):n==="warn"?console.warn(d,...c):console.log(d,...c);return}e.log(n==="success"?"info":n,d,...c)},"LogFunc");return Object.fromEntries(me.map(n=>[n,(...[i,...c])=>o(n,i,c)]))},"createLogger"),x=Ut();import{betterFetch as Pt}from"@better-fetch/fetch";import{decodeJwt as It}from"jose";var Le=a(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){if(!e.clientId||!e.clientSecret)throw x.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new N("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new N("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let c=await R({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:o,redirectURI:n});return e.accessType&&c.searchParams.set("access_type",e.accessType),e.prompt&&c.searchParams.set("prompt",e.prompt),c},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>b({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:n}=await Pt(o);return n?n.aud===e.clientId&&n.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=It(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");import{betterFetch as vt}from"@better-fetch/fetch";import{decodeJwt as Lt}from"jose";var xe=a(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(n){let i=n.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),R({id:"microsoft",options:e,authorizationEndpoint:r,state:n.state,codeVerifier:n.codeVerifier,scopes:i,redirectURI:n.redirectURI})},validateAuthorizationCode({code:n,codeVerifier:i,redirectURI:c}){return b({code:n,codeVerifier:i,redirectURI:e.redirectURI||c,options:e,tokenEndpoint:o})},async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);if(!n.idToken)return null;let i=Lt(n.idToken),c=e.profilePhotoSize||48;await vt(`https://graph.microsoft.com/v1.0/me/photos/${c}x${c}/$value`,{headers:{Authorization:`Bearer ${n.accessToken}`},async onResponse(s){if(!(e.disableProfilePhoto||!s.response.ok))try{let u=await s.response.clone().arrayBuffer(),y=Buffer.from(u).toString("base64");i.picture=`data:image/jpeg;base64, ${y}`}catch(p){x.error(p&&typeof p=="object"&&"name"in p?p.name:"",p)}}});let d=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...d},data:i}}}},"microsoft");import{betterFetch as xt}from"@better-fetch/fetch";var De=a(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),R({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:o,redirectURI:n})},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>b({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await xt("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...n},data:r}}}),"spotify");var K={isAction:!1};import{createRandomStringGenerator as Dt}from"@better-auth/utils/random";var Z=a(e=>Dt("a-z","A-Z","0-9")(e||32),"generateId");import{decodeJwt as Ct}from"jose";var Ce=a(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["user:read:email","openid"];return e.scope&&n.push(...e.scope),R({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:n,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return x.error("No idToken found in token"),null;let o=Ct(r),n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...n},data:o}}}),"twitch");import{betterFetch as Nt}from"@better-fetch/fetch";var Ne=a(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),R({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>b({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Nt("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...n},data:r}}}),"twitter");import{betterFetch as jt}from"@better-fetch/fetch";var je=a(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:a(async({state:r,scopes:o,codeVerifier:n,redirectURI:i})=>{let c=o||["account_info.read"];return e.scope&&c.push(...e.scope),await R({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:c,state:r,redirectURI:i,codeVerifier:n})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:r,codeVerifier:o,redirectURI:n})=>await b({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await jt("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...i},data:o}}}},"dropbox");import{betterFetch as Bt}from"@better-fetch/fetch";var Be=a(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:a(async({state:o,scopes:n,redirectURI:i})=>{let c=n||["profile","email","openid"];return e.scope&&c.push(...e.scope),await R({id:"linkedin",options:e,authorizationEndpoint:t,scopes:c,state:o,redirectURI:i})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:o,redirectURI:n})=>await b({code:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:n,error:i}=await Bt("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let c=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,emailVerified:n.email_verified||!1,image:n.picture,...c},data:n}}}},"linkedin");import{betterFetch as Vt}from"@better-fetch/fetch";var fe=a((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),$t=a(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:fe(`${t}/oauth/authorize`),tokenEndpoint:fe(`${t}/oauth/token`),userinfoEndpoint:fe(`${t}/api/v4/user`)}},"issuerToEndpoints"),Ve=a(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=$t(e.issuer),n="gitlab";return{id:n,name:"Gitlab",createAuthorizationURL:a(async({state:c,scopes:d,codeVerifier:s,redirectURI:p})=>{let u=d||["read_user"];return e.scope&&u.push(...e.scope),await R({id:n,options:e,authorizationEndpoint:t,scopes:u,state:c,redirectURI:p,codeVerifier:s})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:c,redirectURI:d,codeVerifier:s})=>b({code:c,redirectURI:e.redirectURI||d,options:e,codeVerifier:s,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(c){if(e.getUserInfo)return e.getUserInfo(c);let{data:d,error:s}=await Vt(o,{headers:{authorization:`Bearer ${c.accessToken}`}});if(s||d.state!=="active"||d.locked)return null;let p=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...p},data:d}}}},"gitlab");import{betterFetch as $e}from"@better-fetch/fetch";var Fe=a(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identity"];return e.scope&&n.push(...e.scope),R({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:n,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),n={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:c}=await $e("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:n,body:o.toString()});if(c)throw c;return ne(i)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await $e("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...n},data:r}}}),"reddit");import{z as Ft}from"zod";var Mt={apple:Se,discord:Ue,facebook:Pe,github:ve,microsoft:xe,google:Le,spotify:De,twitch:Ce,twitter:Ne,dropbox:je,linkedin:Be,gitlab:Ve,reddit:Fe},ge=Object.keys(Mt),Me=Ft.enum(ge,{description:"OAuth2 provider to use"});import{z as D}from"zod";import{APIError as Y}from"better-call";import{APIError as $}from"better-call";import{z as G}from"zod";function qe(e){try{return JSON.parse(e)}catch{return null}}a(qe,"safeJSONParse");var l={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as qt}from"@better-auth/utils/hmac";import{base64 as zt}from"@better-auth/utils/base64";import{binary as Ht}from"@better-auth/utils/binary";var ze=a(()=>m("/get-session",{method:"GET",query:G.optional(G.object({disableCookieCache:G.boolean({description:"Disable cookie cache and fetch session from database"}).or(G.string().transform(e=>e==="true")).optional(),disableRefresh:G.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?qe(Ht.decode(zt.decode(r))):null;if(o&&!await qt("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return j(e),e.json(null);let n=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let u=o.session;if(o.expiresAt<Date.now()||u.session.expiresAt<new Date){let h=e.context.authCookies.sessionData.name;e.setCookie(h,"",{maxAge:0})}else return e.json(u)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return j(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(n||e.query?.disableRefresh)return e.json(i);let c=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-c*1e3+d*1e3<=Date.now()){let u=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:z(e.context.sessionConfig.expiresIn,"sec")});if(!u)return j(e),e.json(null,{status:401});let y=(u.expiresAt.valueOf()-Date.now())/1e3;return await U(e,{session:u,user:i.user},!1,{maxAge:y}),e.json({session:u,user:i.user})}return await le(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new $("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_GET_SESSION})}}),"getSession"),F=a(async(e,t)=>{if(e.context.session)return e.context.session;let r=await ze()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),O=Q(async e=>{let t=await F(e);if(!t?.session)throw new $("UNAUTHORIZED");return{session:t}}),he=Q(async e=>{let t=await F(e);if(!t?.session)throw new $("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new $("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var Gt=m("/revoke-session",{method:"POST",body:G.object({token:G.string({description:"The token to revoke"})}),use:[O],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new $("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new $("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new $("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Wt=m("/revoke-sessions",{method:"POST",use:[O],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new $("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Kt=m("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[O],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new $("UNAUTHORIZED");let n=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(n.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});import{jwtVerify as Jt}from"jose";import{SignJWT as Qt}from"jose";async function He(e,t,r=3600){return await new Qt(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}a(He,"signJWT");async function M(e,t,r){return await He({email:t.toLowerCase(),updateTo:r},e)}a(M,"createEmailVerificationToken");async function Zt(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Y("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await M(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}a(Zt,"sendVerificationEmailFn");var Yt=m("/send-verification-email",{method:"POST",query:D.object({currentURL:D.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:D.object({email:D.string({description:"The email to send the verification email to"}).email(),callbackURL:D.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Y("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new Y("BAD_REQUEST",{message:l.USER_NOT_FOUND});return await Zt(e,r.user),e.json({status:!0})}),Xt=m("/verify-email",{method:"GET",query:D.object({token:D.string({description:"The token to verify the email"}),callbackURL:D.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new Y("UNAUTHORIZED",{message:d})}a(t,"redirectOnError");let{token:r}=e.query,o;try{o=await Jt(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return e.context.logger.error("Failed to verify email",d),t("invalid_token")}let i=D.object({email:D.string().email(),updateTo:D.string().optional()}).parse(o.payload),c=await e.context.internalAdapter.findUserByEmail(i.email);if(!c)return t("user_not_found");if(i.updateTo){let d=await F(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let s=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),p=await M(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:s,url:`${e.context.baseURL}/verify-email?token=${p}`,token:p},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await F(e)){let s=await e.context.internalAdapter.createSession(c.user.id,e.request);if(!s)throw new Y("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await U(e,{session:s,user:c.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function ie(e,{userInfo:t,account:r,callbackURL:o}){let n=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(s=>{throw x.error(`Better auth was unable to query your database.
Error: `,s),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=n?.user,c=!i;if(n){let s=n.accounts.find(p=>p.providerId===r.providerId);if(s){let p=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([u,y])=>y!==void 0));Object.keys(p).length>0&&await e.context.internalAdapter.updateAccount(s.id,p)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return ue&&x.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:n.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(y){return x.error("Unable to link account",y),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(s=>s?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let s=await M(e.context.secret,i.email),p=`${e.context.baseURL}/verify-email?token=${s}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:p,token:s},e.request)}}catch(s){return s instanceof Ge?{error:s.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(i.id,e.request);return d?{data:{session:d,user:i},error:null,isRegister:c}:{error:"unable to create session",data:null,isRegister:!1}}a(ie,"handleOAuthUserInfo");var er=m("/sign-in/social",{method:"POST",query:k.object({currentURL:k.string().optional()}).optional(),body:k.object({callbackURL:k.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:k.string().optional(),errorCallbackURL:k.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:Me,disableRedirect:k.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:k.optional(k.object({token:k.string({description:"ID token from the provider"}),nonce:k.string({description:"Nonce used to generate the token"}).optional(),accessToken:k.string({description:"Access token from the provider"}).optional(),refreshToken:k.string({description:"Refresh token from the provider"}).optional(),expiresAt:k.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new _("NOT_FOUND",{message:l.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new _("NOT_FOUND",{message:l.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:c}=e.body.idToken;if(!await t.verifyIdToken(i,c))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:l.INVALID_TOKEN});let s=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!s||!s?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:l.FAILED_TO_GET_USER_INFO});if(!s.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:l.USER_EMAIL_NOT_FOUND});let p=await ie(e,{userInfo:{email:s.user.email,id:s.user.id,name:s.user.name||"",image:s.user.image,emailVerified:s.user.emailVerified||!1},account:{providerId:t.id,accountId:s.user.id,accessToken:e.body.idToken.accessToken}});if(p.error)throw new _("UNAUTHORIZED",{message:p.error});return await U(e,p.data),e.json({token:p.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await se(e),n=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:n.toString(),redirect:!e.body.disableRedirect})}),tr=m("/sign-in/email",{method:"POST",body:k.object({email:k.string({description:"Email of the user"}),password:k.string({description:"Password of the user"}),callbackURL:k.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:k.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new _("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!k.string().email().safeParse(t).success)throw new _("BAD_REQUEST",{message:l.INVALID_EMAIL});let n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new _("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});let i=n.accounts.find(p=>p.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new _("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});let c=i?.password;if(!c)throw e.context.logger.error("Password not found",{email:t}),new _("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:c,password:r}))throw e.context.logger.error("Invalid password"),new _("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!n.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new _("UNAUTHORIZED",{message:l.EMAIL_NOT_VERIFIED});let p=await M(e.context.secret,n.user.email),u=`${e.context.baseURL}/verify-email?token=${p}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:n.user,url:u,token:p},e.request),e.context.logger.error("Email not verified",{email:t}),new _("FORBIDDEN",{message:l.EMAIL_NOT_VERIFIED})}let s=await e.context.internalAdapter.createSession(n.user.id,e.headers,e.body.rememberMe===!1);if(!s)throw e.context.logger.error("Failed to create session"),new _("UNAUTHORIZED",{message:l.FAILED_TO_CREATE_SESSION});return await U(e,{session:s,user:n.user},e.body.rememberMe===!1),e.json({user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as X}from"zod";var ae=X.object({code:X.string().optional(),error:X.string().optional(),error_description:X.string().optional(),state:X.string().optional()}),rr=m("/callback/:id",{method:["GET","POST"],body:ae.optional(),query:ae.optional(),metadata:K},async e=>{let t;try{if(e.method==="GET")t=ae.parse(e.query);else if(e.method==="POST")t=ae.parse(e.body);else throw new Error("Unsupported method")}catch(S){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",S),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:n,error_description:i}=t;if(!n)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${i}`);let c=e.context.socialProviders.find(S=>S.id===e.params.id);if(!c)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:s,link:p,errorURL:u,newUserURL:y}=await _e(e),h;try{h=await c.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${c.id}`})}catch(S){throw e.context.logger.error("",S),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let w=await c.getUserInfo(h).then(S=>S?.user);function f(S){let v=u||s||`${e.context.baseURL}/error`;throw v.includes("?")?v=`${v}&error=${S}`:v=`${v}?error=${S}`,e.redirect(v)}if(a(f,"redirectOnError"),!w)return e.context.logger.error("Unable to get user info"),f("unable_to_get_user_info");if(!w.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),f("email_not_found");if(!s)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(p){if(p.email!==w.email.toLowerCase())return f("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:p.userId,providerId:c.id,accountId:w.id}))return f("unable_to_link_account");let v;try{v=s.toString()}catch{v=s}throw e.redirect(v)}let A=await ie(e,{userInfo:{...w,email:w.email,name:w.name||w.email},account:{providerId:c.id,accountId:w.id,...h,scope:h.scopes?.join(",")},callbackURL:s});if(A.error)return e.context.logger.error(A.error.split(" ").join("_")),f(A.error.split(" ").join("_"));let{session:W,user:C}=A.data;await U(e,{session:W,user:C});let q;try{q=(A.isRegister&&y||s).toString()}catch{q=A.isRegister&&y||s}throw e.redirect(q)});import"zod";import{APIError as or}from"better-call";var nr=m("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw j(e),new or("BAD_REQUEST",{message:l.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),j(e),e.json({success:!0})});import{z as L}from"zod";import{APIError as ee}from"better-call";function We(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}a(We,"redirectError");function sr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}a(sr,"redirectCallback");var ir=m("/forget-password",{method:"POST",body:L.object({email:L.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:L.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ee("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let n=60*60*1,i=z(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||n,"sec"),c=Z(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${c}`,expiresAt:i});let d=`${e.context.baseURL}/reset-password/${c}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:d,token:c},e.request),e.json({status:!0})}),ar=m("/reset-password/:token",{method:"GET",query:L.object({callbackURL:L.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(We(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(We(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(sr(e.context,r,{token:t}))}),cr=m("/reset-password",{query:L.optional(L.object({token:L.string().optional(),currentURL:L.string().optional()})),method:"POST",body:L.object({newPassword:L.string({description:"The new password to set"}),token:L.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new ee("BAD_REQUEST",{message:l.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,n=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new ee("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});if(r.length>n)throw new ee("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,c=await e.context.internalAdapter.findVerificationValue(i);if(!c||c.expiresAt<new Date)throw new ee("BAD_REQUEST",{message:l.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(c.id);let d=c.value,s=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(y=>y.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,s),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:s,accountId:d}),e.json({status:!0}))});import{z as T}from"zod";import{APIError as E}from"better-call";import{z as g}from"zod";import{APIError as Pa}from"better-call";var Ia=g.object({id:g.string(),providerId:g.string(),accountId:g.string(),userId:g.string(),accessToken:g.string().nullish(),refreshToken:g.string().nullish(),idToken:g.string().nullish(),accessTokenExpiresAt:g.date().nullish(),refreshTokenExpiresAt:g.date().nullish(),scope:g.string().nullish(),password:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),va=g.object({id:g.string(),email:g.string().transform(e=>e.toLowerCase()),emailVerified:g.boolean().default(!1),name:g.string(),image:g.string().nullish(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date)}),La=g.object({id:g.string(),userId:g.string(),expiresAt:g.date(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),token:g.string(),ipAddress:g.string().nullish(),userAgent:g.string().nullish()}),xa=g.object({id:g.string(),value:g.string(),createdAt:g.date().default(()=>new Date),updatedAt:g.date().default(()=>new Date),expiresAt:g.date(),identifier:g.string()});function Ke(e,t){if(!t)return e;for(let r in t){let o=t[r]?.modelName;o&&(e[r].modelName=o);for(let n in e[r].fields){let i=t[r]?.fields?.[n];i&&(e[r].fields[n].fieldName=i)}}return e}a(Ke,"mergeSchema");var pr=m("/change-password",{method:"POST",body:T.object({newPassword:T.string({description:"The new password to set"}),currentPassword:T.string({description:"The current password"}),revokeOtherSessions:T.boolean({description:"Revoke all other sessions"}).optional()}),use:[O],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,n=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new E("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});let c=e.context.password.config.maxPasswordLength;if(t.length>c)throw e.context.logger.error("Password is too long"),new E("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let s=(await e.context.internalAdapter.findAccounts(n.user.id)).find(h=>h.providerId==="credential"&&h.password);if(!s||!s.password)throw new E("BAD_REQUEST",{message:l.CREDENTIAL_ACCOUNT_NOT_FOUND});let p=await e.context.password.hash(t);if(!await e.context.password.verify({hash:s.password,password:r}))throw new E("BAD_REQUEST",{message:l.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(s.id,{password:p});let y=null;if(o){await e.context.internalAdapter.deleteSessions(n.user.id);let h=await e.context.internalAdapter.createSession(n.user.id,e.headers);if(!h)throw new E("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_GET_SESSION});await U(e,{session:h,user:n.user}),y=h.token}return e.json({token:y})}),ur=m("/set-password",{method:"POST",body:T.object({newPassword:T.string()}),metadata:{SERVER_ONLY:!0},use:[O]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new E("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new E("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let c=(await e.context.internalAdapter.findAccounts(r.user.id)).find(s=>s.providerId==="credential"&&s.password),d=await e.context.password.hash(t);if(!c)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new E("BAD_REQUEST",{message:"user already has a password"})}),lr=m("/delete-user",{method:"POST",use:[O],body:T.object({callbackURL:T.string().optional(),password:T.string().optional(),token:T.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new E("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!i||!i.password)throw new E("BAD_REQUEST",{message:l.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new E("BAD_REQUEST",{message:l.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let n=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-n>i)throw new E("BAD_REQUEST",{message:l.SESSION_EXPIRED})}if(e.body.token)return await Qe({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let n=H(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${n}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${n}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:n},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),j(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Qe=m("/delete-user/callback",{method:"GET",query:T.object({token:T.string(),callbackURL:T.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new E("NOT_FOUND");let t=await F(e);if(!t)throw new E("NOT_FOUND",{message:l.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new E("NOT_FOUND",{message:l.INVALID_TOKEN});if(r.value!==t.user.id)throw new E("NOT_FOUND",{message:l.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),j(e);let n=e.context.options.user.deleteUser?.afterDelete;if(n&&await n(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),mr=m("/change-email",{method:"POST",query:T.object({currentURL:T.string().optional()}).optional(),body:T.object({newEmail:T.string({description:"The new email to set"}).email(),callbackURL:T.string({description:"The URL to redirect to after email verification"}).optional()}),use:[O],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new E("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new E("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new E("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let n=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new E("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await M(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var fr=a((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),gr=m("/error",{method:"GET",metadata:{...K,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(fr(t),{headers:{"Content-Type":"text/html"}})});var hr=m("/ok",{method:"GET",metadata:{...K,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as sc}from"zod";import{APIError as lc}from"better-call";import{z as te}from"zod";import{APIError as Je}from"better-call";var yr=m("/list-accounts",{method:"GET",use:[O],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),wr=m("/link-social",{method:"POST",requireHeaders:!0,query:te.object({currentURL:te.string().optional()}).optional(),body:te.object({callbackURL:te.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:te.enum(ge,{description:"The OAuth2 provider to use"})}),use:[O],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new Je("BAD_REQUEST",{message:l.SOCIAL_ACCOUNT_ALREADY_LINKED});let n=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!n)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Je("NOT_FOUND",{message:l.PROVIDER_NOT_FOUND});let i=await se(e,{userId:t.user.id,email:t.user.email}),c=await n.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${n.id}`});return e.json({url:c.toString(),redirect:!0})});import"defu";import{APIError as Ge}from"better-call";import{WebAuthnError as Rr,startAuthentication as kr,startRegistration as Er}from"@simplewebauthn/browser";import{createFetch as Fd}from"@better-fetch/fetch";import"nanostores";import"@better-fetch/fetch";import{atom as Ud}from"nanostores";import"@better-fetch/fetch";import{atom as br,onMount as Ar}from"nanostores";var ye=a((e,t,r,o)=>{let n=br({data:null,error:null,isPending:!0,isRefetching:!1}),i=a(()=>{let d=typeof o=="function"?o({data:n.get().data,error:n.get().error,isPending:n.get().isPending}):o;return r(t,{...d,async onSuccess(s){typeof window<"u"&&n.set({data:s.data,error:null,isPending:!1,isRefetching:!1}),await d?.onSuccess?.(s)},async onError(s){n.set({error:s.error,data:null,isPending:!1,isRefetching:!1}),await d?.onError?.(s)},async onRequest(s){let p=n.get();n.set({isPending:p.data===null,data:p.data,error:null,isRefetching:!0}),await d?.onRequest?.(s)}})},"fn");e=Array.isArray(e)?e:[e];let c=!1;for(let d of e)d.subscribe(()=>{c?i():Ar(n,()=>(i(),c=!0,()=>{n.off(),d.off()}))});return n},"useAuthQuery");var Ld={true:!0,false:!1,null:null,undefined:void 0,nan:Number.NaN,infinity:Number.POSITIVE_INFINITY,"-infinity":Number.NEGATIVE_INFINITY};import{atom as Tr}from"nanostores";var Or=a((e,{$listPasskeys:t})=>({signIn:{passkey:a(async(n,i)=>{let c=await e("/passkey/generate-authenticate-options",{method:"POST",body:{email:n?.email}});if(!c.data)return c;try{let d=await kr(c.data,n?.autoFill||!1),s=await e("/passkey/verify-authentication",{body:{response:d},...n?.fetchOptions,...i,method:"POST"});if(!s.data)return s}catch{return{data:null,error:{message:"auth cancelled",status:400,statusText:"BAD_REQUEST"}}}},"signInPasskey")},passkey:{addPasskey:a(async(n,i)=>{let c=await e("/passkey/generate-register-options",{method:"GET"});if(!c.data)return c;try{let d=await Er(c.data),s=await e("/passkey/verify-registration",{...n?.fetchOptions,...i,body:{response:d,name:n?.name},method:"POST"});if(!s.data)return s;t.set(Math.random())}catch(d){return d instanceof Rr?d.code==="ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED"?{data:null,error:{message:"previously registered",status:400,statusText:"BAD_REQUEST"}}:d.code==="ERROR_CEREMONY_ABORTED"?{data:null,error:{message:"registration cancelled",status:400,statusText:"BAD_REQUEST"}}:{data:null,error:{message:d.message,status:400,statusText:"BAD_REQUEST"}}:{data:null,error:{message:d instanceof Error?d.message:"unknown error",status:500,statusText:"INTERNAL_SERVER_ERROR"}}}},"registerPasskey")},$Infer:{}}),"getPasskeyActions"),mp=a(()=>{let e=Tr();return{id:"passkey",$InferServerPlugin:{},getActions:a(t=>Or(t,{$listPasskeys:e}),"getActions"),getAtoms(t){return{listPasskeys:ye(e,"/passkey/list-user-passkeys",t,{method:"GET"}),$listPasskeys:e}},pathMethods:{"/passkey/register":"POST","/passkey/authenticate":"POST"},atomListeners:[{matcher(t){return t==="/passkey/verify-registration"||t==="/passkey/delete-passkey"||t==="/passkey/update-passkey"},signal:"_listPasskeys"}]}},"passkeyClient");var Up=a(e=>{let t=oe.BETTER_AUTH_URL,r=e?.rpID||t?.replace("http://","").replace("https://","").split(":")[0]||"localhost";if(!r)throw new N("passkey rpID not found. Please provide a rpID in the options or set the BETTER_AUTH_URL environment variable.");let o={origin:null,...e,rpID:r,advanced:{webAuthnChallengeCookie:"better-auth-passkey",...e?.advanced}},n=new Date(Date.now()+1e3*60*(e?.age||5)),i=new Date,c=Math.floor((n.getTime()-i.getTime())/1e3),d={CHALLENGE_NOT_FOUND:"Challenge not found",YOU_ARE_NOT_ALLOWED_TO_REGISTER_THIS_PASSKEY:"You are not allowed to register this passkey",FAILED_TO_VERIFY_REGISTRATION:"Failed to verify registration",PASSKEY_NOT_FOUND:"Passkey not found",AUTHENTICATION_FAILED:"Authentication failed",UNABLE_TO_CREATE_SESSION:"Unable to create session",FAILED_TO_UPDATE_PASSKEY:"Failed to update passkey"};return{id:"passkey",endpoints:{generatePasskeyRegistrationOptions:m("/passkey/generate-register-options",{method:"GET",use:[he],metadata:{client:!1,openapi:{description:"Generate registration options for a new passkey",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{challenge:{type:"string"},rp:{type:"object",properties:{name:{type:"string"},id:{type:"string"}}},user:{type:"object",properties:{id:{type:"string"},name:{type:"string"},displayName:{type:"string"}}},pubKeyCredParams:{type:"array",items:{type:"object",properties:{type:{type:"string"},alg:{type:"number"}}}},timeout:{type:"number"},excludeCredentials:{type:"array",items:{type:"object",properties:{id:{type:"string"},type:{type:"string"},transports:{type:"array",items:{type:"string"}}}}},authenticatorSelection:{type:"object",properties:{authenticatorAttachment:{type:"string"},requireResidentKey:{type:"boolean"},userVerification:{type:"string"}}},attestation:{type:"string"},extensions:{type:"object"}}}}}}}}}},async s=>{let p=s.context.session,u=await s.context.adapter.findMany({model:"passkey",where:[{field:"userId",value:p.user.id}]}),y=new Uint8Array(Buffer.from(H(32,"a-z","0-9"))),h;h=await Sr({rpName:o.rpName||s.context.appName,rpID:o.rpID,userID:y,userName:p.user.email||p.user.id,attestationType:o.attestation||"none",excludeCredentials:u.map(f=>({id:f.credentialID,transports:f.transports?.split(",")})),authenticatorSelection:{residentKey:"preferred",userVerification:"preferred",authenticatorAttachment:"platform"}});let w=Z(32);return await s.setSignedCookie(o.advanced.webAuthnChallengeCookie,w,s.context.secret,{secure:!0,httpOnly:!0,sameSite:"lax",maxAge:c}),await s.context.internalAdapter.createVerificationValue({identifier:w,value:JSON.stringify({expectedChallenge:h.challenge,userData:{id:p.user.id}}),expiresAt:n}),s.json(h,{status:200})}),generatePasskeyAuthenticationOptions:m("/passkey/generate-authenticate-options",{method:"POST",body:I.object({email:I.string({description:"The email address of the user"}).optional()}).optional(),metadata:{openapi:{description:"Generate authentication options for a passkey",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{challenge:{type:"string"},rp:{type:"object",properties:{name:{type:"string"},id:{type:"string"}}},user:{type:"object",properties:{id:{type:"string"},name:{type:"string"},displayName:{type:"string"}}},timeout:{type:"number"},allowCredentials:{type:"array",items:{type:"object",properties:{id:{type:"string"},type:{type:"string"},transports:{type:"array",items:{type:"string"}}}}},userVerification:{type:"string"},authenticatorSelection:{type:"object",properties:{authenticatorAttachment:{type:"string"},requireResidentKey:{type:"boolean"},userVerification:{type:"string"}}},extensions:{type:"object"}}}}}}}}}},async s=>{let p=await F(s),u=[];p&&(u=await s.context.adapter.findMany({model:"passkey",where:[{field:"userId",value:p.user.id}]}));let y=await _r({rpID:o.rpID,userVerification:o.authenticatorSelection?.userVerification||"preferred",...u.length?{allowCredentials:u.map(f=>({id:f.credentialID,transports:f.transports?.split(",")}))}:{}}),h={expectedChallenge:y.challenge,userData:{id:p?.user.id||""}},w=Z(32);return await s.setSignedCookie(o.advanced.webAuthnChallengeCookie,w,s.context.secret,{secure:!0,httpOnly:!0,sameSite:"lax",maxAge:c}),await s.context.internalAdapter.createVerificationValue({identifier:w,value:JSON.stringify(h),expiresAt:n}),s.json(y,{status:200})}),verifyPasskeyRegistration:m("/passkey/verify-registration",{method:"POST",body:I.object({response:I.any({description:"The response from the authenticator"}),name:I.string({description:"Name of the passkey"}).optional()}),use:[he],metadata:{openapi:{description:"Verify registration of a new passkey",responses:{200:{description:"Success",content:{"application/json":{schema:{$ref:"#/components/schemas/Passkey"}}}},400:{description:"Bad request"}}}}},async s=>{let p=e?.origin||s.headers?.get("origin")||"";if(!p)return s.json(null,{status:400});let u=s.body.response,y=await s.getSignedCookie(o.advanced.webAuthnChallengeCookie,s.context.secret);if(!y)throw new P("BAD_REQUEST",{message:d.CHALLENGE_NOT_FOUND});let h=await s.context.internalAdapter.findVerificationValue(y);if(!h)return s.json(null,{status:400});let{expectedChallenge:w,userData:f}=JSON.parse(h.value);if(f.id!==s.context.session.user.id)throw new P("UNAUTHORIZED",{message:d.YOU_ARE_NOT_ALLOWED_TO_REGISTER_THIS_PASSKEY});try{let A=await Pr({response:u,expectedChallenge:w,expectedOrigin:p,expectedRPID:e?.rpID}),{verified:W,registrationInfo:C}=A;if(!W||!C)return s.json(null,{status:400});let{credentialID:q,credentialPublicKey:S,counter:v,credentialDeviceType:we,credentialBackedUp:Ze}=C,Ye=Buffer.from(S).toString("base64"),Xe={name:e?.name||s.body.name,userId:f.id,id:s.context.generateId({model:"passkey"}),credentialID:q,publicKey:Ye,counter:v,deviceType:we,transports:u.response.transports.join(","),backedUp:Ze,createdAt:new Date},et=await s.context.adapter.create({model:"passkey",data:Xe});return s.json(et,{status:200})}catch(A){throw console.log(A),new P("INTERNAL_SERVER_ERROR",{message:d.FAILED_TO_VERIFY_REGISTRATION})}}),verifyPasskeyAuthentication:m("/passkey/verify-authentication",{method:"POST",body:I.object({response:I.record(I.any())}),metadata:{openapi:{description:"Verify authentication of a passkey",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{$ref:"#/components/schemas/Session"},user:{$ref:"#/components/schemas/User"}}}}}}}},$Infer:{body:{}}}},async s=>{let p=e?.origin||s.headers?.get("origin")||"";if(!p)throw new P("BAD_REQUEST",{message:"origin missing"});let u=s.body.response,y=await s.getSignedCookie(o.advanced.webAuthnChallengeCookie,s.context.secret);if(!y)throw new P("BAD_REQUEST",{message:d.CHALLENGE_NOT_FOUND});let h=await s.context.internalAdapter.findVerificationValue(y);if(!h)throw new P("BAD_REQUEST",{message:d.CHALLENGE_NOT_FOUND});let{expectedChallenge:w}=JSON.parse(h.value),f=await s.context.adapter.findOne({model:"passkey",where:[{field:"credentialID",value:u.id}]});if(!f)throw new P("UNAUTHORIZED",{message:d.PASSKEY_NOT_FOUND});try{let A=await Ur({response:u,expectedChallenge:w,expectedOrigin:p,expectedRPID:o.rpID,authenticator:{credentialID:f.credentialID,credentialPublicKey:new Uint8Array(Buffer.from(f.publicKey,"base64")),counter:f.counter,transports:f.transports?.split(",")},requireUserVerification:o.authenticatorSelection?.userVerification==="required"}),{verified:W}=A;if(!W)throw new P("UNAUTHORIZED",{message:d.AUTHENTICATION_FAILED});await s.context.adapter.update({model:"passkey",where:[{field:"id",value:f.id}],update:{counter:A.authenticationInfo.newCounter}});let C=await s.context.internalAdapter.createSession(f.userId,s.request);if(!C)throw new P("INTERNAL_SERVER_ERROR",{message:d.UNABLE_TO_CREATE_SESSION});let q=await s.context.internalAdapter.findUserById(f.userId);if(!q)throw new P("INTERNAL_SERVER_ERROR",{message:"User not found"});return await U(s,{session:C,user:q}),s.json({session:C},{status:200})}catch(A){throw s.context.logger.error("Failed to verify authentication",A),new P("BAD_REQUEST",{message:d.AUTHENTICATION_FAILED})}}),listPasskeys:m("/passkey/list-user-passkeys",{method:"GET",use:[O]},async s=>{let p=await s.context.adapter.findMany({model:"passkey",where:[{field:"userId",value:s.context.session.user.id}]});return s.json(p,{status:200})}),deletePasskey:m("/passkey/delete-passkey",{method:"POST",body:I.object({id:I.string()}),use:[O]},async s=>(await s.context.adapter.delete({model:"passkey",where:[{field:"id",value:s.body.id}]}),s.json(null,{status:200}))),updatePasskey:m("/passkey/update-passkey",{method:"POST",body:I.object({id:I.string(),name:I.string()}),use:[O]},async s=>{let p=await s.context.adapter.findOne({model:"passkey",where:[{field:"id",value:s.body.id}]});if(!p)throw new P("NOT_FOUND",{message:d.PASSKEY_NOT_FOUND});if(p.userId!==s.context.session.user.id)throw new P("UNAUTHORIZED",{message:d.YOU_ARE_NOT_ALLOWED_TO_REGISTER_THIS_PASSKEY});let u=await s.context.adapter.update({model:"passkey",where:[{field:"id",value:s.body.id}],update:{name:s.body.name}});if(!u)throw new P("INTERNAL_SERVER_ERROR",{message:d.FAILED_TO_UPDATE_PASSKEY});return s.json({passkey:u},{status:200})})},schema:Ke(Ir,e?.schema),$ERROR_CODES:d}},"passkey"),Ir={passkey:{fields:{name:{type:"string",required:!1},publicKey:{type:"string",required:!0},userId:{type:"string",references:{model:"user",field:"id"},required:!0},credentialID:{type:"string",required:!0},counter:{type:"number",required:!0},deviceType:{type:"string",required:!0},backedUp:{type:"boolean",required:!0},transports:{type:"string",required:!1},createdAt:{type:"date",required:!1}}}};export{Or as getPasskeyActions,Up as passkey,mp as passkeyClient};
