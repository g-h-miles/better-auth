var ct=Object.defineProperty;var a=(e,t)=>ct(e,"name",{value:t,configurable:!0});import{SignJWT as Sr}from"jose";import{z as v}from"zod";import{APIError as Xd,createRouter as ec,getCookie as tc,getSignedCookie as rc,setCookie as oc,setSignedCookie as ic}from"better-call";import{APIError as ht}from"better-call";import{createEndpointCreator as lt,createMiddleware as Re,createMiddlewareCreator as ut}from"better-call";var Ue=Re(async()=>({})),J=ut({use:[Ue,Re(async()=>({}))]}),f=lt({use:[Ue]});function ce(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}a(ce,"escapeRegExpChar");function pt(e){let t="";for(let r=0;r<e.length;r++)t+=ce(e[r]);return t}a(pt,"escapeRegExpString");function Ee(e,t=!0){if(Array.isArray(e))return`(?:${e.map(u=>`^${Ee(u,t)}$`).join("|")})`;let r="",o="",i=".";t===!0?(r="/",o="[/\\\\]",i="[^/\\\\]"):t&&(r=t,o=pt(r),o.length>1?(o=`(?:${o})`,i=`((?!${o}).)`):i=`[^${o}]`);let n=t?`${o}+?`:"",s=t?`${o}*?`:"",c=t?e.split(r):[e],d="";for(let l=0;l<c.length;l++){let u=c[l],y=c[l+1],g="";if(!(!u&&l>0)){if(t&&(l===c.length-1?g=s:y!=="**"?g=n:g=""),t&&u==="**"){g&&(d+=l===0?"":g,d+=`(?:${i}*?${g})*?`);continue}for(let A=0;A<u.length;A++){let h=u[A];h==="\\"?A<u.length-1&&(d+=ce(u[A+1]),A++):h==="?"?d+=i:h==="*"?d+=`${i}*?`:d+=ce(h)}d+=g}}return d}a(Ee,"transform");function mt(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}a(mt,"isMatch");function le(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Ee(e,t.separator),o=new RegExp(`^${r}$`,t.flags),i=mt.bind(null,o);return i.options=t,i.pattern=e,i.regexp=o,i}a(le,"wildcardMatch");var ie=Object.create(null),K=a(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ie:globalThis),"_getEnv"),Te=new Proxy(ie,{get(e,t){return K()[t]??ie[t]},has(e,t){let r=K();return t in r||t in ie},set(e,t,r){let o=K(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=K(!0);return delete r[t],!0},ownKeys(){let e=K(!0);return Object.keys(e)}});function ft(e){return e?e!=="false":!1}a(ft,"toBoolean");var ue=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var pe=ue==="dev"||ue==="development",gt=ue==="test"||ft(Te.TEST);var F=class extends Error{static{a(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function Se(e){try{return new URL(e).origin}catch{return null}}a(Se,"getOrigin");function Oe(e){return e.includes("://")?new URL(e).host:e}a(Oe,"getHost");var wt=J(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,s=t?.redirectTo,c=r?.currentURL,d=t?.errorCallbackURL,l=t?.newUserCallbackURL,u=o.trustedOrigins,y=e.headers?.has("cookie"),g=a((h,p)=>h.startsWith("/")?!1:p.includes("*")?le(p)(Oe(h)):h.startsWith(p),"matchesPattern"),A=a((h,p)=>{if(!h)return;if(!u.some(V=>g(h,V)||h?.startsWith("/")&&p!=="origin"&&!h.includes(":")))throw e.context.logger.error(`Invalid ${p}: ${h}`),e.context.logger.info(`If it's a valid URL, please add ${h} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${u}`),new ht("FORBIDDEN",{message:`Invalid ${p}`})},"validateURL");y&&!e.context.options.advanced?.disableCSRFCheck&&A(i,"origin"),n&&A(n,"callbackURL"),s&&A(s,"redirectURL"),c&&A(c,"currentURL"),d&&A(d,"errorCallbackURL"),l&&A(s,"newUserCallbackURL")});import{APIError as O}from"better-call";import{z as R}from"zod";var G=a((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");import{base64Url as yt}from"@better-auth/utils/base64";import{createHMAC as bt}from"@better-auth/utils/hmac";function Ie(e){let t=new Map;return e.split(", ").forEach(o=>{let i=o.split(";").map(y=>y.trim()),[n,...s]=i,[c,...d]=n.split("="),l=d.join("=");if(!c||l===void 0)return;let u={value:l};s.forEach(y=>{let[g,...A]=y.split("="),h=A.join("="),p=g.trim().toLowerCase();switch(p){case"max-age":u["max-age"]=h?parseInt(h.trim(),10):void 0;break;case"expires":u.expires=h?new Date(h.trim()):void 0;break;case"domain":u.domain=h?h.trim():void 0;break;case"path":u.path=h?h.trim():void 0;break;case"secure":u.secure=!0;break;case"httponly":u.httponly=!0;break;case"samesite":u.samesite=h?h.trim().toLowerCase():void 0;break;default:u[p]=h?h.trim():!0;break}}),t.set(c,u)}),t}a(Ie,"parseSetCookieHeader");async function me(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=yt.encode(JSON.stringify({session:t,expiresAt:G(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await bt("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new F("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}a(me,"setCookieCache");async function P(e,t,r,o){let i=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...i,maxAge:n,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await me(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}a(P,"setSessionCookie");function $(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}a($,"deleteSessionCookie");import{betterFetch as Ut}from"@better-fetch/fetch";import{APIError as Et}from"better-call";import{decodeJwt as Tt,decodeProtectedHeader as St,importJWK as Ot,jwtVerify as It}from"jose";import{createHash as At}from"@better-auth/utils/hash";import{base64Url as _t}from"@better-auth/utils/base64";async function ve(e){let t=await At("SHA-256").digest(e);return _t.encode(new Uint8Array(t),{padding:!1})}a(ve,"generateCodeChallenge");function ne(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?G(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}a(ne,"getOAuth2Tokens");async function k({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:i,scopes:n,claims:s,redirectURI:c,duration:d}){let l=new URL(r);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",t.clientId),l.searchParams.set("state",o),l.searchParams.set("scope",n.join(" ")),l.searchParams.set("redirect_uri",t.redirectURI||c),i){let u=await ve(i);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",u)}if(s){let u=s.reduce((y,g)=>(y[g]=null,y),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return d&&l.searchParams.set("duration",d),l}a(k,"createAuthorizationURL");import{betterFetch as kt}from"@better-fetch/fetch";import{jwtVerify as To}from"jose";async function _({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:i,authentication:n}){let s=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(s.set("grant_type","authorization_code"),s.set("code",e),t&&s.set("code_verifier",t),s.set("redirect_uri",r),n==="basic"){let y=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${y}`}else s.set("client_id",o.clientId),s.set("client_secret",o.clientSecret);let{data:d,error:l}=await kt(i,{method:"POST",body:s,headers:c});if(l)throw l;return ne(d)}a(_,"validateAuthorizationCode");import{z as M}from"zod";import{APIError as Le}from"better-call";import{createHash as Ho}from"@better-auth/utils/hash";import{xchacha20poly1305 as Go}from"@noble/ciphers/chacha";import{bytesToHex as Qo,hexToBytes as Wo,utf8ToBytes as Jo}from"@noble/ciphers/utils";import{managedNonce as Yo}from"@noble/ciphers/webcrypto";import{scryptAsync as Do}from"@noble/hashes/scrypt";import{getRandomValues as No}from"uncrypto";import{hex as Vo}from"@better-auth/utils/hex";import{createRandomStringGenerator as Rt}from"@better-auth/utils/random";var S=Rt("a-z","0-9","A-Z","-_");async function se(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Se(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Le("BAD_REQUEST",{message:"callbackURL is required"});let o=S(128),i=S(32),n=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),s=new Date;s.setMinutes(s.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:n,identifier:i,expiresAt:s});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Le("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}a(se,"generateState");async function xe(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=M.object({callbackURL:M.string(),codeVerifier:M.string(),errorURL:M.string().optional(),newUserURL:M.string().optional(),expiresAt:M.number(),link:M.object({email:M.string(),userId:M.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}a(xe,"parseState");var Pe=a(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:i}){let n=o||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:a(async({code:r,codeVerifier:o,redirectURI:i})=>_({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let i=St(r),{kid:n,alg:s}=i;if(!n||!s)return!1;let c=await vt(n),{payload:d}=await It(r,c,{algorithms:[s],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{d[l]!==void 0&&(d[l]=!!d[l])}),o&&d.nonce!==o?!1:!!d},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=Tt(r.idToken);if(!o)return null;let i=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:i,emailVerified:!1,email:o.email,...n},data:o}}}},"apple"),vt=a(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await Ut(`${t}${r}`);if(!o?.keys)throw new Et("BAD_REQUEST",{message:"Keys not found"});let i=o.keys.find(n=>n.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await Ot(i,i.alg)},"getApplePublicKey");import{betterFetch as Lt}from"@better-fetch/fetch";var De=a(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>_({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Lt("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...i},data:r}}}),"discord");import{betterFetch as xt}from"@better-fetch/fetch";var Ce=a(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["email","public_profile"];return e.scope&&i.push(...e.scope),await k({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:t,redirectURI:o})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>_({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await xt("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...i},data:r}}}),"facebook");import{betterFetch as Ne}from"@better-fetch/fetch";var je=a(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:i,redirectURI:n}){let s=o||["user:email"];return e.scope&&s.push(...e.scope),k({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:s,state:r,redirectURI:n})},validateAuthorizationCode:a(async({code:r,redirectURI:o})=>_({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await Ne("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=!1,{data:s}=await Ne("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});s&&(o.email=(s.find(d=>d.primary)??s[0])?.email,n=s.find(d=>d.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:n,...c},data:o}}}},"github");var fe=["info","success","warn","error","debug"];function Pt(e,t){return fe.indexOf(t)<=fe.indexOf(e)}a(Pt,"shouldPublishLog");var B={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Dt={info:B.fg.blue,success:B.fg.green,warn:B.fg.yellow,error:B.fg.red,debug:B.fg.magenta},Ct=a((e,t)=>{let r=new Date().toISOString();return`${B.dim}${r}${B.reset} ${Dt[e]}${e.toUpperCase()}${B.reset} ${B.bright}Better Auth${B.reset} ${t}`},"formatMessage"),Nt=a(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=a((i,n,s=[])=>{if(!t||!Pt(r,i))return;let c=Ct(i,n);if(!e||typeof e.log!="function"){i==="error"?console.error(c,...s):i==="warn"?console.warn(c,...s):console.log(c,...s);return}e.log(i==="success"?"info":i,c,...s)},"LogFunc");return Object.fromEntries(fe.map(i=>[i,(...[n,...s])=>o(i,n,s)]))},"createLogger"),C=Nt();import{betterFetch as jt}from"@better-fetch/fetch";import{decodeJwt as Vt}from"jose";var Ve=a(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw C.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new F("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new F("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let s=await k({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:o,redirectURI:i});return e.accessType&&s.searchParams.set("access_type",e.accessType),e.prompt&&s.searchParams.set("prompt",e.prompt),s},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>_({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:i}=await jt(o);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=Vt(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");import{betterFetch as $t}from"@better-fetch/fetch";import{decodeJwt as Bt}from"jose";var $e=a(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let n=i.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),k({id:"microsoft",options:e,authorizationEndpoint:r,state:i.state,codeVerifier:i.codeVerifier,scopes:n,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:n,redirectURI:s}){return _({code:i,codeVerifier:n,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:o})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let n=Bt(i.idToken),s=e.profilePhotoSize||48;await $t(`https://graph.microsoft.com/v1.0/me/photos/${s}x${s}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(d){if(!(e.disableProfilePhoto||!d.response.ok))try{let u=await d.response.clone().arrayBuffer(),y=Buffer.from(u).toString("base64");n.picture=`data:image/jpeg;base64, ${y}`}catch(l){C.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let c=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...c},data:n}}}},"microsoft");import{betterFetch as qt}from"@better-fetch/fetch";var Be=a(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),k({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:o,redirectURI:i})},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>_({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await qt("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...i},data:r}}}),"spotify");var W={isAction:!1};import{createRandomStringGenerator as Mt}from"@better-auth/utils/random";var qe=a(e=>Mt("a-z","A-Z","0-9")(e||32),"generateId");import{decodeJwt as zt}from"jose";var Me=a(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["user:read:email","openid"];return e.scope&&i.push(...e.scope),k({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>_({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return C.error("No idToken found in token"),null;let o=zt(r),i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...i},data:o}}}),"twitch");import{betterFetch as Ht}from"@better-fetch/fetch";var ze=a(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),k({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>_({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Ht("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...i},data:r}}}),"twitter");import{betterFetch as Ft}from"@better-fetch/fetch";var He=a(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:a(async({state:r,scopes:o,codeVerifier:i,redirectURI:n})=>{let s=o||["account_info.read"];return e.scope&&s.push(...e.scope),await k({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:s,state:r,redirectURI:n,codeVerifier:i})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:r,codeVerifier:o,redirectURI:i})=>await _({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await Ft("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...n},data:o}}}},"dropbox");import{betterFetch as Gt}from"@better-fetch/fetch";var Fe=a(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:a(async({state:o,scopes:i,redirectURI:n})=>{let s=i||["profile","email","openid"];return e.scope&&s.push(...e.scope),await k({id:"linkedin",options:e,authorizationEndpoint:t,scopes:s,state:o,redirectURI:n})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:o,redirectURI:i})=>await _({code:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:i,error:n}=await Gt("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(n)return null;let s=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...s},data:i}}}},"linkedin");import{betterFetch as Zt}from"@better-fetch/fetch";var ge=a((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),Qt=a(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:ge(`${t}/oauth/authorize`),tokenEndpoint:ge(`${t}/oauth/token`),userinfoEndpoint:ge(`${t}/api/v4/user`)}},"issuerToEndpoints"),Ge=a(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Qt(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:a(async({state:s,scopes:c,codeVerifier:d,redirectURI:l})=>{let u=c||["read_user"];return e.scope&&u.push(...e.scope),await k({id:i,options:e,authorizationEndpoint:t,scopes:u,state:s,redirectURI:l,codeVerifier:d})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:s,redirectURI:c,codeVerifier:d})=>_({code:s,redirectURI:e.redirectURI||c,options:e,codeVerifier:d,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);let{data:c,error:d}=await Zt(o,{headers:{authorization:`Bearer ${s.accessToken}`}});if(d||c.state!=="active"||c.locked)return null;let l=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...l},data:c}}}},"gitlab");import{betterFetch as Ze}from"@better-fetch/fetch";var Qe=a(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identity"];return e.scope&&i.push(...e.scope),k({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:s}=await Ze("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:o.toString()});if(s)throw s;return ne(n)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Ze("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...i},data:r}}}),"reddit");import{z as Wt}from"zod";var Jt={apple:Pe,discord:De,facebook:Ce,github:je,microsoft:$e,google:Ve,spotify:Be,twitch:Me,twitter:ze,dropbox:He,linkedin:Fe,gitlab:Ge,reddit:Qe},he=Object.keys(Jt),We=Wt.enum(he,{description:"OAuth2 provider to use"});import{z as j}from"zod";import{APIError as Y}from"better-call";import{APIError as z}from"better-call";import{z as Z}from"zod";function Je(e){try{return JSON.parse(e)}catch{return null}}a(Je,"safeJSONParse");var m={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as Kt}from"@better-auth/utils/hmac";import{base64 as Yt}from"@better-auth/utils/base64";import{binary as Xt}from"@better-auth/utils/binary";var Ke=a(()=>f("/get-session",{method:"GET",query:Z.optional(Z.object({disableCookieCache:Z.boolean({description:"Disable cookie cache and fetch session from database"}).or(Z.string().transform(e=>e==="true")).optional(),disableRefresh:Z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Je(Xt.decode(Yt.decode(r))):null;if(o&&!await Kt("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return $(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let u=o.session;if(o.expiresAt<Date.now()||u.session.expiresAt<new Date){let g=e.context.authCookies.sessionData.name;e.setCookie(g,"",{maxAge:0})}else return e.json(u)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return $(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(n);let s=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-s*1e3+c*1e3<=Date.now()){let u=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:G(e.context.sessionConfig.expiresIn,"sec")});if(!u)return $(e),e.json(null,{status:401});let y=(u.expiresAt.valueOf()-Date.now())/1e3;return await P(e,{session:u,user:n.user},!1,{maxAge:y}),e.json({session:u,user:n.user})}return await me(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new z("INTERNAL_SERVER_ERROR",{message:m.FAILED_TO_GET_SESSION})}}),"getSession"),N=a(async(e,t)=>{if(e.context.session)return e.context.session;let r=await Ke()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),I=J(async e=>{let t=await N(e);if(!t?.session)throw new z("UNAUTHORIZED");return{session:t}}),Ss=J(async e=>{let t=await N(e);if(!t?.session)throw new z("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new z("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var er=f("/revoke-session",{method:"POST",body:Z.object({token:Z.string({description:"The token to revoke"})}),use:[I],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new z("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new z("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new z("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),tr=f("/revoke-sessions",{method:"POST",use:[I],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new z("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),rr=f("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[I],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new z("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(i.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});import{jwtVerify as ir}from"jose";import{SignJWT as or}from"jose";async function Ye(e,t,r=3600){return await new or(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}a(Ye,"signJWT");async function H(e,t,r){return await Ye({email:t.toLowerCase(),updateTo:r},e)}a(H,"createEmailVerificationToken");async function nr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Y("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await H(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}a(nr,"sendVerificationEmailFn");var sr=f("/send-verification-email",{method:"POST",query:j.object({currentURL:j.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:j.object({email:j.string({description:"The email to send the verification email to"}).email(),callbackURL:j.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Y("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new Y("BAD_REQUEST",{message:m.USER_NOT_FOUND});return await nr(e,r.user),e.json({status:!0})}),ar=f("/verify-email",{method:"GET",query:j.object({token:j.string({description:"The token to verify the email"}),callbackURL:j.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new Y("UNAUTHORIZED",{message:c})}a(t,"redirectOnError");let{token:r}=e.query,o;try{o=await ir(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let n=j.object({email:j.string().email(),updateTo:j.string().optional()}).parse(o.payload),s=await e.context.internalAdapter.findUserByEmail(n.email);if(!s)return t("user_not_found");if(n.updateTo){let c=await N(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let d=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),l=await H(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:d,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await N(e)){let d=await e.context.internalAdapter.createSession(s.user.id,e.request);if(!d)throw new Y("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await P(e,{session:d,user:s.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function ae(e,{userInfo:t,account:r,callbackURL:o}){let i=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(d=>{throw C.error(`Better auth was unable to query your database.
Error: `,d),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=i?.user,s=!n;if(i){let d=i.accounts.find(l=>l.providerId===r.providerId);if(d){let l=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([u,y])=>y!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(d.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return pe&&C.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:i.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(y){return C.error("Unable to link account",y),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(d=>d?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let d=await H(e.context.secret,n.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:l,token:d},e.request)}}catch(d){return d instanceof b?{error:d.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(n.id,e.request);return c?{data:{session:c,user:n},error:null,isRegister:s}:{error:"unable to create session",data:null,isRegister:!1}}a(ae,"handleOAuthUserInfo");var dr=f("/sign-in/social",{method:"POST",query:R.object({currentURL:R.string().optional()}).optional(),body:R.object({callbackURL:R.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:R.string().optional(),errorCallbackURL:R.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:We,disableRedirect:R.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:R.optional(R.object({token:R.string({description:"ID token from the provider"}),nonce:R.string({description:"Nonce used to generate the token"}).optional(),accessToken:R.string({description:"Access token from the provider"}).optional(),refreshToken:R.string({description:"Refresh token from the provider"}).optional(),expiresAt:R.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new O("NOT_FOUND",{message:m.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new O("NOT_FOUND",{message:m.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:s}=e.body.idToken;if(!await t.verifyIdToken(n,s))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new O("UNAUTHORIZED",{message:m.INVALID_TOKEN});let d=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!d||!d?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new O("UNAUTHORIZED",{message:m.FAILED_TO_GET_USER_INFO});if(!d.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new O("UNAUTHORIZED",{message:m.USER_EMAIL_NOT_FOUND});let l=await ae(e,{userInfo:{email:d.user.email,id:d.user.id,name:d.user.name||"",image:d.user.image,emailVerified:d.user.emailVerified||!1},account:{providerId:t.id,accountId:d.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new O("UNAUTHORIZED",{message:l.error});return await P(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await se(e),i=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),cr=f("/sign-in/email",{method:"POST",body:R.object({email:R.string({description:"Email of the user"}),password:R.string({description:"Password of the user"}),callbackURL:R.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:R.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new O("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!R.string().email().safeParse(t).success)throw new O("BAD_REQUEST",{message:m.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new O("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});let n=i.accounts.find(l=>l.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new O("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});let s=n?.password;if(!s)throw e.context.logger.error("Password not found",{email:t}),new O("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:s,password:r}))throw e.context.logger.error("Invalid password"),new O("UNAUTHORIZED",{message:m.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new O("UNAUTHORIZED",{message:m.EMAIL_NOT_VERIFIED});let l=await H(e.context.secret,i.user.email),u=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:u,token:l},e.request),e.context.logger.error("Email not verified",{email:t}),new O("FORBIDDEN",{message:m.EMAIL_NOT_VERIFIED})}let d=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!d)throw e.context.logger.error("Failed to create session"),new O("UNAUTHORIZED",{message:m.FAILED_TO_CREATE_SESSION});return await P(e,{session:d,user:i.user},e.body.rememberMe===!1),e.json({user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as X}from"zod";var de=X.object({code:X.string().optional(),error:X.string().optional(),error_description:X.string().optional(),state:X.string().optional()}),lr=f("/callback/:id",{method:["GET","POST"],body:de.optional(),query:de.optional(),metadata:W},async e=>{let t;try{if(e.method==="GET")t=de.parse(e.query);else if(e.method==="POST")t=de.parse(e.body);else throw new Error("Unsupported method")}catch(T){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",T),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:i,error_description:n}=t;if(!i)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${n}`);let s=e.context.socialProviders.find(T=>T.id===e.params.id);if(!s)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:d,link:l,errorURL:u,newUserURL:y}=await xe(e),g;try{g=await s.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${s.id}`})}catch(T){throw e.context.logger.error("",T),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let A=await s.getUserInfo(g).then(T=>T?.user);function h(T){let L=u||d||`${e.context.baseURL}/error`;throw L.includes("?")?L=`${L}&error=${T}`:L=`${L}?error=${T}`,e.redirect(L)}if(a(h,"redirectOnError"),!A)return e.context.logger.error("Unable to get user info"),h("unable_to_get_user_info");if(!A.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),h("email_not_found");if(!d)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==A.email.toLowerCase())return h("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:s.id,accountId:A.id}))return h("unable_to_link_account");let L;try{L=d.toString()}catch{L=d}throw e.redirect(L)}let p=await ae(e,{userInfo:{...A,email:A.email,name:A.name||A.email},account:{providerId:s.id,accountId:A.id,...g,scope:g.scopes?.join(",")},callbackURL:d});if(p.error)return e.context.logger.error(p.error.split(" ").join("_")),h(p.error.split(" ").join("_"));let{session:oe,user:V}=p.data;await P(e,{session:oe,user:V});let Q;try{Q=(p.isRegister&&y||d).toString()}catch{Q=p.isRegister&&y||d}throw e.redirect(Q)});import"zod";import{APIError as ur}from"better-call";var pr=f("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw $(e),new ur("BAD_REQUEST",{message:m.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),$(e),e.json({success:!0})});import{z as D}from"zod";import{APIError as ee}from"better-call";function Xe(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}a(Xe,"redirectError");function mr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}a(mr,"redirectCallback");var fr=f("/forget-password",{method:"POST",body:D.object({email:D.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:D.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ee("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,n=G(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),s=qe(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${s}`,expiresAt:n});let c=`${e.context.baseURL}/reset-password/${s}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:s},e.request),e.json({status:!0})}),gr=f("/reset-password/:token",{method:"GET",query:D.object({callbackURL:D.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(Xe(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(Xe(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(mr(e.context,r,{token:t}))}),hr=f("/reset-password",{query:D.optional(D.object({token:D.string().optional(),currentURL:D.string().optional()})),method:"POST",body:D.object({newPassword:D.string({description:"The new password to set"}),token:D.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new ee("BAD_REQUEST",{message:m.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new ee("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});if(r.length>i)throw new ee("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,s=await e.context.internalAdapter.findVerificationValue(n);if(!s||s.expiresAt<new Date)throw new ee("BAD_REQUEST",{message:m.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(s.id);let c=s.value,d=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(y=>y.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,d),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:d,accountId:c}),e.json({status:!0}))});import{z as E}from"zod";import{APIError as U}from"better-call";import{z as w}from"zod";import{APIError as Ia}from"better-call";var va=w.object({id:w.string(),providerId:w.string(),accountId:w.string(),userId:w.string(),accessToken:w.string().nullish(),refreshToken:w.string().nullish(),idToken:w.string().nullish(),accessTokenExpiresAt:w.date().nullish(),refreshTokenExpiresAt:w.date().nullish(),scope:w.string().nullish(),password:w.string().nullish(),createdAt:w.date().default(()=>new Date),updatedAt:w.date().default(()=>new Date)}),La=w.object({id:w.string(),email:w.string().transform(e=>e.toLowerCase()),emailVerified:w.boolean().default(!1),name:w.string(),image:w.string().nullish(),createdAt:w.date().default(()=>new Date),updatedAt:w.date().default(()=>new Date)}),xa=w.object({id:w.string(),userId:w.string(),expiresAt:w.date(),createdAt:w.date().default(()=>new Date),updatedAt:w.date().default(()=>new Date),token:w.string(),ipAddress:w.string().nullish(),userAgent:w.string().nullish()}),Pa=w.object({id:w.string(),value:w.string(),createdAt:w.date().default(()=>new Date),updatedAt:w.date().default(()=>new Date),expiresAt:w.date(),identifier:w.string()});var yr=f("/change-password",{method:"POST",body:E.object({newPassword:E.string({description:"The new password to set"}),currentPassword:E.string({description:"The current password"}),revokeOtherSessions:E.boolean({description:"Revoke all other sessions"}).optional()}),use:[I],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,i=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new U("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new U("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let d=(await e.context.internalAdapter.findAccounts(i.user.id)).find(g=>g.providerId==="credential"&&g.password);if(!d||!d.password)throw new U("BAD_REQUEST",{message:m.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(t);if(!await e.context.password.verify({hash:d.password,password:r}))throw new U("BAD_REQUEST",{message:m.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(d.id,{password:l});let y=null;if(o){await e.context.internalAdapter.deleteSessions(i.user.id);let g=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!g)throw new U("INTERNAL_SERVER_ERROR",{message:m.FAILED_TO_GET_SESSION});await P(e,{session:g,user:i.user}),y=g.token}return e.json({token:y})}),br=f("/set-password",{method:"POST",body:E.object({newPassword:E.string()}),metadata:{SERVER_ONLY:!0},use:[I]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new U("BAD_REQUEST",{message:m.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new U("BAD_REQUEST",{message:m.PASSWORD_TOO_LONG});let s=(await e.context.internalAdapter.findAccounts(r.user.id)).find(d=>d.providerId==="credential"&&d.password),c=await e.context.password.hash(t);if(!s)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new U("BAD_REQUEST",{message:"user already has a password"})}),Ar=f("/delete-user",{method:"POST",use:[I],body:E.object({callbackURL:E.string().optional(),password:E.string().optional(),token:E.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new U("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!n||!n.password)throw new U("BAD_REQUEST",{message:m.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new U("BAD_REQUEST",{message:m.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-i>n)throw new U("BAD_REQUEST",{message:m.SESSION_EXPIRED})}if(e.body.token)return await et({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=S(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),$(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),et=f("/delete-user/callback",{method:"GET",query:E.object({token:E.string(),callbackURL:E.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new U("NOT_FOUND");let t=await N(e);if(!t)throw new U("NOT_FOUND",{message:m.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new U("NOT_FOUND",{message:m.INVALID_TOKEN});if(r.value!==t.user.id)throw new U("NOT_FOUND",{message:m.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),$(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),_r=f("/change-email",{method:"POST",query:E.object({currentURL:E.string().optional()}).optional(),body:E.object({newEmail:E.string({description:"The new email to set"}).email(),callbackURL:E.string({description:"The URL to redirect to after email verification"}).optional()}),use:[I],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new U("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new U("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new U("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new U("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await H(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var kr=a((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),Rr=f("/error",{method:"GET",metadata:{...W,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(kr(t),{headers:{"Content-Type":"text/html"}})});var Ur=f("/ok",{method:"GET",metadata:{...W,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as nd}from"zod";import{APIError as pd}from"better-call";import{z as te}from"zod";import{APIError as tt}from"better-call";var Er=f("/list-accounts",{method:"GET",use:[I],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),Tr=f("/link-social",{method:"POST",requireHeaders:!0,query:te.object({currentURL:te.string().optional()}).optional(),body:te.object({callbackURL:te.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:te.enum(he,{description:"The OAuth2 provider to use"})}),use:[I],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new tt("BAD_REQUEST",{message:m.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new tt("NOT_FOUND",{message:m.PROVIDER_NOT_FOUND});let n=await se(e,{userId:t.user.id,email:t.user.email}),s=await i.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:s.toString(),redirect:!0})});import"defu";import{APIError as b}from"better-call";var rt={oauthApplication:{modelName:"oauthApplication",fields:{name:{type:"string"},icon:{type:"string",required:!1},metadata:{type:"string",required:!1},clientId:{type:"string",unique:!0},clientSecret:{type:"string"},redirectURLs:{type:"string"},type:{type:"string"},disabled:{type:"boolean",required:!1,defaultValue:!1},userId:{type:"string",required:!1},createdAt:{type:"date"},updatedAt:{type:"date"}}},oauthAccessToken:{modelName:"oauthAccessToken",fields:{accessToken:{type:"string",unique:!0},refreshToken:{type:"string",unique:!0},accessTokenExpiresAt:{type:"date"},refreshTokenExpiresAt:{type:"date"},clientId:{type:"string"},userId:{type:"string",required:!1},scopes:{type:"string"},createdAt:{type:"date"},updatedAt:{type:"date"}}},oauthConsent:{modelName:"oauthConsent",fields:{clientId:{type:"string"},userId:{type:"string"},scopes:{type:"string"},createdAt:{type:"date"},updatedAt:{type:"date"},consentGiven:{type:"boolean"}}}};import{APIError as we}from"better-call";function re(e,t,r){return`${e.includes("?")?"&":"?"}error=${t}&error_description=${r}`}a(re,"redirectErrorURL");async function ye(e,t){let r={codeExpiresIn:600,defaultScope:"openid",...t,scopes:["openid","profile","email","offline_access",...t?.scopes||[]]};if(!e.request)throw new we("UNAUTHORIZED",{error_description:"request not found",error:"invalid_request"});let o=await N(e);if(!o){await e.setSignedCookie("oidc_login_prompt",JSON.stringify(e.query),e.context.secret,{maxAge:600});let p=e.request.url?.split("?")[1];throw e.redirect(`${t.loginPage}?${p}`)}let i=e.query;if(!i.client_id)throw e.redirect(`${e.context.baseURL}/error?error=invalid_client`);if(!i.response_type)throw e.redirect(re(`${e.context.baseURL}/error`,"invalid_request","response_type is required"));let n=await e.context.adapter.findOne({model:"oauthApplication",where:[{field:"clientId",value:e.query.client_id}]}).then(p=>p?{...p,redirectURLs:p.redirectURLs.split(","),metadata:p.metadata?JSON.parse(p.metadata):{}}:null);if(!n)throw e.redirect(`${e.context.baseURL}/error?error=invalid_client`);let s=n.redirectURLs.find(p=>p===e.query.redirect_uri);if(!s||!i.redirect_uri)throw new we("BAD_REQUEST",{message:"Invalid redirect URI"});if(n.disabled)throw e.redirect(`${e.context.baseURL}/error?error=client_disabled`);if(i.response_type!=="code")throw e.redirect(`${e.context.baseURL}/error?error=unsupported_response_type`);let c=i.scope?.split(" ").filter(p=>p)||r.defaultScope.split(" "),d=c.filter(p=>!r.scopes.includes(p)||p==="offline_access"&&i.prompt!=="consent");if(d.length)throw e.redirect(re(i.redirect_uri,"invalid_scope",`The following scopes are invalid: ${d.join(", ")}`));if((!i.code_challenge||!i.code_challenge_method)&&t.requirePKCE)throw e.redirect(re(i.redirect_uri,"invalid_request","pkce is required"));if(!["s256",t.allowPlainCodeChallengeMethod?"plain":"s256"].includes(i.code_challenge_method?.toLowerCase()||""))throw e.redirect(re(i.redirect_uri,"invalid_request","invalid code_challenge method"));let l=S(32,"a-z","A-Z","0-9"),u=r.codeExpiresIn*1e3,y=new Date(Date.now()+u);try{await e.context.internalAdapter.createVerificationValue({value:JSON.stringify({clientId:n.clientId,redirectURI:i.redirect_uri,scope:c,userId:o.user.id,authTime:o.session.createdAt.getTime(),requireConsent:i.prompt==="consent",state:i.prompt==="consent"?i.state:null,codeChallenge:i.code_challenge,codeChallengeMethod:i.code_challenge_method}),identifier:l,expiresAt:y})}catch{throw e.redirect(re(i.redirect_uri,"server_error","An error occurred while processing the request"))}let g=new URL(s);if(g.searchParams.set("code",l),g.searchParams.set("state",e.query.state),i.prompt!=="consent"||await e.context.adapter.findOne({model:"oauthConsent",where:[{field:"clientId",value:n.clientId},{field:"userId",value:o.user.id}]}).then(p=>!!p?.consentGiven))throw e.redirect(g.toString());if(t?.consentPage){await e.setSignedCookie("oidc_consent_prompt",l,e.context.secret,{maxAge:600});let p=`${t.consentPage}?client_id=${n.clientId}&scope=${c.join(" ")}`;throw e.redirect(p)}let h=t?.getConsentHTML;if(!h)throw new we("INTERNAL_SERVER_ERROR",{message:"No consent page provided"});return new Response(h({scopes:c,clientMetadata:n.metadata,clientIcon:n?.icon,clientId:n.clientId,clientName:n.name,code:l}),{headers:{"content-type":"text/html"}})}a(ye,"authorize");import{createHash as Or}from"@better-auth/utils/hash";var Ir=a((e,t)=>{let r=e.context.options.baseURL,o=e.context.baseURL;return{issuer:r,authorization_endpoint:`${o}/oauth2/authorize`,token_endpoint:`${o}/oauth2/token`,userInfo_endpoint:`${o}/oauth2/userinfo`,jwks_uri:`${o}/jwks`,registration_endpoint:`${o}/oauth2/register`,scopes_supported:["openid","profile","email","offline_access"],response_types_supported:["code"],response_modes_supported:["query"],grant_types_supported:["authorization_code"],acr_values_supported:["urn:mace:incommon:iap:silver","urn:mace:incommon:iap:bronze"],subject_types_supported:["public"],id_token_signing_alg_values_supported:["RS256","none"],token_endpoint_auth_methods_supported:["client_secret_basic","client_secret_post"],claims_supported:["sub","iss","aud","exp","nbf","iat","jti","email","email_verified","name"],...t?.metadata}},"getMetadata"),jc=a(e=>{let t={oauthClient:"oauthApplication",oauthAccessToken:"oauthAccessToken",oauthConsent:"oauthConsent"},r={codeExpiresIn:600,defaultScope:"openid",accessTokenExpiresIn:3600,refreshTokenExpiresIn:604800,...e,scopes:["openid","profile","email","offline_access",...e?.scopes||[]]};return{id:"oidc",hooks:{after:[{matcher(){return!0},handler:a(async o=>{let i=await o.getSignedCookie("oidc_login_prompt",o.context.secret),n=o.context.authCookies.sessionToken.name,s=Ie(o.responseHeader.get("set-cookie")||""),c=s.has(n);if(!i||!c)return;o.setCookie("oidc_login_prompt","",{maxAge:0});let l=s.get(n)?.value?.split(".")[0];if(!l)return;let u=await o.context.internalAdapter.findSession(l);return u?(o.query=JSON.parse(i),o.query.prompt="consent",o.context.session=u,await ye(o,r)):void 0},"handler")}]},endpoints:{getOpenIdConfig:f("/.well-known/openid-configuration",{method:"GET"},async o=>Ir(o,e)),oAuth2authorize:f("/oauth2/authorize",{method:"GET",query:v.record(v.string(),v.any())},async o=>ye(o,r)),oAuthConsent:f("/oauth2/consent",{method:"POST",body:v.object({accept:v.boolean()}),use:[I]},async o=>{let i=await o.getSignedCookie("oidc_consent_prompt",o.context.secret);if(!i)throw new b("UNAUTHORIZED",{error_description:"No consent prompt found",error:"invalid_grant"});let n=await o.context.internalAdapter.findVerificationValue(i);if(!n)throw new b("UNAUTHORIZED",{error_description:"Invalid code",error:"invalid_grant"});if(n.expiresAt<new Date)throw await o.context.internalAdapter.deleteVerificationValue(n.id),new b("UNAUTHORIZED",{error_description:"Code expired",error:"invalid_grant"});let s=JSON.parse(n.value);if(!s.requireConsent||!s.state)throw new b("UNAUTHORIZED",{error_description:"Consent not required",error:"invalid_grant"});if(!o.body.accept)return await o.context.internalAdapter.deleteVerificationValue(n.id),o.json({redirectURI:`${s.redirectURI}?error=access_denied&error_description=User denied access`});let c=S(32,"a-z","A-Z","0-9"),d=r.codeExpiresIn*1e3,l=new Date(Date.now()+d);await o.context.internalAdapter.updateVerificationValue(n.id,{value:JSON.stringify({...s,requireConsent:!1}),identifier:c,expiresAt:l}),await o.context.adapter.create({model:t.oauthConsent,data:{clientId:s.clientId,userId:s.userId,scopes:s.scope.join(" "),consentGiven:!0,createdAt:new Date,updatedAt:new Date}});let u=new URL(s.redirectURI);return u.searchParams.set("code",c),u.searchParams.set("state",s.state),o.json({redirectURI:u.toString()})}),oAuth2token:f("/oauth2/token",{method:"POST",body:v.any(),metadata:{isAction:!1}},async o=>{let{body:i}=o;if(!i)throw new b("BAD_REQUEST",{error_description:"request body not found",error:"invalid_request"});if(i instanceof FormData&&(i=Object.fromEntries(i.entries())),!(i instanceof Object))throw new b("BAD_REQUEST",{error_description:"request body is not an object",error:"invalid_request"});let{client_id:n,client_secret:s,grant_type:c,code:d,redirect_uri:l,refresh_token:u,code_verifier:y}=i;if(c==="refresh_token"){if(!u)throw new b("BAD_REQUEST",{error_description:"refresh_token is required",error:"invalid_request"});let x=await o.context.adapter.findOne({model:t.oauthAccessToken,where:[{field:"refreshToken",value:u.toString()}]});if(!x)throw new b("UNAUTHORIZED",{error_description:"invalid refresh token",error:"invalid_grant"});if(x.clientId!==n?.toString())throw new b("UNAUTHORIZED",{error_description:"invalid client_id",error:"invalid_client"});if(x.refreshTokenExpiresAt<new Date)throw new b("UNAUTHORIZED",{error_description:"refresh token expired",error:"invalid_grant"});let _e=S(32,"a-z","A-Z"),ke=S(32,"a-z","A-Z"),at=new Date(Date.now()+r.accessTokenExpiresIn*1e3),dt=new Date(Date.now()+r.refreshTokenExpiresIn*1e3);return await o.context.adapter.create({model:t.oauthAccessToken,data:{accessToken:_e,refreshToken:ke,accessTokenExpiresAt:at,refreshTokenExpiresAt:dt,clientId:n.toString(),userId:x.userId,scopes:x.scopes,createdAt:new Date,updatedAt:new Date}}),o.json({access_token:_e,token_type:"bearer",expires_in:r.accessTokenExpiresIn,refresh_token:ke,scope:x.scopes})}if(!d)throw new b("BAD_REQUEST",{error_description:"code is required",error:"invalid_request"});if(e.requirePKCE&&!y)throw new b("BAD_REQUEST",{error_description:"code verifier is missing",error:"invalid_request"});let g=await o.context.internalAdapter.findVerificationValue(d.toString());if(!g)throw new b("UNAUTHORIZED",{error_description:"invalid code",error:"invalid_grant"});if(g.expiresAt<new Date)throw await o.context.internalAdapter.deleteVerificationValue(g.id),new b("UNAUTHORIZED",{error_description:"code expired",error:"invalid_grant"});if(await o.context.internalAdapter.deleteVerificationValue(g.id),!n||!s)throw new b("UNAUTHORIZED",{error_description:"client_id and client_secret are required",error:"invalid_client"});if(!c)throw new b("BAD_REQUEST",{error_description:"grant_type is required",error:"invalid_request"});if(c!=="authorization_code")throw new b("BAD_REQUEST",{error_description:"grant_type must be 'authorization_code'",error:"unsupported_grant_type"});if(!l)throw new b("BAD_REQUEST",{error_description:"redirect_uri is required",error:"invalid_request"});let A=await o.context.adapter.findOne({model:t.oauthClient,where:[{field:"clientId",value:n.toString()}]}).then(x=>x?{...x,redirectURLs:x.redirectURLs.split(","),metadata:x.metadata?JSON.parse(x.metadata):{}}:null);if(!A)throw new b("UNAUTHORIZED",{error_description:"invalid client_id",error:"invalid_client"});if(A.disabled)throw new b("UNAUTHORIZED",{error_description:"client is disabled",error:"invalid_client"});if(!(A.clientSecret===s.toString()))throw new b("UNAUTHORIZED",{error_description:"invalid client_secret",error:"invalid_client"});let p=JSON.parse(g.value);if(p.clientId!==n.toString())throw new b("UNAUTHORIZED",{error_description:"invalid client_id",error:"invalid_client"});if(p.redirectURI!==l.toString())throw new b("UNAUTHORIZED",{error_description:"invalid redirect_uri",error:"invalid_client"});if(p.codeChallenge&&!y)throw new b("BAD_REQUEST",{error_description:"code verifier is missing",error:"invalid_request"});if((p.codeChallengeMethod==="plain"?y:await Or("SHA-256","base64urlnopad").digest(y))!==p.codeChallenge)throw new b("UNAUTHORIZED",{error_description:"code verification failed",error:"invalid_request"});let V=p.scope;await o.context.internalAdapter.deleteVerificationValue(d.toString());let Q=S(32,"a-z","A-Z"),T=S(32,"A-Z","a-z"),L=new Date(Date.now()+r.accessTokenExpiresIn*1e3),be=new Date(Date.now()+r.refreshTokenExpiresIn*1e3);await o.context.adapter.create({model:t.oauthAccessToken,data:{accessToken:Q,refreshToken:T,accessTokenExpiresAt:L,refreshTokenExpiresAt:be,clientId:n.toString(),userId:p.userId,scopes:V.join(" "),createdAt:new Date,updatedAt:new Date}});let q=await o.context.internalAdapter.findUserById(p.userId);if(!q)throw new b("UNAUTHORIZED",{error_description:"user not found",error:"invalid_grant"});let Ae={alg:"HS256",key:await crypto.subtle.generateKey({name:"HMAC",hash:"SHA-256"},!0,["sign","verify"])},ot={given_name:q.name.split(" ")[0],family_name:q.name.split(" ")[1],name:q.name,profile:q.image,updated_at:q.updatedAt.toISOString()},it={email:q.email,email_verified:q.emailVerified},nt={...V.includes("profile")?ot:{},...V.includes("email")?it:{}},st=await new Sr({sub:q.id,aud:n.toString(),iat:Date.now(),auth_time:o.context.session?.session.createdAt.getTime(),nonce:i.nonce,acr:"urn:mace:incommon:iap:silver",...nt}).setProtectedHeader({alg:Ae.alg}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r.accessTokenExpiresIn).sign(Ae.key);return o.json({access_token:Q,token_type:"Bearer",expires_in:r.accessTokenExpiresIn,refresh_token:V.includes("offline_access")?T:void 0,scope:V.join(" "),id_token:V.includes("openid")?st:void 0},{headers:{"Cache-Control":"no-store",Pragma:"no-cache"}})}),oAuth2userInfo:f("/oauth2/userinfo",{method:"GET",metadata:{isAction:!1}},async o=>{if(!o.request)throw new b("UNAUTHORIZED",{error_description:"request not found",error:"invalid_request"});let i=o.request.headers.get("authorization");if(!i)throw new b("UNAUTHORIZED",{error_description:"authorization header not found",error:"invalid_request"});let n=i.replace("Bearer ",""),s=await o.context.adapter.findOne({model:t.oauthAccessToken,where:[{field:"accessToken",value:n}]});if(!s)throw new b("UNAUTHORIZED",{error_description:"invalid access token",error:"invalid_token"});if(s.accessTokenExpiresAt<new Date)throw new b("UNAUTHORIZED",{error_description:"The Access Token expired",error:"invalid_token"});let c=await o.context.internalAdapter.findUserById(s.userId);if(!c)throw new b("UNAUTHORIZED",{error_description:"user not found",error:"invalid_token"});let d=s.scopes.split(" "),l={email:d.includes("email")?c.email:void 0,name:d.includes("profile")?c.name:void 0,picture:d.includes("profile")?c.image:void 0,given_name:d.includes("profile")?c.name.split(" ")[0]:void 0,family_name:d.includes("profile")?c.name.split(" ")[1]:void 0,email_verified:d.includes("email")?c.emailVerified:void 0};return o.json(l)}),registerOAuthApplication:f("/oauth2/register",{method:"POST",body:v.object({name:v.string(),icon:v.string().optional(),metadata:v.record(v.any()).optional(),redirectURLs:v.array(v.string())})},async o=>{let i=o.body,n=await N(o);if(!n&&!e.allowDynamicClientRegistration)throw new b("UNAUTHORIZED",{message:"Unauthorized"});let s=e.generateClientId?.()||S(32,"a-z","A-Z"),c=e.generateClientSecret?.()||S(32,"a-z","A-Z"),d=await o.context.adapter.create({model:t.oauthClient,data:{name:i.name,icon:i.icon,metadata:i.metadata?JSON.stringify(i.metadata):null,clientId:s,clientSecret:c,redirectURLs:i.redirectURLs.join(","),type:"web",authenticationScheme:"client_secret",disabled:!1,userId:n?.session.userId,createdAt:new Date,updatedAt:new Date}});return o.json({...d,redirectURLs:d.redirectURLs.split(","),metadata:d.metadata?JSON.parse(d.metadata):null})}),getOAuthClient:f("/oauth2/client/:id",{method:"GET",use:[I]},async o=>{let i=await o.context.adapter.findOne({model:t.oauthClient,where:[{field:"clientId",value:o.params.id}]});if(!i)throw new b("NOT_FOUND",{error_description:"client not found",error:"not_found"});return o.json({clientId:i.clientId,name:i.name,icon:i.icon})})},schema:rt}},"oidcProvider");export{jc as oidcProvider};
