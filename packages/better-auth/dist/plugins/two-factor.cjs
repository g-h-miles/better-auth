"use strict";var pe=Object.defineProperty;var tr=Object.getOwnPropertyDescriptor;var rr=Object.getOwnPropertyNames;var or=Object.prototype.hasOwnProperty;var a=(e,t)=>pe(e,"name",{value:t,configurable:!0});var sr=(e,t)=>{for(var r in t)pe(e,r,{get:t[r],enumerable:!0})},ir=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of rr(t))!or.call(e,s)&&s!==r&&pe(e,s,{get:()=>t[s],enumerable:!(o=tr(t,s))||o.enumerable});return e};var nr=e=>ir(pe({},"__esModule",{value:!0}),e);var to={};sr(to,{twoFactor:()=>eo,twoFactorClient:()=>Xr});module.exports=nr(to);var He=require("@better-auth/utils/random"),x=(0,He.createRandomStringGenerator)("a-z","0-9","A-Z","-_");var de=require("zod");var W=require("better-call"),Ge=(0,W.createMiddleware)(async()=>({})),V=(0,W.createMiddlewareCreator)({use:[Ge,(0,W.createMiddleware)(async()=>({}))]}),u=(0,W.createEndpointCreator)({use:[Ge]});var re=require("better-call");var Je=require("better-call");function Ee(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}a(Ee,"escapeRegExpChar");function ar(e){let t="";for(let r=0;r<e.length;r++)t+=Ee(e[r]);return t}a(ar,"escapeRegExpString");function We(e,t=!0){if(Array.isArray(e))return`(?:${e.map(m=>`^${We(m,t)}$`).join("|")})`;let r="",o="",s=".";t===!0?(r="/",o="[/\\\\]",s="[^/\\\\]"):t&&(r=t,o=ar(r),o.length>1?(o=`(?:${o})`,s=`((?!${o}).)`):s=`[^${o}]`);let i=t?`${o}+?`:"",n=t?`${o}*?`:"",d=t?e.split(r):[e],c="";for(let p=0;p<d.length;p++){let m=d[p],g=d[p+1],h="";if(!(!m&&p>0)){if(t&&(p===d.length-1?h=n:g!=="**"?h=i:h=""),t&&m==="**"){h&&(c+=p===0?"":h,c+=`(?:${s}*?${h})*?`);continue}for(let w=0;w<m.length;w++){let y=m[w];y==="\\"?w<m.length-1&&(c+=Ee(m[w+1]),w++):y==="?"?c+=s:y==="*"?c+=`${s}*?`:c+=Ee(y)}c+=h}}return c}a(We,"transform");function cr(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}a(cr,"isMatch");function ke(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=We(e,t.separator),o=new RegExp(`^${r}$`,t.flags),s=cr.bind(null,o);return s.options=t,s.pattern=e,s.regexp=o,s}a(ke,"wildcardMatch");var ue=Object.create(null),ne=a(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ue:globalThis),"_getEnv"),Qe=new Proxy(ue,{get(e,t){return ne()[t]??ue[t]},has(e,t){let r=ne();return t in r||t in ue},set(e,t,r){let o=ne(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ne(!0);return delete r[t],!0},ownKeys(){let e=ne(!0);return Object.keys(e)}});function dr(e){return e?e!=="false":!1}a(dr,"toBoolean");var Re=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var Ue=Re==="dev"||Re==="development",pr=Re==="test"||dr(Qe.TEST);var z=class extends Error{static{a(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function Ze(e){try{return new URL(e).origin}catch{return null}}a(Ze,"getOrigin");function Ke(e){return e.includes("://")?new URL(e).host:e}a(Ke,"getHost");var ur=V(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,s=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,n=t?.redirectTo,d=r?.currentURL,c=t?.errorCallbackURL,p=t?.newUserCallbackURL,m=o.trustedOrigins,g=e.headers?.has("cookie"),h=a((y,_)=>y.startsWith("/")?!1:_.includes("*")?ke(_)(Ke(y)):y.startsWith(_),"matchesPattern"),w=a((y,_)=>{if(!y)return;if(!m.some(Ae=>h(y,Ae)||y?.startsWith("/")&&_!=="origin"&&!y.includes(":")))throw e.context.logger.error(`Invalid ${_}: ${y}`),e.context.logger.info(`If it's a valid URL, please add ${y} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${m}`),new Je.APIError("FORBIDDEN",{message:`Invalid ${_}`})},"validateURL");g&&!e.context.options.advanced?.disableCSRFCheck&&w(s,"origin"),i&&w(i,"callbackURL"),n&&w(n,"redirectURL"),d&&w(d,"currentURL"),c&&w(c,"errorCallbackURL"),p&&w(n,"newUserCallbackURL")});var O=require("better-call"),E=require("zod");var q=a((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");var Ye=require("@better-auth/utils/base64");var Xe=require("@better-auth/utils/hmac");async function Oe(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=Ye.base64Url.encode(JSON.stringify({session:t,expiresAt:q(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,Xe.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new z("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}a(Oe,"setCookieCache");async function T(e,t,r,o){let s=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...s,maxAge:i,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Oe(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}a(T,"setSessionCookie");function I(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}a(I,"deleteSessionCookie");var it=require("@better-fetch/fetch"),nt=require("better-call"),H=require("jose");var et=require("@better-auth/utils/hash"),tt=require("@better-auth/utils/base64");async function rt(e){let t=await(0,et.createHash)("SHA-256").digest(e);return tt.base64Url.encode(new Uint8Array(t),{padding:!1})}a(rt,"generateCodeChallenge");function le(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?q(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}a(le,"getOAuth2Tokens");async function A({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:s,scopes:i,claims:n,redirectURI:d,duration:c}){let p=new URL(r);if(p.searchParams.set("response_type","code"),p.searchParams.set("client_id",t.clientId),p.searchParams.set("state",o),p.searchParams.set("scope",i.join(" ")),p.searchParams.set("redirect_uri",t.redirectURI||d),s){let m=await rt(s);p.searchParams.set("code_challenge_method","S256"),p.searchParams.set("code_challenge",m)}if(n){let m=n.reduce((g,h)=>(g[h]=null,g),{});p.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...m}}))}return c&&p.searchParams.set("duration",c),p}a(A,"createAuthorizationURL");var ot=require("@better-fetch/fetch");var lr=require("jose");async function b({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:s,authentication:i}){let n=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(n.set("grant_type","authorization_code"),n.set("code",e),t&&n.set("code_verifier",t),n.set("redirect_uri",r),i==="basic"){let g=btoa(`${o.clientId}:${o.clientSecret}`);d.authorization=`Basic ${g}`}else n.set("client_id",o.clientId),n.set("client_secret",o.clientSecret);let{data:c,error:p}=await(0,ot.betterFetch)(s,{method:"POST",body:n,headers:d});if(p)throw p;return le(c)}a(b,"validateAuthorizationCode");var N=require("zod"),Pe=require("better-call");var _e=require("@better-auth/utils/hash"),Se=require("@noble/ciphers/chacha"),K=require("@noble/ciphers/utils"),ve=require("@noble/ciphers/webcrypto");var mr=require("@noble/hashes/scrypt"),fr=require("uncrypto"),gr=require("@better-auth/utils/hex");var ae=a(async({key:e,data:t})=>{let r=await(0,_e.createHash)("SHA-256").digest(e),o=(0,K.utf8ToBytes)(t),s=(0,ve.managedNonce)(Se.xchacha20poly1305)(new Uint8Array(r));return(0,K.bytesToHex)(s.encrypt(o))},"symmetricEncrypt"),me=a(async({key:e,data:t})=>{let r=await(0,_e.createHash)("SHA-256").digest(e),o=(0,K.hexToBytes)(t),s=(0,ve.managedNonce)(Se.xchacha20poly1305)(new Uint8Array(r));return new TextDecoder().decode(s.decrypt(o))},"symmetricDecrypt");async function fe(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Ze(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Pe.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=x(128),s=x(32),i=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),n=new Date;n.setMinutes(n.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:i,identifier:s,expiresAt:n});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Pe.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:o}}a(fe,"generateState");async function st(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=N.z.object({callbackURL:N.z.string(),codeVerifier:N.z.string(),errorURL:N.z.string().optional(),newUserURL:N.z.string().optional(),expiresAt:N.z.number(),link:N.z.object({email:N.z.string(),userId:N.z.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}a(st,"parseState");var at=a(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:s}){let i=o||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||s}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:a(async({code:r,codeVerifier:o,redirectURI:s})=>b({code:r,codeVerifier:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let s=(0,H.decodeProtectedHeader)(r),{kid:i,alg:n}=s;if(!i||!n)return!1;let d=await hr(i),{payload:c}=await(0,H.jwtVerify)(r,d,{algorithms:[n],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(p=>{c[p]!==void 0&&(c[p]=!!c[p])}),o&&c.nonce!==o?!1:!!c},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=(0,H.decodeJwt)(r.idToken);if(!o)return null;let s=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:s,emailVerified:!1,email:o.email,...i},data:o}}}},"apple"),hr=a(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await(0,it.betterFetch)(`${t}${r}`);if(!o?.keys)throw new nt.APIError("BAD_REQUEST",{message:"Keys not found"});let s=o.keys.find(i=>i.kid===e);if(!s)throw new Error(`JWK with kid ${e} not found`);return await(0,H.importJWK)(s,s.alg)},"getApplePublicKey");var ct=require("@better-fetch/fetch");var dt=a(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["identify","email"];return e.scope&&s.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${s.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,ct.betterFetch)("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...s},data:r}}}),"discord");var pt=require("@better-fetch/fetch");var ut=a(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["email","public_profile"];return e.scope&&s.push(...e.scope),await A({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:s,state:t,redirectURI:o})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,pt.betterFetch)("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...s},data:r}}}),"facebook");var Ie=require("@better-fetch/fetch");var lt=a(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:s,redirectURI:i}){let n=o||["user:email"];return e.scope&&n.push(...e.scope),A({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:n,state:r,redirectURI:i})},validateAuthorizationCode:a(async({code:r,redirectURI:o})=>b({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:s}=await(0,Ie.betterFetch)("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(s)return null;let i=!1,{data:n}=await(0,Ie.betterFetch)("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});n&&(o.email=(n.find(c=>c.primary)??n[0])?.email,i=n.find(c=>c.email===o.email)?.verified??!1);let d=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:i,...d},data:o}}}},"github");var Le=["info","success","warn","error","debug"];function wr(e,t){return Le.indexOf(t)<=Le.indexOf(e)}a(wr,"shouldPublishLog");var B={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},br={info:B.fg.blue,success:B.fg.green,warn:B.fg.yellow,error:B.fg.red,debug:B.fg.magenta},yr=a((e,t)=>{let r=new Date().toISOString();return`${B.dim}${r}${B.reset} ${br[e]}${e.toUpperCase()}${B.reset} ${B.bright}Better Auth${B.reset} ${t}`},"formatMessage"),Ar=a(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=a((s,i,n=[])=>{if(!t||!wr(r,s))return;let d=yr(s,i);if(!e||typeof e.log!="function"){s==="error"?console.error(d,...n):s==="warn"?console.warn(d,...n):console.log(d,...n);return}e.log(s==="success"?"info":s,d,...n)},"LogFunc");return Object.fromEntries(Le.map(s=>[s,(...[i,...n])=>o(s,i,n)]))},"createLogger"),C=Ar();var mt=require("@better-fetch/fetch"),ft=require("jose");var gt=a(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:s}){if(!e.clientId||!e.clientSecret)throw C.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new z("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new z("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let n=await A({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:o,redirectURI:s});return e.accessType&&n.searchParams.set("access_type",e.accessType),e.prompt&&n.searchParams.set("prompt",e.prompt),n},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>b({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:s}=await(0,mt.betterFetch)(o);return s?s.aud===e.clientId&&s.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,ft.decodeJwt)(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");var ht=require("@better-fetch/fetch");var wt=require("jose");var bt=a(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(s){let i=s.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),A({id:"microsoft",options:e,authorizationEndpoint:r,state:s.state,codeVerifier:s.codeVerifier,scopes:i,redirectURI:s.redirectURI})},validateAuthorizationCode({code:s,codeVerifier:i,redirectURI:n}){return b({code:s,codeVerifier:i,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:o})},async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);if(!s.idToken)return null;let i=(0,wt.decodeJwt)(s.idToken),n=e.profilePhotoSize||48;await(0,ht.betterFetch)(`https://graph.microsoft.com/v1.0/me/photos/${n}x${n}/$value`,{headers:{Authorization:`Bearer ${s.accessToken}`},async onResponse(c){if(!(e.disableProfilePhoto||!c.response.ok))try{let m=await c.response.clone().arrayBuffer(),g=Buffer.from(m).toString("base64");i.picture=`data:image/jpeg;base64, ${g}`}catch(p){C.error(p&&typeof p=="object"&&"name"in p?p.name:"",p)}}});let d=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...d},data:i}}}},"microsoft");var yt=require("@better-fetch/fetch");var At=a(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:s}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),A({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:o,redirectURI:s})},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>b({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,yt.betterFetch)("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...s},data:r}}}),"spotify");var J={isAction:!1};var Tt=require("@better-auth/utils/random");var Et=a(e=>(0,Tt.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32),"generateId");var kt=require("jose");var Rt=a(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["user:read:email","openid"];return e.scope&&s.push(...e.scope),A({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:s,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return C.error("No idToken found in token"),null;let o=(0,kt.decodeJwt)(r),s=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...s},data:o}}}),"twitch");var Ut=require("@better-fetch/fetch");var Ot=a(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),A({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:a(async({code:t,codeVerifier:r,redirectURI:o})=>b({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,Ut.betterFetch)("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...s},data:r}}}),"twitter");var _t=require("@better-fetch/fetch");var St=a(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:a(async({state:r,scopes:o,codeVerifier:s,redirectURI:i})=>{let n=o||["account_info.read"];return e.scope&&n.push(...e.scope),await A({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:n,state:r,redirectURI:i,codeVerifier:s})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:r,codeVerifier:o,redirectURI:s})=>await b({code:r,codeVerifier:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:s}=await(0,_t.betterFetch)("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(s)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...i},data:o}}}},"dropbox");var vt=require("@better-fetch/fetch");var Pt=a(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:a(async({state:o,scopes:s,redirectURI:i})=>{let n=s||["profile","email","openid"];return e.scope&&n.push(...e.scope),await A({id:"linkedin",options:e,authorizationEndpoint:t,scopes:n,state:o,redirectURI:i})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:o,redirectURI:s})=>await b({code:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:s,error:i}=await(0,vt.betterFetch)("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:s.name,email:s.email,emailVerified:s.email_verified||!1,image:s.picture,...n},data:s}}}},"linkedin");var It=require("@better-fetch/fetch");var xe=a((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),Tr=a(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:xe(`${t}/oauth/authorize`),tokenEndpoint:xe(`${t}/oauth/token`),userinfoEndpoint:xe(`${t}/api/v4/user`)}},"issuerToEndpoints"),Lt=a(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Tr(e.issuer),s="gitlab";return{id:s,name:"Gitlab",createAuthorizationURL:a(async({state:n,scopes:d,codeVerifier:c,redirectURI:p})=>{let m=d||["read_user"];return e.scope&&m.push(...e.scope),await A({id:s,options:e,authorizationEndpoint:t,scopes:m,state:n,redirectURI:p,codeVerifier:c})},"createAuthorizationURL"),validateAuthorizationCode:a(async({code:n,redirectURI:d,codeVerifier:c})=>b({code:n,redirectURI:e.redirectURI||d,options:e,codeVerifier:c,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);let{data:d,error:c}=await(0,It.betterFetch)(o,{headers:{authorization:`Bearer ${n.accessToken}`}});if(c||d.state!=="active"||d.locked)return null;let p=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...p},data:d}}}},"gitlab");var Ce=require("@better-fetch/fetch");var xt=a(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["identity"];return e.scope&&s.push(...e.scope),A({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:s,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:a(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),s={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:n}=await(0,Ce.betterFetch)("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:s,body:o.toString()});if(n)throw n;return le(i)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,Ce.betterFetch)("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...s},data:r}}}),"reddit");var Ct=require("zod"),Er={apple:at,discord:dt,facebook:ut,github:lt,microsoft:bt,google:gt,spotify:At,twitch:Rt,twitter:Ot,dropbox:St,linkedin:Pt,gitlab:Lt,reddit:xt},De=Object.keys(Er),Dt=Ct.z.enum(De,{description:"OAuth2 provider to use"});var L=require("zod");var Y=require("better-call");var j=require("better-call");var G=require("zod");function Nt(e){try{return JSON.parse(e)}catch{return null}}a(Nt,"safeJSONParse");var l={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var Bt=require("@better-auth/utils/hmac"),jt=require("@better-auth/utils/base64"),Ft=require("@better-auth/utils/binary");var Vt=a(()=>u("/get-session",{method:"GET",query:G.z.optional(G.z.object({disableCookieCache:G.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(G.z.string().transform(e=>e==="true")).optional(),disableRefresh:G.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Nt(Ft.binary.decode(jt.base64.decode(r))):null;if(o&&!await(0,Bt.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return I(e),e.json(null);let s=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let m=o.session;if(o.expiresAt<Date.now()||m.session.expiresAt<new Date){let h=e.context.authCookies.sessionData.name;e.setCookie(h,"",{maxAge:0})}else return e.json(m)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return I(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(s||e.query?.disableRefresh)return e.json(i);let n=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-n*1e3+d*1e3<=Date.now()){let m=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:q(e.context.sessionConfig.expiresIn,"sec")});if(!m)return I(e),e.json(null,{status:401});let g=(m.expiresAt.valueOf()-Date.now())/1e3;return await T(e,{session:m,user:i.user},!1,{maxAge:g}),e.json({session:m,user:i.user})}return await Oe(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new j.APIError("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_GET_SESSION})}}),"getSession"),$=a(async(e,t)=>{if(e.context.session)return e.context.session;let r=await Vt()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),R=V(async e=>{let t=await $(e);if(!t?.session)throw new j.APIError("UNAUTHORIZED");return{session:t}}),tn=V(async e=>{let t=await $(e);if(!t?.session)throw new j.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new j.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var kr=u("/revoke-session",{method:"POST",body:G.z.object({token:G.z.string({description:"The token to revoke"})}),use:[R],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new j.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new j.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new j.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Rr=u("/revoke-sessions",{method:"POST",use:[R],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new j.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Ur=u("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[R],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new j.APIError("UNAUTHORIZED");let s=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(s.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});var zt=require("jose");var $t=require("jose");async function Mt(e,t,r=3600){return await new $t.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}a(Mt,"signJWT");async function M(e,t,r){return await Mt({email:t.toLowerCase(),updateTo:r},e)}a(M,"createEmailVerificationToken");async function Or(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Y.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await M(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}a(Or,"sendVerificationEmailFn");var _r=u("/send-verification-email",{method:"POST",query:L.z.object({currentURL:L.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:L.z.object({email:L.z.string({description:"The email to send the verification email to"}).email(),callbackURL:L.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Y.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new Y.APIError("BAD_REQUEST",{message:l.USER_NOT_FOUND});return await Or(e,r.user),e.json({status:!0})}),Sr=u("/verify-email",{method:"GET",query:L.z.object({token:L.z.string({description:"The token to verify the email"}),callbackURL:L.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new Y.APIError("UNAUTHORIZED",{message:d})}a(t,"redirectOnError");let{token:r}=e.query,o;try{o=await(0,zt.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return e.context.logger.error("Failed to verify email",d),t("invalid_token")}let i=L.z.object({email:L.z.string().email(),updateTo:L.z.string().optional()}).parse(o.payload),n=await e.context.internalAdapter.findUserByEmail(i.email);if(!n)return t("user_not_found");if(i.updateTo){let d=await $(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let c=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),p=await M(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:c,url:`${e.context.baseURL}/verify-email?token=${p}`,token:p},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await $(e)){let c=await e.context.internalAdapter.createSession(n.user.id,e.request);if(!c)throw new Y.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await T(e,{session:c,user:n.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function ge(e,{userInfo:t,account:r,callbackURL:o}){let s=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(c=>{throw C.error(`Better auth was unable to query your database.
Error: `,c),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=s?.user,n=!i;if(s){let c=s.accounts.find(p=>p.providerId===r.providerId);if(c){let p=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([m,g])=>g!==void 0));Object.keys(p).length>0&&await e.context.internalAdapter.updateAccount(c.id,p)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return Ue&&C.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:s.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(g){return C.error("Unable to link account",g),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(c=>c?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let c=await M(e.context.secret,i.email),p=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:p,token:c},e.request)}}catch(c){return c instanceof Ne.APIError?{error:c.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(i.id,e.request);return d?{data:{session:d,user:i},error:null,isRegister:n}:{error:"unable to create session",data:null,isRegister:!1}}a(ge,"handleOAuthUserInfo");var vr=u("/sign-in/social",{method:"POST",query:E.z.object({currentURL:E.z.string().optional()}).optional(),body:E.z.object({callbackURL:E.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:E.z.string().optional(),errorCallbackURL:E.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:Dt,disableRedirect:E.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:E.z.optional(E.z.object({token:E.z.string({description:"ID token from the provider"}),nonce:E.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:E.z.string({description:"Access token from the provider"}).optional(),refreshToken:E.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:E.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new O.APIError("NOT_FOUND",{message:l.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new O.APIError("NOT_FOUND",{message:l.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:n}=e.body.idToken;if(!await t.verifyIdToken(i,n))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new O.APIError("UNAUTHORIZED",{message:l.INVALID_TOKEN});let c=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!c||!c?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new O.APIError("UNAUTHORIZED",{message:l.FAILED_TO_GET_USER_INFO});if(!c.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new O.APIError("UNAUTHORIZED",{message:l.USER_EMAIL_NOT_FOUND});let p=await ge(e,{userInfo:{email:c.user.email,id:c.user.id,name:c.user.name||"",image:c.user.image,emailVerified:c.user.emailVerified||!1},account:{providerId:t.id,accountId:c.user.id,accessToken:e.body.idToken.accessToken}});if(p.error)throw new O.APIError("UNAUTHORIZED",{message:p.error});return await T(e,p.data),e.json({token:p.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await fe(e),s=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:s.toString(),redirect:!e.body.disableRedirect})}),Pr=u("/sign-in/email",{method:"POST",body:E.z.object({email:E.z.string({description:"Email of the user"}),password:E.z.string({description:"Password of the user"}),callbackURL:E.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:E.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new O.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!E.z.string().email().safeParse(t).success)throw new O.APIError("BAD_REQUEST",{message:l.INVALID_EMAIL});let s=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!s)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new O.APIError("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});let i=s.accounts.find(p=>p.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new O.APIError("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});let n=i?.password;if(!n)throw e.context.logger.error("Password not found",{email:t}),new O.APIError("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:n,password:r}))throw e.context.logger.error("Invalid password"),new O.APIError("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!s.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new O.APIError("UNAUTHORIZED",{message:l.EMAIL_NOT_VERIFIED});let p=await M(e.context.secret,s.user.email),m=`${e.context.baseURL}/verify-email?token=${p}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:s.user,url:m,token:p},e.request),e.context.logger.error("Email not verified",{email:t}),new O.APIError("FORBIDDEN",{message:l.EMAIL_NOT_VERIFIED})}let c=await e.context.internalAdapter.createSession(s.user.id,e.headers,e.body.rememberMe===!1);if(!c)throw e.context.logger.error("Failed to create session"),new O.APIError("UNAUTHORIZED",{message:l.FAILED_TO_CREATE_SESSION});return await T(e,{session:c,user:s.user},e.body.rememberMe===!1),e.json({user:{id:s.user.id,email:s.user.email,name:s.user.name,image:s.user.image,emailVerified:s.user.emailVerified,createdAt:s.user.createdAt,updatedAt:s.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var X=require("zod");var he=X.z.object({code:X.z.string().optional(),error:X.z.string().optional(),error_description:X.z.string().optional(),state:X.z.string().optional()}),Ir=u("/callback/:id",{method:["GET","POST"],body:he.optional(),query:he.optional(),metadata:J},async e=>{let t;try{if(e.method==="GET")t=he.parse(e.query);else if(e.method==="POST")t=he.parse(e.body);else throw new Error("Unsupported method")}catch(P){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",P),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:s,error_description:i}=t;if(!s)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${i}`);let n=e.context.socialProviders.find(P=>P.id===e.params.id);if(!n)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:c,link:p,errorURL:m,newUserURL:g}=await st(e),h;try{h=await n.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${n.id}`})}catch(P){throw e.context.logger.error("",P),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let w=await n.getUserInfo(h).then(P=>P?.user);function y(P){let D=m||c||`${e.context.baseURL}/error`;throw D.includes("?")?D=`${D}&error=${P}`:D=`${D}?error=${P}`,e.redirect(D)}if(a(y,"redirectOnError"),!w)return e.context.logger.error("Unable to get user info"),y("unable_to_get_user_info");if(!w.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),y("email_not_found");if(!c)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(p){if(p.email!==w.email.toLowerCase())return y("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:p.userId,providerId:n.id,accountId:w.id}))return y("unable_to_link_account");let D;try{D=c.toString()}catch{D=c}throw e.redirect(D)}let _=await ge(e,{userInfo:{...w,email:w.email,name:w.name||w.email},account:{providerId:n.id,accountId:w.id,...h,scope:h.scopes?.join(",")},callbackURL:c});if(_.error)return e.context.logger.error(_.error.split(" ").join("_")),y(_.error.split(" ").join("_"));let{session:qe,user:Ae}=_.data;await T(e,{session:qe,user:Ae});let Te;try{Te=(_.isRegister&&g||c).toString()}catch{Te=_.isRegister&&g||c}throw e.redirect(Te)});var Cn=require("zod");var qt=require("better-call");var Lr=u("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw I(e),new qt.APIError("BAD_REQUEST",{message:l.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),I(e),e.json({success:!0})});var S=require("zod");var ee=require("better-call");function Ht(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([s,i])=>o.searchParams.set(s,i)),o.href}a(Ht,"redirectError");function xr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([s,i])=>o.searchParams.set(s,i)),o.href}a(xr,"redirectCallback");var Cr=u("/forget-password",{method:"POST",body:S.z.object({email:S.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:S.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ee.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let s=60*60*1,i=q(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||s,"sec"),n=Et(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${n}`,expiresAt:i});let d=`${e.context.baseURL}/reset-password/${n}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:d,token:n},e.request),e.json({status:!0})}),Dr=u("/reset-password/:token",{method:"GET",query:S.z.object({callbackURL:S.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(Ht(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(Ht(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(xr(e.context,r,{token:t}))}),Nr=u("/reset-password",{query:S.z.optional(S.z.object({token:S.z.string().optional(),currentURL:S.z.string().optional()})),method:"POST",body:S.z.object({newPassword:S.z.string({description:"The new password to set"}),token:S.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new ee.APIError("BAD_REQUEST",{message:l.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,s=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new ee.APIError("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});if(r.length>s)throw new ee.APIError("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,n=await e.context.internalAdapter.findVerificationValue(i);if(!n||n.expiresAt<new Date)throw new ee.APIError("BAD_REQUEST",{message:l.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(n.id);let d=n.value,c=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(g=>g.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,c),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:c,accountId:d}),e.json({status:!0}))});var U=require("zod");var k=require("better-call");var f=require("zod"),Br=require("better-call");var Gn=f.z.object({id:f.z.string(),providerId:f.z.string(),accountId:f.z.string(),userId:f.z.string(),accessToken:f.z.string().nullish(),refreshToken:f.z.string().nullish(),idToken:f.z.string().nullish(),accessTokenExpiresAt:f.z.date().nullish(),refreshTokenExpiresAt:f.z.date().nullish(),scope:f.z.string().nullish(),password:f.z.string().nullish(),createdAt:f.z.date().default(()=>new Date),updatedAt:f.z.date().default(()=>new Date)}),Wn=f.z.object({id:f.z.string(),email:f.z.string().transform(e=>e.toLowerCase()),emailVerified:f.z.boolean().default(!1),name:f.z.string(),image:f.z.string().nullish(),createdAt:f.z.date().default(()=>new Date),updatedAt:f.z.date().default(()=>new Date)}),Qn=f.z.object({id:f.z.string(),userId:f.z.string(),expiresAt:f.z.date(),createdAt:f.z.date().default(()=>new Date),updatedAt:f.z.date().default(()=>new Date),token:f.z.string(),ipAddress:f.z.string().nullish(),userAgent:f.z.string().nullish()}),Zn=f.z.object({id:f.z.string(),value:f.z.string(),createdAt:f.z.date().default(()=>new Date),updatedAt:f.z.date().default(()=>new Date),expiresAt:f.z.date(),identifier:f.z.string()});function Gt(e,t){if(!t)return e;for(let r in t){let o=t[r]?.modelName;o&&(e[r].modelName=o);for(let s in e[r].fields){let i=t[r]?.fields?.[s];i&&(e[r].fields[s].fieldName=i)}}return e}a(Gt,"mergeSchema");var Fr=u("/change-password",{method:"POST",body:U.z.object({newPassword:U.z.string({description:"The new password to set"}),currentPassword:U.z.string({description:"The current password"}),revokeOtherSessions:U.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[R],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,s=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new k.APIError("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new k.APIError("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let c=(await e.context.internalAdapter.findAccounts(s.user.id)).find(h=>h.providerId==="credential"&&h.password);if(!c||!c.password)throw new k.APIError("BAD_REQUEST",{message:l.CREDENTIAL_ACCOUNT_NOT_FOUND});let p=await e.context.password.hash(t);if(!await e.context.password.verify({hash:c.password,password:r}))throw new k.APIError("BAD_REQUEST",{message:l.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(c.id,{password:p});let g=null;if(o){await e.context.internalAdapter.deleteSessions(s.user.id);let h=await e.context.internalAdapter.createSession(s.user.id,e.headers);if(!h)throw new k.APIError("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_GET_SESSION});await T(e,{session:h,user:s.user}),g=h.token}return e.json({token:g})}),Vr=u("/set-password",{method:"POST",body:U.z.object({newPassword:U.z.string()}),metadata:{SERVER_ONLY:!0},use:[R]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new k.APIError("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new k.APIError("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let n=(await e.context.internalAdapter.findAccounts(r.user.id)).find(c=>c.providerId==="credential"&&c.password),d=await e.context.password.hash(t);if(!n)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new k.APIError("BAD_REQUEST",{message:"user already has a password"})}),$r=u("/delete-user",{method:"POST",use:[R],body:U.z.object({callbackURL:U.z.string().optional(),password:U.z.string().optional(),token:U.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new k.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!i||!i.password)throw new k.APIError("BAD_REQUEST",{message:l.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new k.APIError("BAD_REQUEST",{message:l.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let s=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-s>i)throw new k.APIError("BAD_REQUEST",{message:l.SESSION_EXPIRED})}if(e.body.token)return await Wt({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let s=x(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${s}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${s}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:s},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),I(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Wt=u("/delete-user/callback",{method:"GET",query:U.z.object({token:U.z.string(),callbackURL:U.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new k.APIError("NOT_FOUND");let t=await $(e);if(!t)throw new k.APIError("NOT_FOUND",{message:l.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new k.APIError("NOT_FOUND",{message:l.INVALID_TOKEN});if(r.value!==t.user.id)throw new k.APIError("NOT_FOUND",{message:l.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),I(e);let s=e.context.options.user.deleteUser?.afterDelete;if(s&&await s(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Mr=u("/change-email",{method:"POST",query:U.z.object({currentURL:U.z.string().optional()}).optional(),body:U.z.object({newEmail:U.z.string({description:"The new email to set"}).email(),callbackURL:U.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[R],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new k.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new k.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new k.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let s=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new k.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await M(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var zr=a((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),qr=u("/error",{method:"GET",metadata:{...J,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(zr(t),{headers:{"Content-Type":"text/html"}})});var Hr=u("/ok",{method:"GET",metadata:{...J,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var Gr=require("zod");var Wr=require("better-call");var te=require("zod");var Be=require("better-call");var Qr=u("/list-accounts",{method:"GET",use:[R],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),Zr=u("/link-social",{method:"POST",requireHeaders:!0,query:te.z.object({currentURL:te.z.string().optional()}).optional(),body:te.z.object({callbackURL:te.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:te.z.enum(De,{description:"The OAuth2 provider to use"})}),use:[R],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new Be.APIError("BAD_REQUEST",{message:l.SOCIAL_ACCOUNT_ALREADY_LINKED});let s=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!s)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Be.APIError("NOT_FOUND",{message:l.PROVIDER_NOT_FOUND});let i=await fe(e,{userId:t.user.id,email:t.user.email}),n=await s.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${s.id}`});return e.json({url:n.toString(),redirect:!0})});var mc=require("defu");var Ne=require("better-call");var F=require("zod");var oe=require("better-call");var we="two_factor";var be="trust_device";var je=require("zod");var Qt=require("@better-auth/utils/hmac"),Uc=require("@better-auth/utils/base64");var Q=V({body:je.z.object({trustDevice:je.z.boolean().optional()})},async e=>{let t=await $(e);if(!t){let r=e.context.createAuthCookie(we),o=await e.getSignedCookie(r.name,e.context.secret);if(!o)throw new oe.APIError("UNAUTHORIZED",{message:"invalid two factor cookie"});let s=await e.context.internalAdapter.findUserById(o);if(!s)throw new oe.APIError("UNAUTHORIZED",{message:"invalid two factor cookie"});let i=await e.context.internalAdapter.createSession(o,e.request);if(!i)throw new oe.APIError("INTERNAL_SERVER_ERROR",{message:"failed to create session"});return{valid:a(async()=>{if(await T(e,{session:i,user:s}),e.body.trustDevice){let n=e.context.createAuthCookie(be,{maxAge:2592e3}),d=await(0,Qt.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,`${s.id}!${i.token}`);await e.setSignedCookie(n.name,`${d}!${i.token}`,e.context.secret,n.attributes)}return e.json({token:i.token})},"valid"),invalid:a(async()=>{throw new oe.APIError("UNAUTHORIZED",{message:"invalid two factor authentication"})},"invalid"),session:{session:i,user:s}}}return{valid:a(async()=>e.json({token:t.session.token}),"valid"),invalid:a(async()=>{throw new oe.APIError("UNAUTHORIZED",{message:"invalid two factor authentication"})},"invalid"),session:t}});var se=require("better-call");var v={OTP_NOT_ENABLED:"OTP not enabled",OTP_HAS_EXPIRED:"OTP has expired",TOTP_NOT_ENABLED:"TOTP not enabled",TWO_FACTOR_NOT_ENABLED:"Two factor isn't enabled",BACKUP_CODES_NOT_ENABLED:"Backup codes aren't enabled",INVALID_BACKUP_CODE:"Invalid backup code"};function Kr(e){return Array.from({length:e?.amount??10}).fill(null).map(()=>x(e?.length??10,"a-z","0-9","A-Z")).map(t=>`${t.slice(0,5)}-${t.slice(5)}`)}a(Kr,"generateBackupCodesFn");async function Fe(e,t){let r=e,o=t?.customBackupCodesGenerate?t.customBackupCodesGenerate():Kr(),s=await ae({data:JSON.stringify(o),key:r});return{backupCodes:o,encryptedBackupCodes:s}}a(Fe,"generateBackupCodes");async function Jr(e,t){let r=await Zt(e.backupCodes,t);return r?{status:r.includes(e.code),updated:r.filter(o=>o!==e.code)}:{status:!1,updated:null}}a(Jr,"verifyBackupCode");async function Zt(e,t){let r=Buffer.from(await me({key:t,data:e})).toString("utf-8"),o=JSON.parse(r),s=F.z.array(F.z.string()).safeParse(o);return s.success?s.data:null}a(Zt,"getBackupCodes");var Kt=a(e=>{let t="twoFactor";return{id:"backup_code",endpoints:{verifyBackupCode:u("/two-factor/verify-backup-code",{method:"POST",body:F.z.object({code:F.z.string(),disableSession:F.z.boolean().optional()}),use:[Q]},async r=>{let o=r.context.session.user,s=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:o.id}]});if(!s)throw new se.APIError("BAD_REQUEST",{message:v.BACKUP_CODES_NOT_ENABLED});let i=await Jr({backupCodes:s.backupCodes,code:r.body.code},r.context.secret);if(!i.status)throw new se.APIError("UNAUTHORIZED",{message:v.INVALID_BACKUP_CODE});let n=await ae({key:r.context.secret,data:JSON.stringify(i.updated)});return await r.context.adapter.updateMany({model:t,update:{backupCodes:n},where:[{field:"userId",value:o.id}]}),r.body.disableSession||await T(r,{session:r.context.session.session,user:o}),r.json({user:o,session:r.context.session})}),generateBackupCodes:u("/two-factor/generate-backup-codes",{method:"POST",body:F.z.object({password:F.z.string()}),use:[R]},async r=>{let o=r.context.session.user;if(!o.twoFactorEnabled)throw new se.APIError("BAD_REQUEST",{message:v.TWO_FACTOR_NOT_ENABLED});await r.context.password.checkPassword(o.id,r);let s=await Fe(r.context.secret,e);return await r.context.adapter.update({model:t,update:{backupCodes:s.encryptedBackupCodes},where:[{field:"userId",value:r.context.session.user.id}]}),r.json({status:!0,backupCodes:s.backupCodes})}),viewBackupCodes:u("/two-factor/view-backup-codes",{method:"GET",body:F.z.object({userId:F.z.string()}),metadata:{SERVER_ONLY:!0}},async r=>{let o=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:r.body.userId}]});if(!o)throw new se.APIError("BAD_REQUEST",{message:"Backup codes aren't enabled"});let s=await Zt(o.backupCodes,r.context.secret);if(!s)throw new se.APIError("BAD_REQUEST",{message:v.BACKUP_CODES_NOT_ENABLED});return r.json({status:!0,backupCodes:s})})}}},"backupCode2fa");var ie=require("better-call"),Ve=require("zod");var Jt=a(e=>{let t={...e,digits:e?.digits||6,period:(e?.period||3)*60*1e3},r="twoFactor",o=u("/two-factor/send-otp",{method:"POST",use:[Q],metadata:{openapi:{summary:"Send two factor OTP",description:"Send two factor OTP to the user",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async i=>{if(!e||!e.sendOTP)throw i.context.logger.error("send otp isn't configured. Please configure the send otp function on otp options."),new ie.APIError("BAD_REQUEST",{message:"otp isn't configured"});let n=i.context.session.user;if(!await i.context.adapter.findOne({model:r,where:[{field:"userId",value:n.id}]}))throw new ie.APIError("BAD_REQUEST",{message:v.OTP_NOT_ENABLED});let c=x(t.digits,"0-9");return await i.context.internalAdapter.createVerificationValue({value:c,identifier:`2fa-otp-${n.id}`,expiresAt:new Date(Date.now()+t.period)}),await e.sendOTP({user:n,otp:c},i.request),i.json({status:!0})}),s=u("/two-factor/verify-otp",{method:"POST",body:Ve.z.object({code:Ve.z.string({description:"The otp code to verify"})}),use:[Q],metadata:{openapi:{summary:"Verify two factor OTP",description:"Verify two factor OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async i=>{let n=i.context.session.user;if(!n.twoFactorEnabled)throw new ie.APIError("BAD_REQUEST",{message:"two factor isn't enabled"});if(!await i.context.adapter.findOne({model:r,where:[{field:"userId",value:n.id}]}))throw new ie.APIError("BAD_REQUEST",{message:v.OTP_NOT_ENABLED});let c=await i.context.internalAdapter.findVerificationValue(`2fa-otp-${n.id}`);if(!c||c.expiresAt<new Date)throw new ie.APIError("BAD_REQUEST",{message:v.OTP_HAS_EXPIRED});return c.value===i.body.code?i.context.valid():i.context.invalid()});return{id:"otp",endpoints:{sendTwoFactorOTP:o,verifyTwoFactorOTP:s}}},"otp2fa");var Z=require("better-call"),ce=require("zod");var ye=require("@better-auth/utils/otp");var Yt=a(e=>{let t={...e,digits:e?.digits||6,period:e?.period||30},r="twoFactor",o=u("/totp/generate",{method:"POST",use:[R],metadata:{openapi:{summary:"Generate TOTP code",description:"Use this endpoint to generate a TOTP code",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{code:{type:"string"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new Z.APIError("BAD_REQUEST",{message:"totp isn't configured"});let d=n.context.session.user,c=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:d.id}]});if(!c)throw new Z.APIError("BAD_REQUEST",{message:v.TOTP_NOT_ENABLED});return{code:await(0,ye.createOTP)(c.secret,{period:t.period,digits:t.digits}).totp()}}),s=u("/two-factor/get-totp-uri",{method:"POST",use:[R],body:ce.z.object({password:ce.z.string({description:"User password"})}),metadata:{openapi:{summary:"Get TOTP URI",description:"Use this endpoint to get the TOTP URI",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new Z.APIError("BAD_REQUEST",{message:"totp isn't configured"});let d=n.context.session.user,c=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:d.id}]});if(!c||!d.twoFactorEnabled)throw new Z.APIError("BAD_REQUEST",{message:v.TOTP_NOT_ENABLED});return await n.context.password.checkPassword(d.id,n),{totpURI:(0,ye.createOTP)(c.secret,{digits:t.digits,period:t.period}).url(e?.issuer||n.context.appName,d.email)}}),i=u("/two-factor/verify-totp",{method:"POST",body:ce.z.object({code:ce.z.string({description:"The otp code to verify"})}),use:[Q],metadata:{openapi:{summary:"Verify two factor TOTP",description:"Verify two factor TOTP",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new Z.APIError("BAD_REQUEST",{message:"totp isn't configured"});let d=n.context.session.user,c=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:d.id}]});if(!c)throw new Z.APIError("BAD_REQUEST",{message:v.TOTP_NOT_ENABLED});let p=await me({key:n.context.secret,data:c.secret});if(!await(0,ye.createOTP)(p,{period:t.period,digits:t.digits}).verify(n.body.code))return n.context.invalid();if(!d.twoFactorEnabled){let g=await n.context.internalAdapter.updateUser(d.id,{twoFactorEnabled:!0}),h=await n.context.internalAdapter.createSession(d.id,n.request,!1,n.context.session.session).catch(w=>{throw console.log(w),w});await n.context.internalAdapter.deleteSession(n.context.session.session.token),await T(n,{session:h,user:g})}return n.context.valid()});return{id:"totp",endpoints:{generateTOTP:o,getTOTPURI:s,verifyTOTP:i}}},"totp2fa");var Yr=require("better-call");async function $e(e,t){let o=(await e.context.internalAdapter.findAccounts(t.userId))?.find(n=>n.providerId==="credential"),s=o?.password;return!o||!s?!1:await e.context.password.verify({hash:s,password:t.password})}a($e,"validatePassword");var Me=require("better-call");var Xt={user:{fields:{twoFactorEnabled:{type:"boolean",required:!1,defaultValue:!1,input:!1}}},twoFactor:{fields:{secret:{type:"string",required:!0,returned:!1},backupCodes:{type:"string",required:!0,returned:!1},userId:{type:"string",required:!0,returned:!1,references:{model:"user",field:"id"}}}}};var er=require("@better-auth/utils/otp"),wd=require("@better-auth/utils/base64"),ze=require("@better-auth/utils/hmac");var Xr=a(e=>({id:"two-factor",$InferServerPlugin:{},atomListeners:[{matcher:a(t=>t.startsWith("/two-factor/"),"matcher"),signal:"$sessionSignal"}],pathMethods:{"/two-factor/disable":"POST","/two-factor/enable":"POST","/two-factor/send-otp":"POST","/two-factor/generate-backup-codes":"POST"},fetchPlugins:[{id:"two-factor",name:"two-factor",hooks:{async onSuccess(t){t.data?.twoFactorRedirect&&e?.onTwoFactorRedirect&&await e.onTwoFactorRedirect()}}}]}),"twoFactorClient");var eo=a(e=>{let t={twoFactorTable:"twoFactor"},r=Yt(e?.totpOptions),o=Kt(e?.backupCodeOptions),s=Jt(e?.otpOptions);return{id:"two-factor",endpoints:{...r.endpoints,...s.endpoints,...o.endpoints,enableTwoFactor:u("/two-factor/enable",{method:"POST",body:de.z.object({password:de.z.string({description:"User password"}).min(8)}),use:[R],metadata:{openapi:{summary:"Enable two factor authentication",description:"Use this endpoint to enable two factor authentication. This will generate a TOTP URI and backup codes. Once the user verifies the TOTP URI, the two factor authentication will be enabled.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string",description:"TOTP URI"},backupCodes:{type:"array",items:{type:"string"},description:"Backup codes"}}}}}}}}}},async i=>{let n=i.context.session.user,{password:d}=i.body;if(!await $e(i,{password:d,userId:n.id}))throw new Me.APIError("BAD_REQUEST",{message:l.INVALID_PASSWORD});let p=x(32),m=await ae({key:i.context.secret,data:p}),g=await Fe(i.context.secret,e?.backupCodeOptions);if(e?.skipVerificationOnEnable){let w=await i.context.internalAdapter.updateUser(n.id,{twoFactorEnabled:!0}),y=await i.context.internalAdapter.createSession(w.id,i.request,!1,i.context.session.session);await T(i,{session:y,user:n}),await i.context.internalAdapter.deleteSession(i.context.session.session.token)}await i.context.adapter.deleteMany({model:t.twoFactorTable,where:[{field:"userId",value:n.id}]}),await i.context.adapter.create({model:t.twoFactorTable,data:{secret:m,backupCodes:g.encryptedBackupCodes,userId:n.id}});let h=(0,er.createOTP)(p,{digits:e?.totpOptions?.digits||6,period:e?.totpOptions?.period}).url(e?.issuer||"Better Auth",n.email);return i.json({totpURI:h,backupCodes:g.backupCodes})}),disableTwoFactor:u("/two-factor/disable",{method:"POST",body:de.z.object({password:de.z.string({description:"User password"}).min(8)}),use:[R],metadata:{openapi:{summary:"Disable two factor authentication",description:"Use this endpoint to disable two factor authentication.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async i=>{let n=i.context.session.user,{password:d}=i.body;if(!await $e(i,{password:d,userId:n.id}))throw new Me.APIError("BAD_REQUEST",{message:"Invalid password"});await i.context.internalAdapter.updateUser(n.id,{twoFactorEnabled:!1}),await i.context.adapter.delete({model:t.twoFactorTable,where:[{field:"userId",value:n.id}]});let p=await i.context.internalAdapter.createSession(n.id,i.request,!1,i.context.session.session);return await T(i,{session:p,user:n}),await i.context.internalAdapter.deleteSession(i.context.session.session.token),i.json({status:!0})})},options:e,hooks:{after:[{matcher(i){return i.path==="/sign-in/email"||i.path==="/sign-in/username"||i.path==="/sign-in/phone-number"},handler:V(async i=>{let n=i.context.newSession;if(!n||!n?.user.twoFactorEnabled)return;let d=i.context.createAuthCookie(be),c=await i.getSignedCookie(d.name,i.context.secret);if(c){let[m,g]=c.split("!"),h=await(0,ze.createHMAC)("SHA-256","base64urlnopad").sign(i.context.secret,`${n.user.id}!${g}`);if(m===h){let w=await(0,ze.createHMAC)("SHA-256","base64urlnopad").sign(i.context.secret,`${n.user.id}!${g}`);await i.setSignedCookie(d.name,`${w}!${n.session.token}`,i.context.secret,d.attributes);return}}I(i),await i.context.internalAdapter.deleteSession(n.session.token);let p=i.context.createAuthCookie(we,{maxAge:60*10});return await i.setSignedCookie(p.name,n.user.id,i.context.secret,p.attributes),i.json({twoFactorRedirect:!0})})}]},schema:Gt(Xt,e?.schema),rateLimit:[{pathMatcher(i){return i.startsWith("/two-factor/")},window:10,max:3}]}},"twoFactor");0&&(module.exports={twoFactor,twoFactorClient});
