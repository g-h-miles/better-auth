"use strict";var Ae=Object.defineProperty;var er=Object.getOwnPropertyDescriptor;var tr=Object.getOwnPropertyNames;var rr=Object.prototype.hasOwnProperty;var or=(e,t)=>{for(var r in t)Ae(e,r,{get:t[r],enumerable:!0})},sr=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of tr(t))!rr.call(e,s)&&s!==r&&Ae(e,s,{get:()=>t[s],enumerable:!(o=er(t,s))||o.enumerable});return e};var ir=e=>sr(Ae({},"__esModule",{value:!0}),e);var eo={};or(eo,{twoFactor:()=>Xr,twoFactorClient:()=>Yr});module.exports=ir(eo);var qe=require("@better-auth/utils/random"),L=(0,qe.createRandomStringGenerator)("a-z","0-9","A-Z","-_");var ce=require("zod");var G=require("better-call"),He=(0,G.createMiddleware)(async()=>({})),F=(0,G.createMiddlewareCreator)({use:[He,(0,G.createMiddleware)(async()=>({}))]}),p=(0,G.createEndpointCreator)({use:[He]});var te=require("better-call");var Ke=require("better-call");function Te(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function nr(e){let t="";for(let r=0;r<e.length;r++)t+=Te(e[r]);return t}function Ge(e,t=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${Ge(l,t)}$`).join("|")})`;let r="",o="",s=".";t===!0?(r="/",o="[/\\\\]",s="[^/\\\\]"):t&&(r=t,o=nr(r),o.length>1?(o=`(?:${o})`,s=`((?!${o}).)`):s=`[^${o}]`);let i=t?`${o}+?`:"",n=t?`${o}*?`:"",c=t?e.split(r):[e],a="";for(let d=0;d<c.length;d++){let l=c[d],f=c[d+1],g="";if(!(!l&&d>0)){if(t&&(d===c.length-1?g=n:f!=="**"?g=i:g=""),t&&l==="**"){g&&(a+=d===0?"":g,a+=`(?:${s}*?${g})*?`);continue}for(let h=0;h<l.length;h++){let b=l[h];b==="\\"?h<l.length-1&&(a+=Te(l[h+1]),h++):b==="?"?a+=s:b==="*"?a+=`${s}*?`:a+=Te(b)}a+=g}}return a}function ar(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function Ee(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Ge(e,t.separator),o=new RegExp(`^${r}$`,t.flags),s=ar.bind(null,o);return s.options=t,s.pattern=e,s.regexp=o,s}var de=Object.create(null),ie=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?de:globalThis),We=new Proxy(de,{get(e,t){return ie()[t]??de[t]},has(e,t){let r=ie();return t in r||t in de},set(e,t,r){let o=ie(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ie(!0);return delete r[t],!0},ownKeys(){let e=ie(!0);return Object.keys(e)}});function cr(e){return e?e!=="false":!1}var ke=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var Re=ke==="dev"||ke==="development",dr=ke==="test"||cr(We.TEST);var M=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function Qe(e){try{return new URL(e).origin}catch{return null}}function Ze(e){return e.includes("://")?new URL(e).host:e}var pr=F(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,s=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,n=t?.redirectTo,c=r?.currentURL,a=t?.errorCallbackURL,d=t?.newUserCallbackURL,l=o.trustedOrigins,f=e.headers?.has("cookie"),g=(b,O)=>b.startsWith("/")?!1:O.includes("*")?Ee(O)(Ze(b)):b.startsWith(O),h=(b,O)=>{if(!b)return;if(!l.some(be=>g(b,be)||b?.startsWith("/")&&O!=="origin"&&!b.includes(":")))throw e.context.logger.error(`Invalid ${O}: ${b}`),e.context.logger.info(`If it's a valid URL, please add ${b} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new Ke.APIError("FORBIDDEN",{message:`Invalid ${O}`})};f&&!e.context.options.advanced?.disableCSRFCheck&&h(s,"origin"),i&&h(i,"callbackURL"),n&&h(n,"redirectURL"),c&&h(c,"currentURL"),a&&h(a,"errorCallbackURL"),d&&h(n,"newUserCallbackURL")});var U=require("better-call"),T=require("zod");var z=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));var Je=require("@better-auth/utils/base64");var Ye=require("@better-auth/utils/hmac");async function Ue(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=Je.base64Url.encode(JSON.stringify({session:t,expiresAt:z(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,Ye.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new M("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function A(e,t,r,o){let s=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...s,maxAge:i,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await Ue(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function P(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}var st=require("@better-fetch/fetch"),it=require("better-call"),q=require("jose");var Xe=require("@better-auth/utils/hash"),et=require("@better-auth/utils/base64");async function tt(e){let t=await(0,Xe.createHash)("SHA-256").digest(e);return et.base64Url.encode(new Uint8Array(t),{padding:!1})}function pe(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?z(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function y({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:s,scopes:i,claims:n,redirectURI:c,duration:a}){let d=new URL(r);if(d.searchParams.set("response_type","code"),d.searchParams.set("client_id",t.clientId),d.searchParams.set("state",o),d.searchParams.set("scope",i.join(" ")),d.searchParams.set("redirect_uri",t.redirectURI||c),s){let l=await tt(s);d.searchParams.set("code_challenge_method","S256"),d.searchParams.set("code_challenge",l)}if(n){let l=n.reduce((f,g)=>(f[g]=null,f),{});d.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return a&&d.searchParams.set("duration",a),d}var rt=require("@better-fetch/fetch");var ur=require("jose");async function w({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:s,authentication:i}){let n=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(n.set("grant_type","authorization_code"),n.set("code",e),t&&n.set("code_verifier",t),n.set("redirect_uri",r),i==="basic"){let f=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${f}`}else n.set("client_id",o.clientId),n.set("client_secret",o.clientSecret);let{data:a,error:d}=await(0,rt.betterFetch)(s,{method:"POST",body:n,headers:c});if(d)throw d;return pe(a)}var D=require("zod"),ve=require("better-call");var Oe=require("@better-auth/utils/hash"),_e=require("@noble/ciphers/chacha"),Z=require("@noble/ciphers/utils"),Se=require("@noble/ciphers/webcrypto");var lr=require("@noble/hashes/scrypt"),mr=require("uncrypto"),fr=require("@better-auth/utils/hex");var ne=async({key:e,data:t})=>{let r=await(0,Oe.createHash)("SHA-256").digest(e),o=(0,Z.utf8ToBytes)(t),s=(0,Se.managedNonce)(_e.xchacha20poly1305)(new Uint8Array(r));return(0,Z.bytesToHex)(s.encrypt(o))},ue=async({key:e,data:t})=>{let r=await(0,Oe.createHash)("SHA-256").digest(e),o=(0,Z.hexToBytes)(t),s=(0,Se.managedNonce)(_e.xchacha20poly1305)(new Uint8Array(r));return new TextDecoder().decode(s.decrypt(o))};async function le(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Qe(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new ve.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=L(128),s=L(32),i=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),n=new Date;n.setMinutes(n.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:i,identifier:s,expiresAt:n});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new ve.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}async function ot(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=D.z.object({callbackURL:D.z.string(),codeVerifier:D.z.string(),errorURL:D.z.string().optional(),newUserURL:D.z.string().optional(),expiresAt:D.z.number(),link:D.z.object({email:D.z.string(),userId:D.z.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}var nt=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:s}){let i=o||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||s}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:s})=>w({code:r,codeVerifier:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:t}),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let s=(0,q.decodeProtectedHeader)(r),{kid:i,alg:n}=s;if(!i||!n)return!1;let c=await gr(i),{payload:a}=await(0,q.jwtVerify)(r,c,{algorithms:[n],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(d=>{a[d]!==void 0&&(a[d]=!!a[d])}),o&&a.nonce!==o?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=(0,q.decodeJwt)(r.idToken);if(!o)return null;let s=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:s,emailVerified:!1,email:o.email,...i},data:o}}}},gr=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await(0,st.betterFetch)(`${t}${r}`);if(!o?.keys)throw new it.APIError("BAD_REQUEST",{message:"Keys not found"});let s=o.keys.find(i=>i.kid===e);if(!s)throw new Error(`JWK with kid ${e} not found`);return await(0,q.importJWK)(s,s.alg)};var at=require("@better-fetch/fetch");var ct=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["identify","email"];return e.scope&&s.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${s.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,at.betterFetch)("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...s},data:r}}});var dt=require("@better-fetch/fetch");var pt=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["email","public_profile"];return e.scope&&s.push(...e.scope),await y({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:s,state:t,redirectURI:o})},validateAuthorizationCode:async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,dt.betterFetch)("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...s},data:r}}});var Pe=require("@better-fetch/fetch");var ut=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:s,redirectURI:i}){let n=o||["user:email"];return e.scope&&n.push(...e.scope),y({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:n,state:r,redirectURI:i})},validateAuthorizationCode:async({code:r,redirectURI:o})=>w({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:s}=await(0,Pe.betterFetch)("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(s)return null;let i=!1,{data:n}=await(0,Pe.betterFetch)("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});n&&(o.email=(n.find(a=>a.primary)??n[0])?.email,i=n.find(a=>a.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:i,...c},data:o}}}};var Ie=["info","success","warn","error","debug"];function hr(e,t){return Ie.indexOf(t)<=Ie.indexOf(e)}var N={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},wr={info:N.fg.blue,success:N.fg.green,warn:N.fg.yellow,error:N.fg.red,debug:N.fg.magenta},br=(e,t)=>{let r=new Date().toISOString();return`${N.dim}${r}${N.reset} ${wr[e]}${e.toUpperCase()}${N.reset} ${N.bright}Better Auth${N.reset} ${t}`},yr=e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=(s,i,n=[])=>{if(!t||!hr(r,s))return;let c=br(s,i);if(!e||typeof e.log!="function"){s==="error"?console.error(c,...n):s==="warn"?console.warn(c,...n):console.log(c,...n);return}e.log(s==="success"?"info":s,c,...n)};return Object.fromEntries(Ie.map(s=>[s,(...[i,...n])=>o(s,i,n)]))},x=yr();var lt=require("@better-fetch/fetch"),mt=require("jose"),ft=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:s}){if(!e.clientId||!e.clientSecret)throw x.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new M("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new M("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let n=await y({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:o,redirectURI:s});return e.accessType&&n.searchParams.set("access_type",e.accessType),e.prompt&&n.searchParams.set("prompt",e.prompt),n},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:s}=await(0,lt.betterFetch)(o);return s?s.aud===e.clientId&&s.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,mt.decodeJwt)(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}});var gt=require("@better-fetch/fetch");var ht=require("jose"),wt=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(s){let i=s.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),y({id:"microsoft",options:e,authorizationEndpoint:r,state:s.state,codeVerifier:s.codeVerifier,scopes:i,redirectURI:s.redirectURI})},validateAuthorizationCode({code:s,codeVerifier:i,redirectURI:n}){return w({code:s,codeVerifier:i,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:o})},async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);if(!s.idToken)return null;let i=(0,ht.decodeJwt)(s.idToken),n=e.profilePhotoSize||48;await(0,gt.betterFetch)(`https://graph.microsoft.com/v1.0/me/photos/${n}x${n}/$value`,{headers:{Authorization:`Bearer ${s.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let l=await a.response.clone().arrayBuffer(),f=Buffer.from(l).toString("base64");i.picture=`data:image/jpeg;base64, ${f}`}catch(d){x.error(d&&typeof d=="object"&&"name"in d?d.name:"",d)}}});let c=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...c},data:i}}}};var bt=require("@better-fetch/fetch");var yt=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:s}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),y({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:o,redirectURI:s})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,bt.betterFetch)("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...s},data:r}}});var K={isAction:!1};var At=require("@better-auth/utils/random"),Tt=e=>(0,At.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32);var Et=require("jose"),kt=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["user:read:email","openid"];return e.scope&&s.push(...e.scope),y({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:s,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return x.error("No idToken found in token"),null;let o=(0,Et.decodeJwt)(r),s=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...s},data:o}}});var Rt=require("@better-fetch/fetch");var Ut=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),y({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,Rt.betterFetch)("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...s},data:r}}});var Ot=require("@better-fetch/fetch");var _t=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:o,codeVerifier:s,redirectURI:i})=>{let n=o||["account_info.read"];return e.scope&&n.push(...e.scope),await y({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:n,state:r,redirectURI:i,codeVerifier:s})},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:s})=>await w({code:r,codeVerifier:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:s}=await(0,Ot.betterFetch)("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(s)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...i},data:o}}}};var St=require("@better-fetch/fetch");var vt=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:s,redirectURI:i})=>{let n=s||["profile","email","openid"];return e.scope&&n.push(...e.scope),await y({id:"linkedin",options:e,authorizationEndpoint:t,scopes:n,state:o,redirectURI:i})},validateAuthorizationCode:async({code:o,redirectURI:s})=>await w({code:o,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:r}),async getUserInfo(o){let{data:s,error:i}=await(0,St.betterFetch)("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:s.name,email:s.email,emailVerified:s.email_verified||!1,image:s.picture,...n},data:s}}}};var Pt=require("@better-fetch/fetch");var Le=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),Ar=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:Le(`${t}/oauth/authorize`),tokenEndpoint:Le(`${t}/oauth/token`),userinfoEndpoint:Le(`${t}/api/v4/user`)}},It=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Ar(e.issuer),s="gitlab";return{id:s,name:"Gitlab",createAuthorizationURL:async({state:n,scopes:c,codeVerifier:a,redirectURI:d})=>{let l=c||["read_user"];return e.scope&&l.push(...e.scope),await y({id:s,options:e,authorizationEndpoint:t,scopes:l,state:n,redirectURI:d,codeVerifier:a})},validateAuthorizationCode:async({code:n,redirectURI:c,codeVerifier:a})=>w({code:n,redirectURI:e.redirectURI||c,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);let{data:c,error:a}=await(0,Pt.betterFetch)(o,{headers:{authorization:`Bearer ${n.accessToken}`}});if(a||c.state!=="active"||c.locked)return null;let d=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...d},data:c}}}};var xe=require("@better-fetch/fetch");var Lt=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let s=r||["identity"];return e.scope&&s.push(...e.scope),y({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:s,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),s={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:n}=await(0,xe.betterFetch)("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:s,body:o.toString()});if(n)throw n;return pe(i)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,xe.betterFetch)("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let s=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...s},data:r}}});var xt=require("zod"),Tr={apple:nt,discord:ct,facebook:pt,github:ut,microsoft:wt,google:ft,spotify:yt,twitch:kt,twitter:Ut,dropbox:_t,linkedin:vt,gitlab:It,reddit:Lt},Ce=Object.keys(Tr),Ct=xt.z.enum(Ce,{description:"OAuth2 provider to use"});var I=require("zod");var J=require("better-call");var B=require("better-call");var H=require("zod");function Dt(e){try{return JSON.parse(e)}catch{return null}}var u={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var Nt=require("@better-auth/utils/hmac"),Bt=require("@better-auth/utils/base64"),jt=require("@better-auth/utils/binary"),Ft=()=>p("/get-session",{method:"GET",query:H.z.optional(H.z.object({disableCookieCache:H.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(H.z.string().transform(e=>e==="true")).optional(),disableRefresh:H.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Dt(jt.binary.decode(Bt.base64.decode(r))):null;if(o&&!await(0,Nt.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return P(e),e.json(null);let s=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=o.session;if(o.expiresAt<Date.now()||l.session.expiresAt<new Date){let g=e.context.authCookies.sessionData.name;e.setCookie(g,"",{maxAge:0})}else return e.json(l)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return P(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(s||e.query?.disableRefresh)return e.json(i);let n=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-n*1e3+c*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:z(e.context.sessionConfig.expiresIn,"sec")});if(!l)return P(e),e.json(null,{status:401});let f=(l.expiresAt.valueOf()-Date.now())/1e3;return await A(e,{session:l,user:i.user},!1,{maxAge:f}),e.json({session:l,user:i.user})}return await Ue(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new B.APIError("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION})}}),V=async(e,t)=>{if(e.context.session)return e.context.session;let r=await Ft()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},k=F(async e=>{let t=await V(e);if(!t?.session)throw new B.APIError("UNAUTHORIZED");return{session:t}}),Ti=F(async e=>{let t=await V(e);if(!t?.session)throw new B.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new B.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var Er=p("/revoke-session",{method:"POST",body:H.z.object({token:H.z.string({description:"The token to revoke"})}),use:[k],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new B.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new B.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new B.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),kr=p("/revoke-sessions",{method:"POST",use:[k],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new B.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Rr=p("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[k],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new B.APIError("UNAUTHORIZED");let s=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(s.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});var Mt=require("jose");var Vt=require("jose");async function $t(e,t,r=3600){return await new Vt.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}async function $(e,t,r){return await $t({email:t.toLowerCase(),updateTo:r},e)}async function Ur(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new J.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await $(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}var Or=p("/send-verification-email",{method:"POST",query:I.z.object({currentURL:I.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:I.z.object({email:I.z.string({description:"The email to send the verification email to"}).email(),callbackURL:I.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new J.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new J.APIError("BAD_REQUEST",{message:u.USER_NOT_FOUND});return await Ur(e,r.user),e.json({status:!0})}),_r=p("/verify-email",{method:"GET",query:I.z.object({token:I.z.string({description:"The token to verify the email"}),callbackURL:I.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new J.APIError("UNAUTHORIZED",{message:c})}let{token:r}=e.query,o;try{o=await(0,Mt.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let i=I.z.object({email:I.z.string().email(),updateTo:I.z.string().optional()}).parse(o.payload),n=await e.context.internalAdapter.findUserByEmail(i.email);if(!n)return t("user_not_found");if(i.updateTo){let c=await V(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),d=await $(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${d}`,token:d},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await V(e)){let a=await e.context.internalAdapter.createSession(n.user.id,e.request);if(!a)throw new J.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await A(e,{session:a,user:n.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function me(e,{userInfo:t,account:r,callbackURL:o}){let s=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw x.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=s?.user,n=!i;if(s){let a=s.accounts.find(d=>d.providerId===r.providerId);if(a){let d=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([l,f])=>f!==void 0));Object.keys(d).length>0&&await e.context.internalAdapter.updateAccount(a.id,d)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return Re&&x.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:s.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(f){return x.error("Unable to link account",f),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let a=await $(e.context.secret,i.email),d=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:d,token:a},e.request)}}catch(a){return a instanceof De.APIError?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(i.id,e.request);return c?{data:{session:c,user:i},error:null,isRegister:n}:{error:"unable to create session",data:null,isRegister:!1}}var Sr=p("/sign-in/social",{method:"POST",query:T.z.object({currentURL:T.z.string().optional()}).optional(),body:T.z.object({callbackURL:T.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:T.z.string().optional(),errorCallbackURL:T.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:Ct,disableRedirect:T.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:T.z.optional(T.z.object({token:T.z.string({description:"ID token from the provider"}),nonce:T.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:T.z.string({description:"Access token from the provider"}).optional(),refreshToken:T.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:T.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new U.APIError("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new U.APIError("NOT_FOUND",{message:u.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:n}=e.body.idToken;if(!await t.verifyIdToken(i,n))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:u.INVALID_TOKEN});let a=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:u.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:u.USER_EMAIL_NOT_FOUND});let d=await me(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(d.error)throw new U.APIError("UNAUTHORIZED",{message:d.error});return await A(e,d.data),e.json({token:d.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await le(e),s=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:s.toString(),redirect:!e.body.disableRedirect})}),vr=p("/sign-in/email",{method:"POST",body:T.z.object({email:T.z.string({description:"Email of the user"}),password:T.z.string({description:"Password of the user"}),callbackURL:T.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:T.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new U.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!T.z.string().email().safeParse(t).success)throw new U.APIError("BAD_REQUEST",{message:u.INVALID_EMAIL});let s=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!s)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let i=s.accounts.find(d=>d.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let n=i?.password;if(!n)throw e.context.logger.error("Password not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:n,password:r}))throw e.context.logger.error("Invalid password"),new U.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!s.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new U.APIError("UNAUTHORIZED",{message:u.EMAIL_NOT_VERIFIED});let d=await $(e.context.secret,s.user.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:s.user,url:l,token:d},e.request),e.context.logger.error("Email not verified",{email:t}),new U.APIError("FORBIDDEN",{message:u.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(s.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new U.APIError("UNAUTHORIZED",{message:u.FAILED_TO_CREATE_SESSION});return await A(e,{session:a,user:s.user},e.body.rememberMe===!1),e.json({user:{id:s.user.id,email:s.user.email,name:s.user.name,image:s.user.image,emailVerified:s.user.emailVerified,createdAt:s.user.createdAt,updatedAt:s.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var Y=require("zod");var fe=Y.z.object({code:Y.z.string().optional(),error:Y.z.string().optional(),error_description:Y.z.string().optional(),state:Y.z.string().optional()}),Pr=p("/callback/:id",{method:["GET","POST"],body:fe.optional(),query:fe.optional(),metadata:K},async e=>{let t;try{if(e.method==="GET")t=fe.parse(e.query);else if(e.method==="POST")t=fe.parse(e.body);else throw new Error("Unsupported method")}catch(v){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",v),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:s,error_description:i}=t;if(!s)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${i}`);let n=e.context.socialProviders.find(v=>v.id===e.params.id);if(!n)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:a,link:d,errorURL:l,newUserURL:f}=await ot(e),g;try{g=await n.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${n.id}`})}catch(v){throw e.context.logger.error("",v),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let h=await n.getUserInfo(g).then(v=>v?.user);function b(v){let C=l||a||`${e.context.baseURL}/error`;throw C.includes("?")?C=`${C}&error=${v}`:C=`${C}?error=${v}`,e.redirect(C)}if(!h)return e.context.logger.error("Unable to get user info"),b("unable_to_get_user_info");if(!h.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),b("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(d){if(d.email!==h.email.toLowerCase())return b("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:d.userId,providerId:n.id,accountId:h.id}))return b("unable_to_link_account");let C;try{C=a.toString()}catch{C=a}throw e.redirect(C)}let O=await me(e,{userInfo:{...h,email:h.email,name:h.name||h.email},account:{providerId:n.id,accountId:h.id,...g,scope:g.scopes?.join(",")},callbackURL:a});if(O.error)return e.context.logger.error(O.error.split(" ").join("_")),b(O.error.split(" ").join("_"));let{session:ze,user:be}=O.data;await A(e,{session:ze,user:be});let ye;try{ye=(O.isRegister&&f||a).toString()}catch{ye=O.isRegister&&f||a}throw e.redirect(ye)});var Qi=require("zod");var zt=require("better-call");var Ir=p("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw P(e),new zt.APIError("BAD_REQUEST",{message:u.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),P(e),e.json({success:!0})});var _=require("zod");var X=require("better-call");function qt(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([s,i])=>o.searchParams.set(s,i)),o.href}function Lr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([s,i])=>o.searchParams.set(s,i)),o.href}var xr=p("/forget-password",{method:"POST",body:_.z.object({email:_.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:_.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new X.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let s=60*60*1,i=z(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||s,"sec"),n=Tt(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${n}`,expiresAt:i});let c=`${e.context.baseURL}/reset-password/${n}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:n},e.request),e.json({status:!0})}),Cr=p("/reset-password/:token",{method:"GET",query:_.z.object({callbackURL:_.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(qt(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(qt(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Lr(e.context,r,{token:t}))}),Dr=p("/reset-password",{query:_.z.optional(_.z.object({token:_.z.string().optional(),currentURL:_.z.string().optional()})),method:"POST",body:_.z.object({newPassword:_.z.string({description:"The new password to set"}),token:_.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new X.APIError("BAD_REQUEST",{message:u.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,s=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new X.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});if(r.length>s)throw new X.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,n=await e.context.internalAdapter.findVerificationValue(i);if(!n||n.expiresAt<new Date)throw new X.APIError("BAD_REQUEST",{message:u.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(n.id);let c=n.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(f=>f.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:a,accountId:c}),e.json({status:!0}))});var R=require("zod");var E=require("better-call");var m=require("zod"),Nr=require("better-call"),nn=m.z.object({id:m.z.string(),providerId:m.z.string(),accountId:m.z.string(),userId:m.z.string(),accessToken:m.z.string().nullish(),refreshToken:m.z.string().nullish(),idToken:m.z.string().nullish(),accessTokenExpiresAt:m.z.date().nullish(),refreshTokenExpiresAt:m.z.date().nullish(),scope:m.z.string().nullish(),password:m.z.string().nullish(),createdAt:m.z.date().default(()=>new Date),updatedAt:m.z.date().default(()=>new Date)}),an=m.z.object({id:m.z.string(),email:m.z.string().transform(e=>e.toLowerCase()),emailVerified:m.z.boolean().default(!1),name:m.z.string(),image:m.z.string().nullish(),createdAt:m.z.date().default(()=>new Date),updatedAt:m.z.date().default(()=>new Date)}),cn=m.z.object({id:m.z.string(),userId:m.z.string(),expiresAt:m.z.date(),createdAt:m.z.date().default(()=>new Date),updatedAt:m.z.date().default(()=>new Date),token:m.z.string(),ipAddress:m.z.string().nullish(),userAgent:m.z.string().nullish()}),dn=m.z.object({id:m.z.string(),value:m.z.string(),createdAt:m.z.date().default(()=>new Date),updatedAt:m.z.date().default(()=>new Date),expiresAt:m.z.date(),identifier:m.z.string()});function Ht(e,t){if(!t)return e;for(let r in t){let o=t[r]?.modelName;o&&(e[r].modelName=o);for(let s in e[r].fields){let i=t[r]?.fields?.[s];i&&(e[r].fields[s].fieldName=i)}}return e}var jr=p("/change-password",{method:"POST",body:R.z.object({newPassword:R.z.string({description:"The new password to set"}),currentPassword:R.z.string({description:"The current password"}),revokeOtherSessions:R.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[k],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,s=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new E.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new E.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(s.user.id)).find(g=>g.providerId==="credential"&&g.password);if(!a||!a.password)throw new E.APIError("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});let d=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new E.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:d});let f=null;if(o){await e.context.internalAdapter.deleteSessions(s.user.id);let g=await e.context.internalAdapter.createSession(s.user.id,e.headers);if(!g)throw new E.APIError("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION});await A(e,{session:g,user:s.user}),f=g.token}return e.json({token:f})}),Fr=p("/set-password",{method:"POST",body:R.z.object({newPassword:R.z.string()}),metadata:{SERVER_ONLY:!0},use:[k]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new E.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new E.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let n=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),c=await e.context.password.hash(t);if(!n)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new E.APIError("BAD_REQUEST",{message:"user already has a password"})}),Vr=p("/delete-user",{method:"POST",use:[k],body:R.z.object({callbackURL:R.z.string().optional(),password:R.z.string().optional(),token:R.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new E.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!i||!i.password)throw new E.APIError("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new E.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let s=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-s>i)throw new E.APIError("BAD_REQUEST",{message:u.SESSION_EXPIRED})}if(e.body.token)return await Gt({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let s=L(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${s}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${s}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:s},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),P(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Gt=p("/delete-user/callback",{method:"GET",query:R.z.object({token:R.z.string(),callbackURL:R.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new E.APIError("NOT_FOUND");let t=await V(e);if(!t)throw new E.APIError("NOT_FOUND",{message:u.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new E.APIError("NOT_FOUND",{message:u.INVALID_TOKEN});if(r.value!==t.user.id)throw new E.APIError("NOT_FOUND",{message:u.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),P(e);let s=e.context.options.user.deleteUser?.afterDelete;if(s&&await s(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),$r=p("/change-email",{method:"POST",query:R.z.object({currentURL:R.z.string().optional()}).optional(),body:R.z.object({newEmail:R.z.string({description:"The new email to set"}).email(),callbackURL:R.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[k],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new E.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new E.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new E.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let s=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new E.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await $(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var Mr=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,zr=p("/error",{method:"GET",metadata:{...K,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Mr(t),{headers:{"Content-Type":"text/html"}})});var qr=p("/ok",{method:"GET",metadata:{...K,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var Hr=require("zod");var Gr=require("better-call");var ee=require("zod");var Ne=require("better-call");var Wr=p("/list-accounts",{method:"GET",use:[k],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),Qr=p("/link-social",{method:"POST",requireHeaders:!0,query:ee.z.object({currentURL:ee.z.string().optional()}).optional(),body:ee.z.object({callbackURL:ee.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:ee.z.enum(Ce,{description:"The OAuth2 provider to use"})}),use:[k],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new Ne.APIError("BAD_REQUEST",{message:u.SOCIAL_ACCOUNT_ALREADY_LINKED});let s=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!s)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Ne.APIError("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});let i=await le(e,{userId:t.user.id,email:t.user.email}),n=await s.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${s.id}`});return e.json({url:n.toString(),redirect:!0})});var Ta=require("defu");var De=require("better-call");var j=require("zod");var re=require("better-call");var ge="two_factor";var he="trust_device";var Be=require("zod");var Wt=require("@better-auth/utils/hmac"),La=require("@better-auth/utils/base64"),W=F({body:Be.z.object({trustDevice:Be.z.boolean().optional()})},async e=>{let t=await V(e);if(!t){let r=e.context.createAuthCookie(ge),o=await e.getSignedCookie(r.name,e.context.secret);if(!o)throw new re.APIError("UNAUTHORIZED",{message:"invalid two factor cookie"});let s=await e.context.internalAdapter.findUserById(o);if(!s)throw new re.APIError("UNAUTHORIZED",{message:"invalid two factor cookie"});let i=await e.context.internalAdapter.createSession(o,e.request);if(!i)throw new re.APIError("INTERNAL_SERVER_ERROR",{message:"failed to create session"});return{valid:async()=>{if(await A(e,{session:i,user:s}),e.body.trustDevice){let n=e.context.createAuthCookie(he,{maxAge:2592e3}),c=await(0,Wt.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,`${s.id}!${i.token}`);await e.setSignedCookie(n.name,`${c}!${i.token}`,e.context.secret,n.attributes)}return e.json({token:i.token})},invalid:async()=>{throw new re.APIError("UNAUTHORIZED",{message:"invalid two factor authentication"})},session:{session:i,user:s}}}return{valid:async()=>e.json({token:t.session.token}),invalid:async()=>{throw new re.APIError("UNAUTHORIZED",{message:"invalid two factor authentication"})},session:t}});var oe=require("better-call");var S={OTP_NOT_ENABLED:"OTP not enabled",OTP_HAS_EXPIRED:"OTP has expired",TOTP_NOT_ENABLED:"TOTP not enabled",TWO_FACTOR_NOT_ENABLED:"Two factor isn't enabled",BACKUP_CODES_NOT_ENABLED:"Backup codes aren't enabled",INVALID_BACKUP_CODE:"Invalid backup code"};function Zr(e){return Array.from({length:e?.amount??10}).fill(null).map(()=>L(e?.length??10,"a-z","0-9","A-Z")).map(t=>`${t.slice(0,5)}-${t.slice(5)}`)}async function je(e,t){let r=e,o=t?.customBackupCodesGenerate?t.customBackupCodesGenerate():Zr(),s=await ne({data:JSON.stringify(o),key:r});return{backupCodes:o,encryptedBackupCodes:s}}async function Kr(e,t){let r=await Qt(e.backupCodes,t);return r?{status:r.includes(e.code),updated:r.filter(o=>o!==e.code)}:{status:!1,updated:null}}async function Qt(e,t){let r=Buffer.from(await ue({key:t,data:e})).toString("utf-8"),o=JSON.parse(r),s=j.z.array(j.z.string()).safeParse(o);return s.success?s.data:null}var Zt=e=>{let t="twoFactor";return{id:"backup_code",endpoints:{verifyBackupCode:p("/two-factor/verify-backup-code",{method:"POST",body:j.z.object({code:j.z.string(),disableSession:j.z.boolean().optional()}),use:[W]},async r=>{let o=r.context.session.user,s=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:o.id}]});if(!s)throw new oe.APIError("BAD_REQUEST",{message:S.BACKUP_CODES_NOT_ENABLED});let i=await Kr({backupCodes:s.backupCodes,code:r.body.code},r.context.secret);if(!i.status)throw new oe.APIError("UNAUTHORIZED",{message:S.INVALID_BACKUP_CODE});let n=await ne({key:r.context.secret,data:JSON.stringify(i.updated)});return await r.context.adapter.updateMany({model:t,update:{backupCodes:n},where:[{field:"userId",value:o.id}]}),r.body.disableSession||await A(r,{session:r.context.session.session,user:o}),r.json({user:o,session:r.context.session})}),generateBackupCodes:p("/two-factor/generate-backup-codes",{method:"POST",body:j.z.object({password:j.z.string()}),use:[k]},async r=>{let o=r.context.session.user;if(!o.twoFactorEnabled)throw new oe.APIError("BAD_REQUEST",{message:S.TWO_FACTOR_NOT_ENABLED});await r.context.password.checkPassword(o.id,r);let s=await je(r.context.secret,e);return await r.context.adapter.update({model:t,update:{backupCodes:s.encryptedBackupCodes},where:[{field:"userId",value:r.context.session.user.id}]}),r.json({status:!0,backupCodes:s.backupCodes})}),viewBackupCodes:p("/two-factor/view-backup-codes",{method:"GET",body:j.z.object({userId:j.z.string()}),metadata:{SERVER_ONLY:!0}},async r=>{let o=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:r.body.userId}]});if(!o)throw new oe.APIError("BAD_REQUEST",{message:"Backup codes aren't enabled"});let s=await Qt(o.backupCodes,r.context.secret);if(!s)throw new oe.APIError("BAD_REQUEST",{message:S.BACKUP_CODES_NOT_ENABLED});return r.json({status:!0,backupCodes:s})})}}};var se=require("better-call"),Fe=require("zod");var Kt=e=>{let t={...e,digits:e?.digits||6,period:(e?.period||3)*60*1e3},r="twoFactor",o=p("/two-factor/send-otp",{method:"POST",use:[W],metadata:{openapi:{summary:"Send two factor OTP",description:"Send two factor OTP to the user",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async i=>{if(!e||!e.sendOTP)throw i.context.logger.error("send otp isn't configured. Please configure the send otp function on otp options."),new se.APIError("BAD_REQUEST",{message:"otp isn't configured"});let n=i.context.session.user;if(!await i.context.adapter.findOne({model:r,where:[{field:"userId",value:n.id}]}))throw new se.APIError("BAD_REQUEST",{message:S.OTP_NOT_ENABLED});let a=L(t.digits,"0-9");return await i.context.internalAdapter.createVerificationValue({value:a,identifier:`2fa-otp-${n.id}`,expiresAt:new Date(Date.now()+t.period)}),await e.sendOTP({user:n,otp:a},i.request),i.json({status:!0})}),s=p("/two-factor/verify-otp",{method:"POST",body:Fe.z.object({code:Fe.z.string({description:"The otp code to verify"})}),use:[W],metadata:{openapi:{summary:"Verify two factor OTP",description:"Verify two factor OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async i=>{let n=i.context.session.user;if(!n.twoFactorEnabled)throw new se.APIError("BAD_REQUEST",{message:"two factor isn't enabled"});if(!await i.context.adapter.findOne({model:r,where:[{field:"userId",value:n.id}]}))throw new se.APIError("BAD_REQUEST",{message:S.OTP_NOT_ENABLED});let a=await i.context.internalAdapter.findVerificationValue(`2fa-otp-${n.id}`);if(!a||a.expiresAt<new Date)throw new se.APIError("BAD_REQUEST",{message:S.OTP_HAS_EXPIRED});return a.value===i.body.code?i.context.valid():i.context.invalid()});return{id:"otp",endpoints:{sendTwoFactorOTP:o,verifyTwoFactorOTP:s}}};var Q=require("better-call"),ae=require("zod");var we=require("@better-auth/utils/otp"),Jt=e=>{let t={...e,digits:e?.digits||6,period:e?.period||30},r="twoFactor",o=p("/totp/generate",{method:"POST",use:[k],metadata:{openapi:{summary:"Generate TOTP code",description:"Use this endpoint to generate a TOTP code",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{code:{type:"string"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new Q.APIError("BAD_REQUEST",{message:"totp isn't configured"});let c=n.context.session.user,a=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a)throw new Q.APIError("BAD_REQUEST",{message:S.TOTP_NOT_ENABLED});return{code:await(0,we.createOTP)(a.secret,{period:t.period,digits:t.digits}).totp()}}),s=p("/two-factor/get-totp-uri",{method:"POST",use:[k],body:ae.z.object({password:ae.z.string({description:"User password"})}),metadata:{openapi:{summary:"Get TOTP URI",description:"Use this endpoint to get the TOTP URI",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new Q.APIError("BAD_REQUEST",{message:"totp isn't configured"});let c=n.context.session.user,a=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a||!c.twoFactorEnabled)throw new Q.APIError("BAD_REQUEST",{message:S.TOTP_NOT_ENABLED});return await n.context.password.checkPassword(c.id,n),{totpURI:(0,we.createOTP)(a.secret,{digits:t.digits,period:t.period}).url(e?.issuer||n.context.appName,c.email)}}),i=p("/two-factor/verify-totp",{method:"POST",body:ae.z.object({code:ae.z.string({description:"The otp code to verify"})}),use:[W],metadata:{openapi:{summary:"Verify two factor TOTP",description:"Verify two factor TOTP",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new Q.APIError("BAD_REQUEST",{message:"totp isn't configured"});let c=n.context.session.user,a=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a)throw new Q.APIError("BAD_REQUEST",{message:S.TOTP_NOT_ENABLED});let d=await ue({key:n.context.secret,data:a.secret});if(!await(0,we.createOTP)(d,{period:t.period,digits:t.digits}).verify(n.body.code))return n.context.invalid();if(!c.twoFactorEnabled){let f=await n.context.internalAdapter.updateUser(c.id,{twoFactorEnabled:!0}),g=await n.context.internalAdapter.createSession(c.id,n.request,!1,n.context.session.session).catch(h=>{throw console.log(h),h});await n.context.internalAdapter.deleteSession(n.context.session.session.token),await A(n,{session:g,user:f})}return n.context.valid()});return{id:"totp",endpoints:{generateTOTP:o,getTOTPURI:s,verifyTOTP:i}}};var Jr=require("better-call");async function Ve(e,t){let o=(await e.context.internalAdapter.findAccounts(t.userId))?.find(n=>n.providerId==="credential"),s=o?.password;return!o||!s?!1:await e.context.password.verify({hash:s,password:t.password})}var $e=require("better-call");var Yt={user:{fields:{twoFactorEnabled:{type:"boolean",required:!1,defaultValue:!1,input:!1}}},twoFactor:{fields:{secret:{type:"string",required:!0,returned:!1},backupCodes:{type:"string",required:!0,returned:!1},userId:{type:"string",required:!0,returned:!1,references:{model:"user",field:"id"}}}}};var Xt=require("@better-auth/utils/otp"),bc=require("@better-auth/utils/base64"),Me=require("@better-auth/utils/hmac");var Yr=e=>({id:"two-factor",$InferServerPlugin:{},atomListeners:[{matcher:t=>t.startsWith("/two-factor/"),signal:"$sessionSignal"}],pathMethods:{"/two-factor/disable":"POST","/two-factor/enable":"POST","/two-factor/send-otp":"POST","/two-factor/generate-backup-codes":"POST"},fetchPlugins:[{id:"two-factor",name:"two-factor",hooks:{async onSuccess(t){t.data?.twoFactorRedirect&&e?.onTwoFactorRedirect&&await e.onTwoFactorRedirect()}}}]});var Xr=e=>{let t={twoFactorTable:"twoFactor"},r=Jt(e?.totpOptions),o=Zt(e?.backupCodeOptions),s=Kt(e?.otpOptions);return{id:"two-factor",endpoints:{...r.endpoints,...s.endpoints,...o.endpoints,enableTwoFactor:p("/two-factor/enable",{method:"POST",body:ce.z.object({password:ce.z.string({description:"User password"}).min(8)}),use:[k],metadata:{openapi:{summary:"Enable two factor authentication",description:"Use this endpoint to enable two factor authentication. This will generate a TOTP URI and backup codes. Once the user verifies the TOTP URI, the two factor authentication will be enabled.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string",description:"TOTP URI"},backupCodes:{type:"array",items:{type:"string"},description:"Backup codes"}}}}}}}}}},async i=>{let n=i.context.session.user,{password:c}=i.body;if(!await Ve(i,{password:c,userId:n.id}))throw new $e.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD});let d=L(32),l=await ne({key:i.context.secret,data:d}),f=await je(i.context.secret,e?.backupCodeOptions);if(e?.skipVerificationOnEnable){let h=await i.context.internalAdapter.updateUser(n.id,{twoFactorEnabled:!0}),b=await i.context.internalAdapter.createSession(h.id,i.request,!1,i.context.session.session);await A(i,{session:b,user:n}),await i.context.internalAdapter.deleteSession(i.context.session.session.token)}await i.context.adapter.deleteMany({model:t.twoFactorTable,where:[{field:"userId",value:n.id}]}),await i.context.adapter.create({model:t.twoFactorTable,data:{secret:l,backupCodes:f.encryptedBackupCodes,userId:n.id}});let g=(0,Xt.createOTP)(d,{digits:e?.totpOptions?.digits||6,period:e?.totpOptions?.period}).url(e?.issuer||"Better Auth",n.email);return i.json({totpURI:g,backupCodes:f.backupCodes})}),disableTwoFactor:p("/two-factor/disable",{method:"POST",body:ce.z.object({password:ce.z.string({description:"User password"}).min(8)}),use:[k],metadata:{openapi:{summary:"Disable two factor authentication",description:"Use this endpoint to disable two factor authentication.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async i=>{let n=i.context.session.user,{password:c}=i.body;if(!await Ve(i,{password:c,userId:n.id}))throw new $e.APIError("BAD_REQUEST",{message:"Invalid password"});await i.context.internalAdapter.updateUser(n.id,{twoFactorEnabled:!1}),await i.context.adapter.delete({model:t.twoFactorTable,where:[{field:"userId",value:n.id}]});let d=await i.context.internalAdapter.createSession(n.id,i.request,!1,i.context.session.session);return await A(i,{session:d,user:n}),await i.context.internalAdapter.deleteSession(i.context.session.session.token),i.json({status:!0})})},options:e,hooks:{after:[{matcher(i){return i.path==="/sign-in/email"||i.path==="/sign-in/username"||i.path==="/sign-in/phone-number"},handler:F(async i=>{let n=i.context.newSession;if(!n||!n?.user.twoFactorEnabled)return;let c=i.context.createAuthCookie(he),a=await i.getSignedCookie(c.name,i.context.secret);if(a){let[l,f]=a.split("!"),g=await(0,Me.createHMAC)("SHA-256","base64urlnopad").sign(i.context.secret,`${n.user.id}!${f}`);if(l===g){let h=await(0,Me.createHMAC)("SHA-256","base64urlnopad").sign(i.context.secret,`${n.user.id}!${f}`);await i.setSignedCookie(c.name,`${h}!${n.session.token}`,i.context.secret,c.attributes);return}}P(i),await i.context.internalAdapter.deleteSession(n.session.token);let d=i.context.createAuthCookie(ge,{maxAge:60*10});return await i.setSignedCookie(d.name,n.user.id,i.context.secret,d.attributes),i.json({twoFactorRedirect:!0})})}]},schema:Ht(Yt,e?.schema),rateLimit:[{pathMatcher(i){return i.startsWith("/two-factor/")},window:10,max:3}]}};0&&(module.exports={twoFactor,twoFactorClient});
