var Tt=Object.defineProperty;var s=(e,t)=>Tt(e,"name",{value:t,configurable:!0});import{APIError as Rt}from"better-call";import{z as re}from"zod";import{createEndpointCreator as Ut,createMiddleware as Ue,createMiddlewareCreator as St}from"better-call";var Se=Ue(async()=>({})),K=St({use:[Se,Ue(async()=>({}))]}),p=Ut({use:[Se]});import{APIError as z}from"better-call";import{z as E}from"zod";var F=class extends Error{static{s(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};var q=s((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");var ce=Object.create(null),oe=s(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ce:globalThis),"_getEnv"),ve=new Proxy(ce,{get(e,t){return oe()[t]??ce[t]},has(e,t){let r=oe();return t in r||t in ce},set(e,t,r){let o=oe(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=oe(!0);return delete r[t],!0},ownKeys(){let e=oe(!0);return Object.keys(e)}});function vt(e){return e?e!=="false":!1}s(vt,"toBoolean");var we=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var ye=we==="dev"||we==="development",kt=we==="test"||vt(ve.TEST);import{base64Url as Nt}from"@better-auth/utils/base64";import{createHMAC as zt}from"@better-auth/utils/hmac";async function be(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=Nt.encode(JSON.stringify({session:t,expiresAt:q(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await zt("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new F("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}s(be,"setCookieCache");async function k(e,t,r,o){let n=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...n,maxAge:i,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await be(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}s(k,"setSessionCookie");function H(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}s(H,"deleteSessionCookie");import{betterFetch as Ct}from"@better-fetch/fetch";import{APIError as jt}from"better-call";import{decodeJwt as Mt,decodeProtectedHeader as Bt,importJWK as Vt,jwtVerify as $t}from"jose";import{createHash as Lt}from"@better-auth/utils/hash";import{base64Url as Dt}from"@better-auth/utils/base64";async function ke(e){let t=await Lt("SHA-256").digest(e);return Dt.encode(new Uint8Array(t),{padding:!1})}s(ke,"generateCodeChallenge");function le(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?q(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}s(le,"getOAuth2Tokens");async function A({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:n,scopes:i,claims:a,redirectURI:d,duration:c}){let l=new URL(r);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",t.clientId),l.searchParams.set("state",o),l.searchParams.set("scope",i.join(" ")),l.searchParams.set("redirect_uri",t.redirectURI||d),n){let u=await ke(n);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",u)}if(a){let u=a.reduce((g,h)=>(g[h]=null,g),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return c&&l.searchParams.set("duration",c),l}s(A,"createAuthorizationURL");import{betterFetch as Pt}from"@better-fetch/fetch";import{jwtVerify as Fo}from"jose";async function O({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:n,authentication:i}){let a=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),i==="basic"){let g=btoa(`${o.clientId}:${o.clientSecret}`);d.authorization=`Basic ${g}`}else a.set("client_id",o.clientId),a.set("client_secret",o.clientSecret);let{data:c,error:l}=await Pt(n,{method:"POST",body:a,headers:d});if(l)throw l;return le(c)}s(O,"validateAuthorizationCode");import{z as Y}from"zod";import{APIError as Le}from"better-call";function Ne(e){try{return new URL(e).origin}catch{return null}}s(Ne,"getOrigin");function ze(e){return e.includes("://")?new URL(e).host:e}s(ze,"getHost");import{createHash as pn}from"@better-auth/utils/hash";import{xchacha20poly1305 as fn}from"@noble/ciphers/chacha";import{bytesToHex as hn,hexToBytes as wn,utf8ToBytes as yn}from"@noble/ciphers/utils";import{managedNonce as On}from"@noble/ciphers/webcrypto";import{scryptAsync as tn}from"@noble/hashes/scrypt";import{getRandomValues as on}from"uncrypto";import{hex as sn}from"@better-auth/utils/hex";import{createRandomStringGenerator as xt}from"@better-auth/utils/random";var ne=xt("a-z","0-9","A-Z","-_");async function ue(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Ne(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Le("BAD_REQUEST",{message:"callbackURL is required"});let o=ne(128),n=ne(32),i=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:i,identifier:n,expiresAt:a});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Le("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:o}}s(ue,"generateState");async function De(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=Y.object({callbackURL:Y.string(),codeVerifier:Y.string(),errorURL:Y.string().optional(),newUserURL:Y.string().optional(),expiresAt:Y.number(),link:Y.object({email:Y.string(),userId:Y.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}s(De,"parseState");var Pe=s(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:n}){let i=o||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||n}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:n})=>O({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let n=Bt(r),{kid:i,alg:a}=n;if(!i||!a)return!1;let d=await Ft(i),{payload:c}=await $t(r,d,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{c[l]!==void 0&&(c[l]=!!c[l])}),o&&c.nonce!==o?!1:!!c},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=Mt(r.idToken);if(!o)return null;let n=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:n,emailVerified:!1,email:o.email,...i},data:o}}}},"apple"),Ft=s(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await Ct(`${t}${r}`);if(!o?.keys)throw new jt("BAD_REQUEST",{message:"Keys not found"});let n=o.keys.find(i=>i.kid===e);if(!n)throw new Error(`JWK with kid ${e} not found`);return await Vt(n,n.alg)},"getApplePublicKey");import{betterFetch as qt}from"@better-fetch/fetch";var xe=s(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identify","email"];return e.scope&&n.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>O({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await qt("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...n},data:r}}}),"discord");import{betterFetch as Ht}from"@better-fetch/fetch";var Ce=s(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["email","public_profile"];return e.scope&&n.push(...e.scope),await A({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:n,state:t,redirectURI:o})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>O({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Ht("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...n},data:r}}}),"facebook");import{betterFetch as je}from"@better-fetch/fetch";var Me=s(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:n,redirectURI:i}){let a=o||["user:email"];return e.scope&&a.push(...e.scope),A({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:i})},validateAuthorizationCode:s(async({code:r,redirectURI:o})=>O({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await je("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=!1,{data:a}=await je("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(o.email=(a.find(c=>c.primary)??a[0])?.email,i=a.find(c=>c.email===o.email)?.verified??!1);let d=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:i,...d},data:o}}}},"github");var Oe=["info","success","warn","error","debug"];function Gt(e,t){return Oe.indexOf(t)<=Oe.indexOf(e)}s(Gt,"shouldPublishLog");var G={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Zt={info:G.fg.blue,success:G.fg.green,warn:G.fg.yellow,error:G.fg.red,debug:G.fg.magenta},Qt=s((e,t)=>{let r=new Date().toISOString();return`${G.dim}${r}${G.reset} ${Zt[e]}${e.toUpperCase()}${G.reset} ${G.bright}Better Auth${G.reset} ${t}`},"formatMessage"),Yt=s(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=s((n,i,a=[])=>{if(!t||!Gt(r,n))return;let d=Qt(n,i);if(!e||typeof e.log!="function"){n==="error"?console.error(d,...a):n==="warn"?console.warn(d,...a):console.log(d,...a);return}e.log(n==="success"?"info":n,d,...a)},"LogFunc");return Object.fromEntries(Oe.map(n=>[n,(...[i,...a])=>o(n,i,a)]))},"createLogger"),M=Yt();import{betterFetch as Wt}from"@better-fetch/fetch";import{decodeJwt as Jt}from"jose";var Be=s(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){if(!e.clientId||!e.clientSecret)throw M.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new F("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new F("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let a=await A({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:o,redirectURI:n});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>O({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:n}=await Wt(o);return n?n.aud===e.clientId&&n.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=Jt(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");import{betterFetch as Kt}from"@better-fetch/fetch";import{decodeJwt as Xt}from"jose";var Ve=s(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(n){let i=n.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),A({id:"microsoft",options:e,authorizationEndpoint:r,state:n.state,codeVerifier:n.codeVerifier,scopes:i,redirectURI:n.redirectURI})},validateAuthorizationCode({code:n,codeVerifier:i,redirectURI:a}){return O({code:n,codeVerifier:i,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:o})},async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);if(!n.idToken)return null;let i=Xt(n.idToken),a=e.profilePhotoSize||48;await Kt(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${n.accessToken}`},async onResponse(c){if(!(e.disableProfilePhoto||!c.response.ok))try{let u=await c.response.clone().arrayBuffer(),g=Buffer.from(u).toString("base64");i.picture=`data:image/jpeg;base64, ${g}`}catch(l){M.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let d=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...d},data:i}}}},"microsoft");import{betterFetch as er}from"@better-fetch/fetch";var $e=s(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),A({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:o,redirectURI:n})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>O({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await er("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...n},data:r}}}),"spotify");var te={isAction:!1};import{createRandomStringGenerator as tr}from"@better-auth/utils/random";var Z=s(e=>tr("a-z","A-Z","0-9")(e||32),"generateId");import{decodeJwt as rr}from"jose";var Fe=s(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["user:read:email","openid"];return e.scope&&n.push(...e.scope),A({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:n,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>O({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return M.error("No idToken found in token"),null;let o=rr(r),n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...n},data:o}}}),"twitch");import{betterFetch as or}from"@better-fetch/fetch";var qe=s(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),A({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>O({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await or("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...n},data:r}}}),"twitter");import{betterFetch as nr}from"@better-fetch/fetch";var He=s(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:s(async({state:r,scopes:o,codeVerifier:n,redirectURI:i})=>{let a=o||["account_info.read"];return e.scope&&a.push(...e.scope),await A({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:i,codeVerifier:n})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:n})=>await O({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await nr("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...i},data:o}}}},"dropbox");import{betterFetch as ir}from"@better-fetch/fetch";var Ge=s(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:s(async({state:o,scopes:n,redirectURI:i})=>{let a=n||["profile","email","openid"];return e.scope&&a.push(...e.scope),await A({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:o,redirectURI:i})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:o,redirectURI:n})=>await O({code:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:n,error:i}=await ir("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let a=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,emailVerified:n.email_verified||!1,image:n.picture,...a},data:n}}}},"linkedin");import{betterFetch as sr}from"@better-fetch/fetch";var Ae=s((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),ar=s(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:Ae(`${t}/oauth/authorize`),tokenEndpoint:Ae(`${t}/oauth/token`),userinfoEndpoint:Ae(`${t}/api/v4/user`)}},"issuerToEndpoints"),Ze=s(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=ar(e.issuer),n="gitlab";return{id:n,name:"Gitlab",createAuthorizationURL:s(async({state:a,scopes:d,codeVerifier:c,redirectURI:l})=>{let u=d||["read_user"];return e.scope&&u.push(...e.scope),await A({id:n,options:e,authorizationEndpoint:t,scopes:u,state:a,redirectURI:l,codeVerifier:c})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:a,redirectURI:d,codeVerifier:c})=>O({code:a,redirectURI:e.redirectURI||d,options:e,codeVerifier:c,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:d,error:c}=await sr(o,{headers:{authorization:`Bearer ${a.accessToken}`}});if(c||d.state!=="active"||d.locked)return null;let l=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...l},data:d}}}},"gitlab");import{betterFetch as Qe}from"@better-fetch/fetch";var Ye=s(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identity"];return e.scope&&n.push(...e.scope),A({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:n,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),n={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:a}=await Qe("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:n,body:o.toString()});if(a)throw a;return le(i)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Qe("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...n},data:r}}}),"reddit");import{z as dr}from"zod";var cr={apple:Pe,discord:xe,facebook:Ce,github:Me,microsoft:Ve,google:Be,spotify:$e,twitch:Fe,twitter:qe,dropbox:He,linkedin:Ge,gitlab:Ze,reddit:Ye},Ie=Object.keys(cr),We=dr.enum(Ie,{description:"OAuth2 provider to use"});import{z as B}from"zod";import{APIError as ie}from"better-call";import{APIError as W}from"better-call";import{z as X}from"zod";function Je(e){try{return JSON.parse(e)}catch{return null}}s(Je,"safeJSONParse");var f={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as lr}from"@better-auth/utils/hmac";import{base64 as ur}from"@better-auth/utils/base64";import{binary as pr}from"@better-auth/utils/binary";var Ke=s(()=>p("/get-session",{method:"GET",query:X.optional(X.object({disableCookieCache:X.boolean({description:"Disable cookie cache and fetch session from database"}).or(X.string().transform(e=>e==="true")).optional(),disableRefresh:X.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Je(pr.decode(ur.decode(r))):null;if(o&&!await lr("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return H(e),e.json(null);let n=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let u=o.session;if(o.expiresAt<Date.now()||u.session.expiresAt<new Date){let h=e.context.authCookies.sessionData.name;e.setCookie(h,"",{maxAge:0})}else return e.json(u)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return H(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(n||e.query?.disableRefresh)return e.json(i);let a=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-a*1e3+d*1e3<=Date.now()){let u=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:q(e.context.sessionConfig.expiresIn,"sec")});if(!u)return H(e),e.json(null,{status:401});let g=(u.expiresAt.valueOf()-Date.now())/1e3;return await k(e,{session:u,user:i.user},!1,{maxAge:g}),e.json({session:u,user:i.user})}return await be(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new W("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION})}}),"getSession"),N=s(async(e,t)=>{if(e.context.session)return e.context.session;let r=await Ke()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),P=K(async e=>{let t=await N(e);if(!t?.session)throw new W("UNAUTHORIZED");return{session:t}}),Qs=K(async e=>{let t=await N(e);if(!t?.session)throw new W("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new W("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var mr=p("/revoke-session",{method:"POST",body:X.object({token:X.string({description:"The token to revoke"})}),use:[P],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new W("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new W("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new W("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),fr=p("/revoke-sessions",{method:"POST",use:[P],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new W("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),gr=p("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[P],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new W("UNAUTHORIZED");let n=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(n.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});import{jwtVerify as wr}from"jose";import{SignJWT as hr}from"jose";async function Xe(e,t,r=3600){return await new hr(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}s(Xe,"signJWT");async function J(e,t,r){return await Xe({email:t.toLowerCase(),updateTo:r},e)}s(J,"createEmailVerificationToken");async function yr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ie("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await J(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}s(yr,"sendVerificationEmailFn");var br=p("/send-verification-email",{method:"POST",query:B.object({currentURL:B.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:B.object({email:B.string({description:"The email to send the verification email to"}).email(),callbackURL:B.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ie("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ie("BAD_REQUEST",{message:f.USER_NOT_FOUND});return await yr(e,r.user),e.json({status:!0})}),Or=p("/verify-email",{method:"GET",query:B.object({token:B.string({description:"The token to verify the email"}),callbackURL:B.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new ie("UNAUTHORIZED",{message:d})}s(t,"redirectOnError");let{token:r}=e.query,o;try{o=await wr(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return e.context.logger.error("Failed to verify email",d),t("invalid_token")}let i=B.object({email:B.string().email(),updateTo:B.string().optional()}).parse(o.payload),a=await e.context.internalAdapter.findUserByEmail(i.email);if(!a)return t("user_not_found");if(i.updateTo){let d=await N(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let c=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),l=await J(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:c,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await N(e)){let c=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!c)throw new ie("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await k(e,{session:c,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});import{APIError as dd,createRouter as cd,getCookie as ld,getSignedCookie as ud,setCookie as pd,setSignedCookie as md}from"better-call";import{APIError as _r}from"better-call";function _e(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}s(_e,"escapeRegExpChar");function Ar(e){let t="";for(let r=0;r<e.length;r++)t+=_e(e[r]);return t}s(Ar,"escapeRegExpString");function et(e,t=!0){if(Array.isArray(e))return`(?:${e.map(u=>`^${et(u,t)}$`).join("|")})`;let r="",o="",n=".";t===!0?(r="/",o="[/\\\\]",n="[^/\\\\]"):t&&(r=t,o=Ar(r),o.length>1?(o=`(?:${o})`,n=`((?!${o}).)`):n=`[^${o}]`);let i=t?`${o}+?`:"",a=t?`${o}*?`:"",d=t?e.split(r):[e],c="";for(let l=0;l<d.length;l++){let u=d[l],g=d[l+1],h="";if(!(!u&&l>0)){if(t&&(l===d.length-1?h=a:g!=="**"?h=i:h=""),t&&u==="**"){h&&(c+=l===0?"":h,c+=`(?:${n}*?${h})*?`);continue}for(let y=0;y<u.length;y++){let _=u[y];_==="\\"?y<u.length-1&&(c+=_e(u[y+1]),y++):_==="?"?c+=n:_==="*"?c+=`${n}*?`:c+=_e(_)}c+=h}}return c}s(et,"transform");function Ir(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}s(Ir,"isMatch");function Ee(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=et(e,t.separator),o=new RegExp(`^${r}$`,t.flags),n=Ir.bind(null,o);return n.options=t,n.pattern=e,n.regexp=o,n}s(Ee,"wildcardMatch");var Er=K(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,n=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,d=r?.currentURL,c=t?.errorCallbackURL,l=t?.newUserCallbackURL,u=o.trustedOrigins,g=e.headers?.has("cookie"),h=s((_,D)=>_.startsWith("/")?!1:D.includes("*")?Ee(D)(ze(_)):_.startsWith(D),"matchesPattern"),y=s((_,D)=>{if(!_)return;if(!u.some(ge=>h(_,ge)||_?.startsWith("/")&&D!=="origin"&&!_.includes(":")))throw e.context.logger.error(`Invalid ${D}: ${_}`),e.context.logger.info(`If it's a valid URL, please add ${_} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${u}`),new _r("FORBIDDEN",{message:`Invalid ${D}`})},"validateURL");g&&!e.context.options.advanced?.disableCSRFCheck&&y(n,"origin"),i&&y(i,"callbackURL"),a&&y(a,"redirectURL"),d&&y(d,"currentURL"),c&&y(c,"errorCallbackURL"),l&&y(a,"newUserCallbackURL")});var Rr=p("/ok",{method:"GET",metadata:{...te,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as Na}from"zod";import{APIError as ja}from"better-call";import{z as w}from"zod";import{APIError as _a}from"better-call";var Ea=w.object({id:w.string(),providerId:w.string(),accountId:w.string(),userId:w.string(),accessToken:w.string().nullish(),refreshToken:w.string().nullish(),idToken:w.string().nullish(),accessTokenExpiresAt:w.date().nullish(),refreshTokenExpiresAt:w.date().nullish(),scope:w.string().nullish(),password:w.string().nullish(),createdAt:w.date().default(()=>new Date),updatedAt:w.date().default(()=>new Date)}),Ra=w.object({id:w.string(),email:w.string().transform(e=>e.toLowerCase()),emailVerified:w.boolean().default(!1),name:w.string(),image:w.string().nullish(),createdAt:w.date().default(()=>new Date),updatedAt:w.date().default(()=>new Date)}),Ta=w.object({id:w.string(),userId:w.string(),expiresAt:w.date(),createdAt:w.date().default(()=>new Date),updatedAt:w.date().default(()=>new Date),token:w.string(),ipAddress:w.string().nullish(),userAgent:w.string().nullish()}),Ua=w.object({id:w.string(),value:w.string(),createdAt:w.date().default(()=>new Date),updatedAt:w.date().default(()=>new Date),expiresAt:w.date(),identifier:w.string()});var Ur=s((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),Sr=p("/error",{method:"GET",metadata:{...te,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Ur(t),{headers:{"Content-Type":"text/html"}})});import"defu";import{APIError as tt}from"better-call";async function pe(e,{userInfo:t,account:r,callbackURL:o}){let n=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(c=>{throw M.error(`Better auth was unable to query your database.
Error: `,c),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=n?.user,a=!i;if(n){let c=n.accounts.find(l=>l.providerId===r.providerId);if(c){let l=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([u,g])=>g!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(c.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return ye&&M.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:n.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(g){return M.error("Unable to link account",g),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(c=>c?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let c=await J(e.context.secret,i.email),l=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:l,token:c},e.request)}}catch(c){return c instanceof tt?{error:c.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(i.id,e.request);return d?{data:{session:d,user:i},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}s(pe,"handleOAuthUserInfo");var vr=p("/sign-in/social",{method:"POST",query:E.object({currentURL:E.string().optional()}).optional(),body:E.object({callbackURL:E.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:E.string().optional(),errorCallbackURL:E.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:We,disableRedirect:E.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:E.optional(E.object({token:E.string({description:"ID token from the provider"}),nonce:E.string({description:"Nonce used to generate the token"}).optional(),accessToken:E.string({description:"Access token from the provider"}).optional(),refreshToken:E.string({description:"Refresh token from the provider"}).optional(),expiresAt:E.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new z("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new z("NOT_FOUND",{message:f.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(i,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new z("UNAUTHORIZED",{message:f.INVALID_TOKEN});let c=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!c||!c?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new z("UNAUTHORIZED",{message:f.FAILED_TO_GET_USER_INFO});if(!c.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new z("UNAUTHORIZED",{message:f.USER_EMAIL_NOT_FOUND});let l=await pe(e,{userInfo:{email:c.user.email,id:c.user.id,name:c.user.name||"",image:c.user.image,emailVerified:c.user.emailVerified||!1},account:{providerId:t.id,accountId:c.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new z("UNAUTHORIZED",{message:l.error});return await k(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await ue(e),n=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:n.toString(),redirect:!e.body.disableRedirect})}),kr=p("/sign-in/email",{method:"POST",body:E.object({email:E.string({description:"Email of the user"}),password:E.string({description:"Password of the user"}),callbackURL:E.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:E.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new z("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!E.string().email().safeParse(t).success)throw new z("BAD_REQUEST",{message:f.INVALID_EMAIL});let n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new z("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let i=n.accounts.find(l=>l.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new z("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let a=i?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new z("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new z("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!n.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new z("UNAUTHORIZED",{message:f.EMAIL_NOT_VERIFIED});let l=await J(e.context.secret,n.user.email),u=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:n.user,url:u,token:l},e.request),e.context.logger.error("Email not verified",{email:t}),new z("FORBIDDEN",{message:f.EMAIL_NOT_VERIFIED})}let c=await e.context.internalAdapter.createSession(n.user.id,e.headers,e.body.rememberMe===!1);if(!c)throw e.context.logger.error("Failed to create session"),new z("UNAUTHORIZED",{message:f.FAILED_TO_CREATE_SESSION});return await k(e,{session:c,user:n.user},e.body.rememberMe===!1),e.json({user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as se}from"zod";var me=se.object({code:se.string().optional(),error:se.string().optional(),error_description:se.string().optional(),state:se.string().optional()}),Nr=p("/callback/:id",{method:["GET","POST"],body:me.optional(),query:me.optional(),metadata:te},async e=>{let t;try{if(e.method==="GET")t=me.parse(e.query);else if(e.method==="POST")t=me.parse(e.body);else throw new Error("Unsupported method")}catch(C){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",C),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:n,error_description:i}=t;if(!n)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${i}`);let a=e.context.socialProviders.find(C=>C.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:c,link:l,errorURL:u,newUserURL:g}=await De(e),h;try{h=await a.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(C){throw e.context.logger.error("",C),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let y=await a.getUserInfo(h).then(C=>C?.user);function _(C){let $=u||c||`${e.context.baseURL}/error`;throw $.includes("?")?$=`${$}&error=${C}`:$=`${$}?error=${C}`,e.redirect($)}if(s(_,"redirectOnError"),!y)return e.context.logger.error("Unable to get user info"),_("unable_to_get_user_info");if(!y.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),_("email_not_found");if(!c)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==y.email.toLowerCase())return _("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:a.id,accountId:y.id}))return _("unable_to_link_account");let $;try{$=c.toString()}catch{$=c}throw e.redirect($)}let D=await pe(e,{userInfo:{...y,email:y.email,name:y.name||y.email},account:{providerId:a.id,accountId:y.id,...h,scope:h.scopes?.join(",")},callbackURL:c});if(D.error)return e.context.logger.error(D.error.split(" ").join("_")),_(D.error.split(" ").join("_"));let{session:Te,user:ge}=D.data;await k(e,{session:Te,user:ge});let he;try{he=(D.isRegister&&g||c).toString()}catch{he=D.isRegister&&g||c}throw e.redirect(he)});import"zod";import{APIError as $r}from"better-call";var zr=p("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw H(e),new $r("BAD_REQUEST",{message:f.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),H(e),e.json({success:!0})});import{z as j}from"zod";import{APIError as ae}from"better-call";function ot(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}s(ot,"redirectError");function Fr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}s(Fr,"redirectCallback");var Lr=p("/forget-password",{method:"POST",body:j.object({email:j.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:j.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ae("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let n=60*60*1,i=q(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||n,"sec"),a=Z(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:i});let d=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:d,token:a},e.request),e.json({status:!0})}),Dr=p("/reset-password/:token",{method:"GET",query:j.object({callbackURL:j.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(ot(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(ot(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Fr(e.context,r,{token:t}))}),Pr=p("/reset-password",{query:j.optional(j.object({token:j.string().optional(),currentURL:j.string().optional()})),method:"POST",body:j.object({newPassword:j.string({description:"The new password to set"}),token:j.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new ae("BAD_REQUEST",{message:f.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,n=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new ae("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});if(r.length>n)throw new ae("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(i);if(!a||a.expiresAt<new Date)throw new ae("BAD_REQUEST",{message:f.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let d=a.value,c=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(g=>g.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,c),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:c,accountId:d}),e.json({status:!0}))});import{z as S}from"zod";import{APIError as R}from"better-call";var xr=p("/change-password",{method:"POST",body:S.object({newPassword:S.string({description:"The new password to set"}),currentPassword:S.string({description:"The current password"}),revokeOtherSessions:S.boolean({description:"Revoke all other sessions"}).optional()}),use:[P],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,n=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new R("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new R("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let c=(await e.context.internalAdapter.findAccounts(n.user.id)).find(h=>h.providerId==="credential"&&h.password);if(!c||!c.password)throw new R("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(t);if(!await e.context.password.verify({hash:c.password,password:r}))throw new R("BAD_REQUEST",{message:f.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(c.id,{password:l});let g=null;if(o){await e.context.internalAdapter.deleteSessions(n.user.id);let h=await e.context.internalAdapter.createSession(n.user.id,e.headers);if(!h)throw new R("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION});await k(e,{session:h,user:n.user}),g=h.token}return e.json({token:g})}),Cr=p("/set-password",{method:"POST",body:S.object({newPassword:S.string()}),metadata:{SERVER_ONLY:!0},use:[P]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new R("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new R("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(c=>c.providerId==="credential"&&c.password),d=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new R("BAD_REQUEST",{message:"user already has a password"})}),jr=p("/delete-user",{method:"POST",use:[P],body:S.object({callbackURL:S.string().optional(),password:S.string().optional(),token:S.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new R("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!i||!i.password)throw new R("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new R("BAD_REQUEST",{message:f.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let n=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-n>i)throw new R("BAD_REQUEST",{message:f.SESSION_EXPIRED})}if(e.body.token)return await rt({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let n=ne(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${n}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${n}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:n},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),H(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),rt=p("/delete-user/callback",{method:"GET",query:S.object({token:S.string(),callbackURL:S.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new R("NOT_FOUND");let t=await N(e);if(!t)throw new R("NOT_FOUND",{message:f.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new R("NOT_FOUND",{message:f.INVALID_TOKEN});if(r.value!==t.user.id)throw new R("NOT_FOUND",{message:f.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),H(e);let n=e.context.options.user.deleteUser?.afterDelete;if(n&&await n(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),Mr=p("/change-email",{method:"POST",query:S.object({currentURL:S.string().optional()}).optional(),body:S.object({newEmail:S.string({description:"The new email to set"}).email(),callbackURL:S.string({description:"The URL to redirect to after email verification"}).optional()}),use:[P],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new R("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new R("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new R("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let n=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new R("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await J(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});import{z as de}from"zod";import{APIError as nt}from"better-call";var Br=p("/list-accounts",{method:"GET",use:[P],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),Vr=p("/link-social",{method:"POST",requireHeaders:!0,query:de.object({currentURL:de.string().optional()}).optional(),body:de.object({callbackURL:de.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:de.enum(Ie,{description:"The OAuth2 provider to use"})}),use:[P],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new nt("BAD_REQUEST",{message:f.SOCIAL_ACCOUNT_ALREADY_LINKED});let n=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!n)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new nt("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});let i=await ue(e,{userId:t.user.id,email:t.user.email}),a=await n.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${n.id}`});return e.json({url:a.toString(),redirect:!0})});var it=s((e,t)=>{let r={};for(let[o,n]of Object.entries(e))r[o]=i=>n({...i,context:{...t,...i.context}}),r[o].path=n.path,r[o].method=n.method,r[o].options=n.options,r[o].headers=n.headers;return r},"shimContext");function fe(e){let t=e;return{newRole(r){return qr(r)}}}s(fe,"createAccessControl");function qr(e){return{statements:e,authorize(t,r){for(let[o,n]of Object.entries(t)){let i=e[o];return i?(r==="OR"?n.some(d=>i.includes(d)):n.every(d=>i.includes(d)))?{success:!0}:{success:!1,error:`Unauthorized to access resource "${o}"`}:{success:!1,error:`You are not allowed to access resource: ${o}`}}return{success:!1,error:"Not authorized"}}}}s(qr,"role");var Hr={organization:["update","delete"],member:["create","update","delete"],invitation:["create","cancel"]},Re=fe(Hr),Gr=Re.newRole({organization:["update"],invitation:["create","cancel"],member:["create","update","delete"]}),Zr=Re.newRole({organization:["update","delete"],member:["create","update","delete"],invitation:["create","cancel"]}),Qr=Re.newRole({organization:[],member:[],invitation:[]}),st={admin:Gr,owner:Zr,member:Qr};var Yr={proto:/"(?:_|\\u0{2}5[Ff]){2}(?:p|\\u0{2}70)(?:r|\\u0{2}72)(?:o|\\u0{2}6[Ff])(?:t|\\u0{2}74)(?:o|\\u0{2}6[Ff])(?:_|\\u0{2}5[Ff]){2}"\s*:/,constructor:/"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/,protoShort:/"__proto__"\s*:/,constructorShort:/"constructor"\s*:/},Wr=/^\s*["[{]|^\s*-?\d{1,16}(\.\d{1,17})?([Ee][+-]?\d+)?\s*$/,at={true:!0,false:!1,null:null,undefined:void 0,nan:Number.NaN,infinity:Number.POSITIVE_INFINITY,"-infinity":Number.NEGATIVE_INFINITY},Jr=/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})(?:\.(\d{1,7}))?(?:Z|([+-])(\d{2}):(\d{2}))$/;function Kr(e){return e instanceof Date&&!isNaN(e.getTime())}s(Kr,"isValidDate");function Xr(e){let t=Jr.exec(e);if(!t)return null;let[,r,o,n,i,a,d,c,l,u,g]=t,h=new Date(Date.UTC(parseInt(r,10),parseInt(o,10)-1,parseInt(n,10),parseInt(i,10),parseInt(a,10),parseInt(d,10),c?parseInt(c.padEnd(3,"0"),10):0));if(l){let y=(parseInt(u,10)*60+parseInt(g,10))*(l==="+"?-1:1);h.setUTCMinutes(h.getUTCMinutes()+y)}return Kr(h)?h:null}s(Xr,"parseISODate");function eo(e,t={}){let{strict:r=!1,warnings:o=!1,reviver:n,parseDates:i=!0}=t;if(typeof e!="string")return e;let a=e.trim();if(a[0]==='"'&&a.endsWith('"')&&!a.slice(1,-1).includes('"'))return a.slice(1,-1);let d=a.toLowerCase();if(d.length<=9&&d in at)return at[d];if(!Wr.test(a)){if(r)throw new SyntaxError("[better-json] Invalid JSON");return e}if(Object.entries(Yr).some(([l,u])=>{let g=u.test(a);return g&&o&&console.warn(`[better-json] Detected potential prototype pollution attempt using ${l} pattern`),g})&&r)throw new Error("[better-json] Potential prototype pollution attempt detected");try{return JSON.parse(a,s((u,g)=>{if(u==="__proto__"||u==="constructor"&&g&&typeof g=="object"&&"prototype"in g){o&&console.warn(`[better-json] Dropping "${u}" key to prevent prototype pollution`);return}if(i&&typeof g=="string"){let h=Xr(g);if(h)return h}return n?n(u,g):g},"secureReviver"))}catch(l){if(r)throw l;return e}}s(eo,"betterJSONParse");function to(e,t={strict:!0}){return eo(e,t)}s(to,"parseJSON");var dt=to;var T=s((e,t)=>{let r=e.adapter;return{findOrganizationBySlug:s(async o=>await r.findOne({model:"organization",where:[{field:"slug",value:o}]}),"findOrganizationBySlug"),createOrganization:s(async o=>{let n=await r.create({model:"organization",data:{...o.organization,metadata:o.organization.metadata?JSON.stringify(o.organization.metadata):void 0}}),i=await r.create({model:"member",data:{organizationId:n.id,userId:o.user.id,createdAt:new Date,role:t?.creatorRole||"owner"}});return{...n,metadata:n.metadata?JSON.parse(n.metadata):void 0,members:[{...i,user:{id:o.user.id,name:o.user.name,email:o.user.email,image:o.user.image}}]}},"createOrganization"),findMemberByEmail:s(async o=>{let n=await r.findOne({model:"user",where:[{field:"email",value:o.email}]});if(!n)return null;let i=await r.findOne({model:"member",where:[{field:"organizationId",value:o.organizationId},{field:"userId",value:n.id}]});return i?{...i,user:{id:n.id,name:n.name,email:n.email,image:n.image}}:null},"findMemberByEmail"),findMemberByOrgId:s(async o=>{let[n,i]=await Promise.all([await r.findOne({model:"member",where:[{field:"userId",value:o.userId},{field:"organizationId",value:o.organizationId}]}),await r.findOne({model:"user",where:[{field:"id",value:o.userId}]})]);return!i||!n?null:{...n,user:{id:i.id,name:i.name,email:i.email,image:i.image}}},"findMemberByOrgId"),findMemberById:s(async o=>{let n=await r.findOne({model:"member",where:[{field:"id",value:o}]});if(!n)return null;let i=await r.findOne({model:"user",where:[{field:"id",value:n.userId}]});return i?{...n,user:{id:i.id,name:i.name,email:i.email,image:i.image}}:null},"findMemberById"),createMember:s(async o=>await r.create({model:"member",data:o}),"createMember"),updateMember:s(async(o,n)=>await r.update({model:"member",where:[{field:"id",value:o}],update:{role:n}}),"updateMember"),deleteMember:s(async o=>await r.delete({model:"member",where:[{field:"id",value:o}]}),"deleteMember"),updateOrganization:s(async(o,n)=>{let i=await r.update({model:"organization",where:[{field:"id",value:o}],update:{...n,metadata:typeof n.metadata=="object"?JSON.stringify(n.metadata):n.metadata}});return i?{...i,metadata:i.metadata?dt(i.metadata):void 0}:null},"updateOrganization"),deleteOrganization:s(async o=>(await r.delete({model:"member",where:[{field:"organizationId",value:o}]}),await r.delete({model:"invitation",where:[{field:"organizationId",value:o}]}),await r.delete({model:"organization",where:[{field:"id",value:o}]}),o),"deleteOrganization"),setActiveOrganization:s(async(o,n)=>await e.internalAdapter.updateSession(o,{activeOrganizationId:n}),"setActiveOrganization"),findOrganizationById:s(async o=>await r.findOne({model:"organization",where:[{field:"id",value:o}]}),"findOrganizationById"),findFullOrganization:s(async({organizationId:o,isSlug:n})=>{let i=await r.findOne({model:"organization",where:[{field:n?"slug":"id",value:o}]});if(!i)return null;let[a,d]=await Promise.all([r.findMany({model:"invitation",where:[{field:"organizationId",value:i.id}]}),r.findMany({model:"member",where:[{field:"organizationId",value:i.id}]})]);if(!i)return null;let c=d.map(h=>h.userId),l=await r.findMany({model:"user",where:[{field:"id",value:c,operator:"in"}]}),u=new Map(l.map(h=>[h.id,h])),g=d.map(h=>{let y=u.get(h.userId);if(!y)throw new F("Unexpected error: User not found for member");return{...h,user:{id:y.id,name:y.name,email:y.email,image:y.image}}});return{...i,invitations:a,members:g}},"findFullOrganization"),listOrganizations:s(async o=>{let n=await r.findMany({model:"member",where:[{field:"userId",value:o}]});if(!n||n.length===0)return[];let i=n.map(d=>d.organizationId);return await r.findMany({model:"organization",where:[{field:"id",value:i,operator:"in"}]})},"listOrganizations"),createInvitation:s(async({invitation:o,user:n})=>{let a=q(t?.invitationExpiresIn||1728e5);return await r.create({model:"invitation",data:{email:o.email,role:o.role,organizationId:o.organizationId,status:"pending",expiresAt:a,inviterId:n.id}})},"createInvitation"),findInvitationById:s(async o=>await r.findOne({model:"invitation",where:[{field:"id",value:o}]}),"findInvitationById"),findPendingInvitation:s(async o=>(await r.findMany({model:"invitation",where:[{field:"email",value:o.email},{field:"organizationId",value:o.organizationId},{field:"status",value:"pending"}]})).filter(i=>new Date(i.expiresAt)>new Date),"findPendingInvitation"),updateInvitation:s(async o=>await r.update({model:"invitation",where:[{field:"id",value:o.invitationId}],update:{status:o.status}}),"updateInvitation")}},"getOrgAdapter");import"better-call";var v=K(async e=>({})),L=K({use:[P]},async e=>({session:e.context.session}));import{z as x}from"zod";import{z as I}from"zod";var ct=I.string(),ro=I.enum(["pending","accepted","rejected","canceled"]).default("pending"),bl=I.object({id:I.string().default(Z),name:I.string(),slug:I.string(),logo:I.string().nullish(),metadata:I.record(I.string()).or(I.string().transform(e=>JSON.parse(e))).nullish(),createdAt:I.date()}),Ol=I.object({id:I.string().default(Z),organizationId:I.string(),userId:I.string(),role:ct,createdAt:I.date()}),Al=I.object({id:I.string().default(Z),organizationId:I.string(),email:I.string(),role:ct,status:ro,inviterId:I.string(),expiresAt:I.date()});import{APIError as U}from"better-call";var m={YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION:"You are not allowed to create a new organization",YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS:"You have reached the maximum number of organizations",ORGANIZATION_ALREADY_EXISTS:"Organization already exists",ORGANIZATION_NOT_FOUND:"Organization not found",USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION:"User is not a member of the organization",YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION:"You are not allowed to update this organization",YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION:"You are not allowed to delete this organization",NO_ACTIVE_ORGANIZATION:"No active organization",USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION:"User is already a member of this organization",MEMBER_NOT_FOUND:"Member not found",ROLE_NOT_FOUND:"Role not found",YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER:"You cannot leave the organization as the only owner",YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER:"You are not allowed to delete this member",YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION:"You are not allowed to invite users to this organization",USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION:"User is already invited to this organization",INVITATION_NOT_FOUND:"Invitation not found",YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION:"You are not the recipient of the invitation",YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION:"You are not allowed to cancel this invitation",INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION:"Inviter is no longer a member of the organization"};var lt=s(e=>p("/organization/invite-member",{method:"POST",use:[v,L],body:x.object({email:x.string({description:"The email address of the user to invite"}),role:x.string({description:"The role to assign to the user"}),organizationId:x.string({description:"The organization ID to invite the user to"}).optional(),resend:x.boolean({description:"Resend the invitation email, if the user is already invited"}).optional()}),metadata:{openapi:{description:"Invite a user to an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string"},email:{type:"string"},role:{type:"string"},organizationId:{type:"string"},inviterId:{type:"string"},status:{type:"string"},expiresAt:{type:"string"}},required:["id","email","role","organizationId","inviterId","status","expiresAt"]}}}}}}}},async t=>{if(!t.context.orgOptions.sendInvitationEmail)throw t.context.logger.warn("Invitation email is not enabled. Pass `sendInvitationEmail` to the plugin options to enable it."),new U("BAD_REQUEST",{message:"Invitation email is not enabled"});let r=t.context.session,o=t.body.organizationId||r.session.activeOrganizationId;if(!o)throw new U("BAD_REQUEST",{message:m.ORGANIZATION_NOT_FOUND});let n=T(t.context,t.context.orgOptions),i=await n.findMemberByOrgId({userId:r.user.id,organizationId:o});if(!i)throw new U("BAD_REQUEST",{message:m.MEMBER_NOT_FOUND});let a=t.context.roles[i.role];if(!a)throw new U("BAD_REQUEST",{message:m.ROLE_NOT_FOUND});if(a.authorize({invitation:["create"]}).error)throw new U("FORBIDDEN",{message:m.YOU_ARE_NOT_ALLOWED_TO_INVITE_USERS_TO_THIS_ORGANIZATION});if(await n.findMemberByEmail({email:t.body.email,organizationId:o}))throw new U("BAD_REQUEST",{message:m.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION});if((await n.findPendingInvitation({email:t.body.email,organizationId:o})).length&&!t.body.resend)throw new U("BAD_REQUEST",{message:m.USER_IS_ALREADY_INVITED_TO_THIS_ORGANIZATION});let u=await n.createInvitation({invitation:{role:t.body.role,email:t.body.email,organizationId:o},user:r.user}),g=await n.findOrganizationById(o);if(!g)throw new U("BAD_REQUEST",{message:m.ORGANIZATION_NOT_FOUND});return await t.context.orgOptions.sendInvitationEmail?.({id:u.id,role:u.role,email:u.email,organization:g,inviter:{...i,user:r.user}},t.request),t.json(u)}),"createInvitation"),ut=p("/organization/accept-invitation",{method:"POST",body:x.object({invitationId:x.string({description:"The ID of the invitation to accept"})}),use:[v,L],metadata:{openapi:{description:"Accept an invitation to an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{invitation:{type:"object"},member:{type:"object"}}}}}}}}}},async e=>{let t=e.context.session,r=T(e.context,e.context.orgOptions),o=await r.findInvitationById(e.body.invitationId);if(!o||o.expiresAt<new Date||o.status!=="pending")throw new U("BAD_REQUEST",{message:m.INVITATION_NOT_FOUND});if(o.email!==t.user.email)throw new U("FORBIDDEN",{message:m.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION});let n=await r.updateInvitation({invitationId:e.body.invitationId,status:"accepted"}),i=await r.createMember({organizationId:o.organizationId,userId:t.user.id,role:o.role,createdAt:new Date});return await r.setActiveOrganization(t.session.token,o.organizationId),n?e.json({invitation:n,member:i}):e.json(null,{status:400,body:{message:m.INVITATION_NOT_FOUND}})}),pt=p("/organization/reject-invitation",{method:"POST",body:x.object({invitationId:x.string({description:"The ID of the invitation to reject"})}),use:[v,L],metadata:{openapi:{description:"Reject an invitation to an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{invitation:{type:"object"},member:{type:"null"}}}}}}}}}},async e=>{let t=e.context.session,r=T(e.context,e.context.orgOptions),o=await r.findInvitationById(e.body.invitationId);if(!o||o.expiresAt<new Date||o.status!=="pending")throw new U("BAD_REQUEST",{message:"Invitation not found!"});if(o.email!==t.user.email)throw new U("FORBIDDEN",{message:m.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION});let n=await r.updateInvitation({invitationId:e.body.invitationId,status:"rejected"});return e.json({invitation:n,member:null})}),mt=p("/organization/cancel-invitation",{method:"POST",body:x.object({invitationId:x.string({description:"The ID of the invitation to cancel"})}),use:[v,L],openapi:{description:"Cancel an invitation to an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{invitation:{type:"object"}}}}}}}}},async e=>{let t=e.context.session,r=T(e.context,e.context.orgOptions),o=await r.findInvitationById(e.body.invitationId);if(!o)throw new U("BAD_REQUEST",{message:m.INVITATION_NOT_FOUND});let n=await r.findMemberByOrgId({userId:t.user.id,organizationId:o.organizationId});if(!n)throw new U("BAD_REQUEST",{message:m.MEMBER_NOT_FOUND});if(e.context.roles[n.role].authorize({invitation:["cancel"]}).error)throw new U("FORBIDDEN",{message:m.YOU_ARE_NOT_ALLOWED_TO_CANCEL_THIS_INVITATION});let a=await r.updateInvitation({invitationId:e.body.invitationId,status:"canceled"});return e.json(a)}),ft=p("/organization/get-invitation",{method:"GET",use:[v],requireHeaders:!0,query:x.object({id:x.string({description:"The ID of the invitation to get"})}),metadata:{openapi:{description:"Get an invitation by ID",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string"},email:{type:"string"},role:{type:"string"},organizationId:{type:"string"},inviterId:{type:"string"},status:{type:"string"},expiresAt:{type:"string"},organizationName:{type:"string"},organizationSlug:{type:"string"},inviterEmail:{type:"string"}},required:["id","email","role","organizationId","inviterId","status","expiresAt","organizationName","organizationSlug","inviterEmail"]}}}}}}}},async e=>{let t=await N(e);if(!t)throw new U("UNAUTHORIZED",{message:"Not authenticated"});let r=T(e.context,e.context.orgOptions),o=await r.findInvitationById(e.query.id);if(!o||o.status!=="pending"||o.expiresAt<new Date)throw new U("BAD_REQUEST",{message:"Invitation not found!"});if(o.email!==t.user.email)throw new U("FORBIDDEN",{message:m.YOU_ARE_NOT_THE_RECIPIENT_OF_THE_INVITATION});let n=await r.findOrganizationById(o.organizationId);if(!n)throw new U("BAD_REQUEST",{message:m.ORGANIZATION_NOT_FOUND});let i=await r.findMemberByOrgId({userId:o.inviterId,organizationId:o.organizationId});if(!i)throw new U("BAD_REQUEST",{message:m.INVITER_IS_NO_LONGER_A_MEMBER_OF_THE_ORGANIZATION});return e.json({...o,organizationName:n.name,organizationSlug:n.slug,inviterEmail:i.user.email})});import{z as V}from"zod";import{APIError as ee}from"better-call";var gt=s(()=>p("/organization/add-member",{method:"POST",body:V.object({userId:V.string(),role:V.string(),organizationId:V.string().optional()}),use:[v],metadata:{SERVER_ONLY:!0}},async e=>{let t=e.body.userId?await N(e).catch(d=>null):null,r=e.body.organizationId||t?.session.activeOrganizationId;if(!r)return e.json(null,{status:400,body:{message:m.NO_ACTIVE_ORGANIZATION}});let o=T(e.context,e.context.orgOptions),n=await e.context.internalAdapter.findUserById(e.body.userId);if(!n)throw new ee("BAD_REQUEST",{message:f.USER_NOT_FOUND});if(await o.findMemberByEmail({email:n.email,organizationId:r}))throw new ee("BAD_REQUEST",{message:m.USER_IS_ALREADY_A_MEMBER_OF_THIS_ORGANIZATION});let a=await o.createMember({id:Z(),organizationId:r,userId:n.id,role:e.body.role,createdAt:new Date});return e.json(a)}),"addMember"),ht=p("/organization/remove-member",{method:"POST",body:V.object({memberIdOrEmail:V.string({description:"The ID or email of the member to remove"}),organizationId:V.string({description:"The ID of the organization to remove the member from. If not provided, the active organization will be used"}).optional()}),use:[v,L],metadata:{openapi:{description:"Remove a member from an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{member:{type:"object",properties:{id:{type:"string"},userId:{type:"string"},organizationId:{type:"string"},role:{type:"string"}},required:["id","userId","organizationId","role"]}},required:["member"]}}}}}}}},async e=>{let t=e.context.session,r=e.body.organizationId||t.session.activeOrganizationId;if(!r)return e.json(null,{status:400,body:{message:m.NO_ACTIVE_ORGANIZATION}});let o=T(e.context,e.context.orgOptions),n=await o.findMemberByOrgId({userId:t.user.id,organizationId:r});if(!n)throw new ee("BAD_REQUEST",{message:m.MEMBER_NOT_FOUND});let i=e.context.roles[n.role];if(!i)throw new ee("BAD_REQUEST",{message:m.ROLE_NOT_FOUND});let a=t.user.email===e.body.memberIdOrEmail||n.id===e.body.memberIdOrEmail;if(a&&n.role===(e.context.orgOptions?.creatorRole||"owner"))throw new ee("BAD_REQUEST",{message:m.YOU_CANNOT_LEAVE_THE_ORGANIZATION_AS_THE_ONLY_OWNER});if(!(a||i.authorize({member:["delete"]}).success))throw new ee("UNAUTHORIZED",{message:m.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_MEMBER});let l=null;if(e.body.memberIdOrEmail.includes("@")?l=await o.findMemberByEmail({email:e.body.memberIdOrEmail,organizationId:r}):l=await o.findMemberById(e.body.memberIdOrEmail),l?.organizationId!==r)throw new ee("BAD_REQUEST",{message:m.MEMBER_NOT_FOUND});return await o.deleteMember(l.id),t.user.id===l.userId&&t.session.activeOrganizationId===l.organizationId&&await o.setActiveOrganization(t.session.token,null),e.json({member:l})}),wt=s(e=>p("/organization/update-member-role",{method:"POST",body:V.object({role:V.string(),memberId:V.string(),organizationId:V.string().optional()}),use:[v,L],metadata:{openapi:{description:"Update the role of a member in an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{member:{type:"object",properties:{id:{type:"string"},userId:{type:"string"},organizationId:{type:"string"},role:{type:"string"}},required:["id","userId","organizationId","role"]}},required:["member"]}}}}}}}},async t=>{let r=t.context.session,o=t.body.organizationId||r.session.activeOrganizationId;if(!o)return t.json(null,{status:400,body:{message:m.NO_ACTIVE_ORGANIZATION}});let n=T(t.context,t.context.orgOptions),i=await n.findMemberByOrgId({userId:r.user.id,organizationId:o});if(!i)return t.json(null,{status:400,body:{message:m.MEMBER_NOT_FOUND}});let a=t.context.roles[i.role];if(!a)return t.json(null,{status:400,body:{message:m.ROLE_NOT_FOUND}});if(a.authorize({member:["update"]}).error||t.body.role==="owner"&&i.role!=="owner")return t.json(null,{body:{message:"You are not allowed to update this member"},status:403});let c=await n.updateMember(t.body.memberId,t.body.role);return c?t.json(c):t.json(null,{status:400,body:{message:m.MEMBER_NOT_FOUND}})}),"updateMemberRole"),yt=p("/organization/get-active-member",{method:"GET",use:[v,L],metadata:{openapi:{description:"Get the active member in the organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string"},userId:{type:"string"},organizationId:{type:"string"},role:{type:"string"}},required:["id","userId","organizationId","role"]}}}}}}}},async e=>{let t=e.context.session,r=t.session.activeOrganizationId;if(!r)return e.json(null,{status:400,body:{message:m.NO_ACTIVE_ORGANIZATION}});let n=await T(e.context,e.context.orgOptions).findMemberByOrgId({userId:t.user.id,organizationId:r});return n?e.json(n):e.json(null,{status:400,body:{message:m.MEMBER_NOT_FOUND}})});import{z as b}from"zod";import{APIError as Q}from"better-call";var bt=p("/organization/create",{method:"POST",body:b.object({name:b.string({description:"The name of the organization"}),slug:b.string({description:"The slug of the organization"}),userId:b.string({description:"The user id of the organization creator. If not provided, the current user will be used. Should only be used by admins or when called by the server."}).optional(),logo:b.string({description:"The logo of the organization"}).optional(),metadata:b.record(b.string(),b.any(),{description:"The metadata of the organization"}).optional()}),use:[v],metadata:{openapi:{description:"Create an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",description:"The organization that was created",$ref:"#/components/schemas/Organization"}}}}}}}},async e=>{let t=await N(e);if(!t&&(e.request||e.headers))throw new Q("UNAUTHORIZED");let r=t?.user||null;if(!r){if(!e.body.userId)throw new Q("UNAUTHORIZED");r=await e.context.internalAdapter.findUserById(e.body.userId)}if(!r)return e.json(null,{status:401});let o=e.context.orgOptions;if(!(typeof o?.allowUserToCreateOrganization=="function"?await o.allowUserToCreateOrganization(r):o?.allowUserToCreateOrganization===void 0?!0:o.allowUserToCreateOrganization))throw new Q("FORBIDDEN",{message:m.YOU_ARE_NOT_ALLOWED_TO_CREATE_A_NEW_ORGANIZATION});let i=T(e.context,o),a=await i.listOrganizations(r.id);if(typeof o.organizationLimit=="number"?a.length>=o.organizationLimit:typeof o.organizationLimit=="function"?await o.organizationLimit(r):!1)throw new Q("FORBIDDEN",{message:m.YOU_HAVE_REACHED_THE_MAXIMUM_NUMBER_OF_ORGANIZATIONS});if(await i.findOrganizationBySlug(e.body.slug))throw new Q("BAD_REQUEST",{message:m.ORGANIZATION_ALREADY_EXISTS});let l=await i.createOrganization({organization:{id:Z(),slug:e.body.slug,name:e.body.name,logo:e.body.logo,createdAt:new Date,metadata:e.body.metadata},user:r});return e.context.session&&await i.setActiveOrganization(e.context.session.session.token,l.id),e.json(l)}),Ot=p("/organization/update",{method:"POST",body:b.object({data:b.object({name:b.string({description:"The name of the organization"}).optional(),slug:b.string({description:"The slug of the organization"}).optional(),logo:b.string({description:"The logo of the organization"}).optional(),metadata:b.record(b.string(),b.any(),{description:"The metadata of the organization"}).optional()}).partial(),organizationId:b.string().optional()}),requireHeaders:!0,use:[v],metadata:{openapi:{description:"Update an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",description:"The updated organization",$ref:"#/components/schemas/Organization"}}}}}}}},async e=>{let t=await e.context.getSession(e);if(!t)throw new Q("UNAUTHORIZED",{message:"User not found"});let r=e.body.organizationId||t.session.activeOrganizationId;if(!r)return e.json(null,{status:400,body:{message:m.ORGANIZATION_NOT_FOUND}});let o=T(e.context,e.context.orgOptions),n=await o.findMemberByOrgId({userId:t.user.id,organizationId:r});if(!n)return e.json(null,{status:400,body:{message:m.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION}});let i=e.context.roles[n.role];if(!i)return e.json(null,{status:400,body:{message:"Role not found!"}});if(i.authorize({organization:["update"]}).error)return e.json(null,{body:{message:m.YOU_ARE_NOT_ALLOWED_TO_UPDATE_THIS_ORGANIZATION},status:403});let d=await o.updateOrganization(r,e.body.data);return e.json(d)}),At=p("/organization/delete",{method:"POST",body:b.object({organizationId:b.string({description:"The organization id to delete"})}),requireHeaders:!0,use:[v],metadata:{openapi:{description:"Delete an organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"string",description:"The organization id that was deleted"}}}}}}}},async e=>{let t=await e.context.getSession(e);if(!t)return e.json(null,{status:401});let r=e.body.organizationId;if(!r)return e.json(null,{status:400,body:{message:m.ORGANIZATION_NOT_FOUND}});let o=T(e.context,e.context.orgOptions),n=await o.findMemberByOrgId({userId:t.user.id,organizationId:r});if(!n)return e.json(null,{status:400,body:{message:m.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION}});let i=e.context.roles[n.role];if(!i)return e.json(null,{status:400,body:{message:"Role not found!"}});if(i.authorize({organization:["delete"]}).error)throw new Q("FORBIDDEN",{message:m.YOU_ARE_NOT_ALLOWED_TO_DELETE_THIS_ORGANIZATION});return r===t.session.activeOrganizationId&&await o.setActiveOrganization(t.session.token,null),await o.deleteOrganization(r),e.json(r)}),It=p("/organization/get-full-organization",{method:"GET",query:b.optional(b.object({organizationId:b.string({description:"The organization id to get"}).optional(),organizationSlug:b.string({description:"The organization slug to get"}).optional()})),requireHeaders:!0,use:[v,L],metadata:{openapi:{description:"Get the full organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",description:"The organization",$ref:"#/components/schemas/Organization"}}}}}}}},async e=>{let t=e.context.session,r=e.query?.organizationSlug||e.query?.organizationId||t.session.activeOrganizationId;if(!r)return e.json(null,{status:200});let n=await T(e.context,e.context.orgOptions).findFullOrganization({organizationId:r,isSlug:!!e.query?.organizationSlug});if(!n)throw new Q("BAD_REQUEST",{message:m.ORGANIZATION_NOT_FOUND});return e.json(n)}),_t=p("/organization/set-active",{method:"POST",body:b.object({organizationId:b.string({description:"The organization id to set as active. It can be null to unset the active organization"}).nullable().optional(),organizationSlug:b.string({description:"The organization slug to set as active. It can be null to unset the active organization if organizationId is not provided"}).optional()}),use:[L,v],metadata:{openapi:{description:"Set the active organization",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",description:"The organization",$ref:"#/components/schemas/Organization"}}}}}}}},async e=>{let t=T(e.context,e.context.orgOptions),r=e.context.session,o=e.body.organizationSlug||e.body.organizationId;if(o===null){if(!r.session.activeOrganizationId)return e.json(null);let c=await t.setActiveOrganization(r.session.token,null);return await k(e,{session:c,user:r.user}),e.json(null)}if(!o){let d=r.session.activeOrganizationId;if(!d)return e.json(null);o=d}let n=await t.findFullOrganization({organizationId:o,isSlug:!!e.body.organizationSlug});if(!n?.members.find(d=>d.userId===r.user.id))throw await t.setActiveOrganization(r.session.token,null),new Q("FORBIDDEN",{message:m.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION});if(!n)throw new Q("BAD_REQUEST",{message:m.ORGANIZATION_NOT_FOUND});let a=await t.setActiveOrganization(r.session.token,n.id);return await k(e,{session:a,user:r.user}),e.json(n)}),Et=p("/organization/list",{method:"GET",use:[v,L],metadata:{openapi:{description:"List all organizations",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{$ref:"#/components/schemas/Organization"}}}}}}}}},async e=>{let r=await T(e.context,e.context.orgOptions).listOrganizations(e.context.session.user.id);return e.json(r)});var oo=fe({name:["action"]}),fu=oo.newRole({name:["action"]}),gu=s(e=>{let t={createOrganization:bt,updateOrganization:Ot,deleteOrganization:At,setActiveOrganization:_t,getFullOrganization:It,listOrganizations:Et,createInvitation:lt(e),cancelInvitation:mt,acceptInvitation:ut,getInvitation:ft,rejectInvitation:pt,addMember:gt(),removeMember:ht,updateMemberRole:wt(e),getActiveMember:yt},r={...st,...e?.roles};return{id:"organization",endpoints:{...it(t,{orgOptions:e||{},roles:r,getSession:s(async n=>await N(n),"getSession")}),hasPermission:p("/organization/has-permission",{method:"POST",requireHeaders:!0,body:re.object({organizationId:re.string().optional(),permission:re.record(re.string(),re.array(re.string()))}),use:[L],metadata:{openapi:{description:"Check if the user has permission",requestBody:{content:{"application/json":{schema:{type:"object",properties:{permission:{type:"object",description:"The permission to check"}},required:["permission"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{error:{type:"string"},success:{type:"boolean"}},required:["success"]}}}}}}}},async n=>{let i=n.body.organizationId||n.context.session.session.activeOrganizationId;if(!i)throw new Rt("BAD_REQUEST",{message:m.NO_ACTIVE_ORGANIZATION});let d=await T(n.context).findMemberByOrgId({userId:n.context.session.user.id,organizationId:i});if(!d)throw new Rt("UNAUTHORIZED",{message:m.USER_IS_NOT_A_MEMBER_OF_THE_ORGANIZATION});let l=r[d.role].authorize(n.body.permission);return l.error?n.json({error:l.error,success:!1},{status:403}):n.json({error:null,success:!0})})},schema:{session:{fields:{activeOrganizationId:{type:"string",required:!1,fieldName:e?.schema?.session?.fields?.activeOrganizationId}}},organization:{modelName:e?.schema?.organization?.modelName,fields:{name:{type:"string",required:!0,fieldName:e?.schema?.organization?.fields?.name},slug:{type:"string",unique:!0,fieldName:e?.schema?.organization?.fields?.slug},logo:{type:"string",required:!1,fieldName:e?.schema?.organization?.fields?.logo},createdAt:{type:"date",required:!0,fieldName:e?.schema?.organization?.fields?.createdAt},metadata:{type:"string",required:!1,fieldName:e?.schema?.organization?.fields?.metadata}}},member:{modelName:e?.schema?.member?.modelName,fields:{organizationId:{type:"string",required:!0,references:{model:"organization",field:"id"},fieldName:e?.schema?.member?.fields?.organizationId},userId:{type:"string",required:!0,fieldName:e?.schema?.member?.fields?.userId,references:{model:"user",field:"id"}},role:{type:"string",required:!0,defaultValue:"member",fieldName:e?.schema?.member?.fields?.role},createdAt:{type:"date",required:!0,fieldName:e?.schema?.member?.fields?.createdAt}}},invitation:{modelName:e?.schema?.invitation?.modelName,fields:{organizationId:{type:"string",required:!0,references:{model:"organization",field:"id"},fieldName:e?.schema?.invitation?.fields?.organizationId},email:{type:"string",required:!0,fieldName:e?.schema?.invitation?.fields?.email},role:{type:"string",required:!1,fieldName:e?.schema?.invitation?.fields?.role},status:{type:"string",required:!0,defaultValue:"pending",fieldName:e?.schema?.invitation?.fields?.status},expiresAt:{type:"date",required:!0,fieldName:e?.schema?.invitation?.fields?.expiresAt},inviterId:{type:"string",references:{model:"user",field:"id"},fieldName:e?.schema?.invitation?.fields?.inviterId,required:!0}}}},$Infer:{Organization:{},Invitation:{},Member:{},ActiveOrganization:{}},$ERROR_CODES:m}},"organization");export{gu as organization};
