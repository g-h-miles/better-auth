import{createRandomStringGenerator as yt}from"@better-auth/utils/random";var I=yt("a-z","0-9","A-Z","-_");import{z as le}from"zod";import{createEndpointCreator as At,createMiddleware as _e,createMiddlewareCreator as Tt}from"better-call";var Se=_e(async()=>({})),N=Tt({use:[Se,_e(async()=>({}))]}),p=At({use:[Se]});import{APIError as gc,createRouter as hc,getCookie as wc,getSignedCookie as bc,setCookie as yc,setSignedCookie as Ac}from"better-call";import{APIError as Ot}from"better-call";function ge(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function Et(e){let t="";for(let r=0;r<e.length;r++)t+=ge(e[r]);return t}function ve(e,t=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${ve(l,t)}$`).join("|")})`;let r="",o="",i=".";t===!0?(r="/",o="[/\\\\]",i="[^/\\\\]"):t&&(r=t,o=Et(r),o.length>1?(o=`(?:${o})`,i=`((?!${o}).)`):i=`[^${o}]`);let s=t?`${o}+?`:"",n=t?`${o}*?`:"",c=t?e.split(r):[e],a="";for(let d=0;d<c.length;d++){let l=c[d],f=c[d+1],g="";if(!(!l&&d>0)){if(t&&(d===c.length-1?g=n:f!=="**"?g=s:g=""),t&&l==="**"){g&&(a+=d===0?"":g,a+=`(?:${i}*?${g})*?`);continue}for(let h=0;h<l.length;h++){let b=l[h];b==="\\"?h<l.length-1&&(a+=ge(l[h+1]),h++):b==="?"?a+=i:b==="*"?a+=`${i}*?`:a+=ge(b)}a+=g}}return a}function kt(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function he(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=ve(e,t.separator),o=new RegExp(`^${r}$`,t.flags),i=kt.bind(null,o);return i.options=t,i.pattern=e,i.regexp=o,i}var oe=Object.create(null),Q=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?oe:globalThis),Pe=new Proxy(oe,{get(e,t){return Q()[t]??oe[t]},has(e,t){let r=Q();return t in r||t in oe},set(e,t,r){let o=Q(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=Q(!0);return delete r[t],!0},ownKeys(){let e=Q(!0);return Object.keys(e)}});function Rt(e){return e?e!=="false":!1}var we=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var be=we==="dev"||we==="development",Ut=we==="test"||Rt(Pe.TEST);var M=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function Ie(e){try{return new URL(e).origin}catch{return null}}function Le(e){return e.includes("://")?new URL(e).host:e}var _t=N(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",s=t?.callbackURL||r?.callbackURL,n=t?.redirectTo,c=r?.currentURL,a=t?.errorCallbackURL,d=t?.newUserCallbackURL,l=o.trustedOrigins,f=e.headers?.has("cookie"),g=(b,O)=>b.startsWith("/")?!1:O.includes("*")?he(O)(Le(b)):b.startsWith(O),h=(b,O)=>{if(!b)return;if(!l.some(me=>g(b,me)||b?.startsWith("/")&&O!=="origin"&&!b.includes(":")))throw e.context.logger.error(`Invalid ${O}: ${b}`),e.context.logger.info(`If it's a valid URL, please add ${b} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new Ot("FORBIDDEN",{message:`Invalid ${O}`})};f&&!e.context.options.advanced?.disableCSRFCheck&&h(i,"origin"),s&&h(s,"callbackURL"),n&&h(n,"redirectURL"),c&&h(c,"currentURL"),a&&h(a,"errorCallbackURL"),d&&h(n,"newUserCallbackURL")});import{APIError as U}from"better-call";import{z as T}from"zod";var z=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));import{base64Url as St}from"@better-auth/utils/base64";import{createHMAC as vt}from"@better-auth/utils/hmac";async function ye(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=St.encode(JSON.stringify({session:t,expiresAt:z(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await vt("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new M("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}async function A(e,t,r,o){let i=e.context.authCookies.sessionToken.options,s=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...i,maxAge:s,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await ye(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function v(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}import{betterFetch as Nt}from"@better-fetch/fetch";import{APIError as Bt}from"better-call";import{decodeJwt as jt,decodeProtectedHeader as Ft,importJWK as Vt,jwtVerify as $t}from"jose";import{createHash as Pt}from"@better-auth/utils/hash";import{base64Url as It}from"@better-auth/utils/base64";async function xe(e){let t=await Pt("SHA-256").digest(e);return It.encode(new Uint8Array(t),{padding:!1})}function se(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?z(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function y({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:i,scopes:s,claims:n,redirectURI:c,duration:a}){let d=new URL(r);if(d.searchParams.set("response_type","code"),d.searchParams.set("client_id",t.clientId),d.searchParams.set("state",o),d.searchParams.set("scope",s.join(" ")),d.searchParams.set("redirect_uri",t.redirectURI||c),i){let l=await xe(i);d.searchParams.set("code_challenge_method","S256"),d.searchParams.set("code_challenge",l)}if(n){let l=n.reduce((f,g)=>(f[g]=null,f),{});d.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return a&&d.searchParams.set("duration",a),d}import{betterFetch as Lt}from"@better-fetch/fetch";import{jwtVerify as Po}from"jose";async function w({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:i,authentication:s}){let n=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(n.set("grant_type","authorization_code"),n.set("code",e),t&&n.set("code_verifier",t),n.set("redirect_uri",r),s==="basic"){let f=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${f}`}else n.set("client_id",o.clientId),n.set("client_secret",o.clientSecret);let{data:a,error:d}=await Lt(i,{method:"POST",body:n,headers:c});if(d)throw d;return se(a)}import{z as B}from"zod";import{APIError as Be}from"better-call";import{createHash as Ce}from"@better-auth/utils/hash";import{xchacha20poly1305 as De}from"@noble/ciphers/chacha";import{bytesToHex as xt,hexToBytes as Ct,utf8ToBytes as Dt}from"@noble/ciphers/utils";import{managedNonce as Ne}from"@noble/ciphers/webcrypto";import{scryptAsync as No}from"@noble/hashes/scrypt";import{getRandomValues as jo}from"uncrypto";import{hex as Vo}from"@better-auth/utils/hex";var Z=async({key:e,data:t})=>{let r=await Ce("SHA-256").digest(e),o=Dt(t),i=Ne(De)(new Uint8Array(r));return xt(i.encrypt(o))},ie=async({key:e,data:t})=>{let r=await Ce("SHA-256").digest(e),o=Ct(t),i=Ne(De)(new Uint8Array(r));return new TextDecoder().decode(i.decrypt(o))};async function ne(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Ie(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Be("BAD_REQUEST",{message:"callbackURL is required"});let o=I(128),i=I(32),s=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),n=new Date;n.setMinutes(n.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:s,identifier:i,expiresAt:n});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Be("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}async function je(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=B.object({callbackURL:B.string(),codeVerifier:B.string(),errorURL:B.string().optional(),newUserURL:B.string().optional(),expiresAt:B.number(),link:B.object({email:B.string(),userId:B.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}var Fe=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:i}){let s=o||["email","name"];return e.scope&&s.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${s.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:i})=>w({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let i=Ft(r),{kid:s,alg:n}=i;if(!s||!n)return!1;let c=await Mt(s),{payload:a}=await $t(r,c,{algorithms:[n],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(d=>{a[d]!==void 0&&(a[d]=!!a[d])}),o&&a.nonce!==o?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=jt(r.idToken);if(!o)return null;let i=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,s=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:i,emailVerified:!1,email:o.email,...s},data:o}}}},Mt=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await Nt(`${t}${r}`);if(!o?.keys)throw new Bt("BAD_REQUEST",{message:"Keys not found"});let i=o.keys.find(s=>s.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await Vt(i,i.alg)};import{betterFetch as zt}from"@better-fetch/fetch";var Ve=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await zt("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let s=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${s}.png`}else{let s=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${s}`}let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...i},data:r}}});import{betterFetch as qt}from"@better-fetch/fetch";var $e=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["email","public_profile"];return e.scope&&i.push(...e.scope),await y({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:t,redirectURI:o})},validateAuthorizationCode:async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await qt("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...i},data:r}}});import{betterFetch as Me}from"@better-fetch/fetch";var ze=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:i,redirectURI:s}){let n=o||["user:email"];return e.scope&&n.push(...e.scope),y({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:n,state:r,redirectURI:s})},validateAuthorizationCode:async({code:r,redirectURI:o})=>w({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await Me("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(i)return null;let s=!1,{data:n}=await Me("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});n&&(o.email=(n.find(a=>a.primary)??n[0])?.email,s=n.find(a=>a.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:s,...c},data:o}}}};var Ae=["info","success","warn","error","debug"];function Ht(e,t){return Ae.indexOf(t)<=Ae.indexOf(e)}var D={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Gt={info:D.fg.blue,success:D.fg.green,warn:D.fg.yellow,error:D.fg.red,debug:D.fg.magenta},Wt=(e,t)=>{let r=new Date().toISOString();return`${D.dim}${r}${D.reset} ${Gt[e]}${e.toUpperCase()}${D.reset} ${D.bright}Better Auth${D.reset} ${t}`},Qt=e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=(i,s,n=[])=>{if(!t||!Ht(r,i))return;let c=Wt(i,s);if(!e||typeof e.log!="function"){i==="error"?console.error(c,...n):i==="warn"?console.warn(c,...n):console.log(c,...n);return}e.log(i==="success"?"info":i,c,...n)};return Object.fromEntries(Ae.map(i=>[i,(...[s,...n])=>o(i,s,n)]))},L=Qt();import{betterFetch as Zt}from"@better-fetch/fetch";import{decodeJwt as Kt}from"jose";var qe=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw L.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new M("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new M("codeVerifier is required for Google");let s=r||["email","profile","openid"];e.scope&&s.push(...e.scope);let n=await y({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:s,state:t,codeVerifier:o,redirectURI:i});return e.accessType&&n.searchParams.set("access_type",e.accessType),e.prompt&&n.searchParams.set("prompt",e.prompt),n},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:i}=await Zt(o);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=Kt(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}});import{betterFetch as Jt}from"@better-fetch/fetch";import{decodeJwt as Yt}from"jose";var He=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let s=i.scopes||["openid","profile","email","User.Read"];return e.scope&&s.push(...e.scope),y({id:"microsoft",options:e,authorizationEndpoint:r,state:i.state,codeVerifier:i.codeVerifier,scopes:s,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:s,redirectURI:n}){return w({code:i,codeVerifier:s,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:o})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let s=Yt(i.idToken),n=e.profilePhotoSize||48;await Jt(`https://graph.microsoft.com/v1.0/me/photos/${n}x${n}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let l=await a.response.clone().arrayBuffer(),f=Buffer.from(l).toString("base64");s.picture=`data:image/jpeg;base64, ${f}`}catch(d){L.error(d&&typeof d=="object"&&"name"in d?d.name:"",d)}}});let c=await e.mapProfileToUser?.(s);return{user:{id:s.sub,name:s.name,email:s.email,image:s.picture,emailVerified:!0,...c},data:s}}}};import{betterFetch as Xt}from"@better-fetch/fetch";var Ge=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){let s=r||["user-read-email"];return e.scope&&s.push(...e.scope),y({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:s,state:t,codeVerifier:o,redirectURI:i})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Xt("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...i},data:r}}});var G={isAction:!1};import{createRandomStringGenerator as er}from"@better-auth/utils/random";var We=e=>er("a-z","A-Z","0-9")(e||32);import{decodeJwt as tr}from"jose";var Qe=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["user:read:email","openid"];return e.scope&&i.push(...e.scope),y({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return L.error("No idToken found in token"),null;let o=tr(r),i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...i},data:o}}});import{betterFetch as rr}from"@better-fetch/fetch";var Ze=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),y({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await rr("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...i},data:r}}});import{betterFetch as or}from"@better-fetch/fetch";var Ke=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:o,codeVerifier:i,redirectURI:s})=>{let n=o||["account_info.read"];return e.scope&&n.push(...e.scope),await y({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:n,state:r,redirectURI:s,codeVerifier:i})},validateAuthorizationCode:async({code:r,codeVerifier:o,redirectURI:i})=>await w({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await or("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(i)return null;let s=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...s},data:o}}}};import{betterFetch as sr}from"@better-fetch/fetch";var Je=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:o,scopes:i,redirectURI:s})=>{let n=i||["profile","email","openid"];return e.scope&&n.push(...e.scope),await y({id:"linkedin",options:e,authorizationEndpoint:t,scopes:n,state:o,redirectURI:s})},validateAuthorizationCode:async({code:o,redirectURI:i})=>await w({code:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),async getUserInfo(o){let{data:i,error:s}=await sr("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(s)return null;let n=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...n},data:i}}}};import{betterFetch as ir}from"@better-fetch/fetch";var Te=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),nr=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:Te(`${t}/oauth/authorize`),tokenEndpoint:Te(`${t}/oauth/token`),userinfoEndpoint:Te(`${t}/api/v4/user`)}},Ye=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=nr(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:async({state:n,scopes:c,codeVerifier:a,redirectURI:d})=>{let l=c||["read_user"];return e.scope&&l.push(...e.scope),await y({id:i,options:e,authorizationEndpoint:t,scopes:l,state:n,redirectURI:d,codeVerifier:a})},validateAuthorizationCode:async({code:n,redirectURI:c,codeVerifier:a})=>w({code:n,redirectURI:e.redirectURI||c,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);let{data:c,error:a}=await ir(o,{headers:{authorization:`Bearer ${n.accessToken}`}});if(a||c.state!=="active"||c.locked)return null;let d=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...d},data:c}}}};import{betterFetch as Xe}from"@better-fetch/fetch";var et=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identity"];return e.scope&&i.push(...e.scope),y({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:s,error:n}=await Xe("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:o.toString()});if(n)throw n;return se(s)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Xe("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...i},data:r}}});import{z as ar}from"zod";var cr={apple:Fe,discord:Ve,facebook:$e,github:ze,microsoft:He,google:qe,spotify:Ge,twitch:Qe,twitter:Ze,dropbox:Ke,linkedin:Je,gitlab:Ye,reddit:et},Ee=Object.keys(cr),tt=ar.enum(Ee,{description:"OAuth2 provider to use"});import{z as x}from"zod";import{APIError as K}from"better-call";import{APIError as j}from"better-call";import{z as q}from"zod";function rt(e){try{return JSON.parse(e)}catch{return null}}var u={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as dr}from"@better-auth/utils/hmac";import{base64 as pr}from"@better-auth/utils/base64";import{binary as ur}from"@better-auth/utils/binary";var ot=()=>p("/get-session",{method:"GET",query:q.optional(q.object({disableCookieCache:q.boolean({description:"Disable cookie cache and fetch session from database"}).or(q.string().transform(e=>e==="true")).optional(),disableRefresh:q.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?rt(ur.decode(pr.decode(r))):null;if(o&&!await dr("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return v(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=o.session;if(o.expiresAt<Date.now()||l.session.expiresAt<new Date){let g=e.context.authCookies.sessionData.name;e.setCookie(g,"",{maxAge:0})}else return e.json(l)}let s=await e.context.internalAdapter.findSession(t);if(e.context.session=s,!s||s.session.expiresAt<new Date)return v(e),s&&await e.context.internalAdapter.deleteSession(s.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(s);let n=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(s.session.expiresAt.valueOf()-n*1e3+c*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(s.session.token,{expiresAt:z(e.context.sessionConfig.expiresIn,"sec")});if(!l)return v(e),e.json(null,{status:401});let f=(l.expiresAt.valueOf()-Date.now())/1e3;return await A(e,{session:l,user:s.user},!1,{maxAge:f}),e.json({session:l,user:s.user})}return await ye(e,s),e.json(s)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new j("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION})}}),F=async(e,t)=>{if(e.context.session)return e.context.session;let r=await ot()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},k=N(async e=>{let t=await F(e);if(!t?.session)throw new j("UNAUTHORIZED");return{session:t}}),en=N(async e=>{let t=await F(e);if(!t?.session)throw new j("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new j("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var lr=p("/revoke-session",{method:"POST",body:q.object({token:q.string({description:"The token to revoke"})}),use:[k],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new j("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new j("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new j("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),mr=p("/revoke-sessions",{method:"POST",use:[k],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new j("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),fr=p("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[k],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new j("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(t.user.id)).filter(s=>s.expiresAt>new Date).filter(s=>s.token!==e.context.session.session.token);return await Promise.all(i.map(s=>e.context.internalAdapter.deleteSession(s.token))),e.json({status:!0})});import{jwtVerify as hr}from"jose";import{SignJWT as gr}from"jose";async function st(e,t,r=3600){return await new gr(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}async function V(e,t,r){return await st({email:t.toLowerCase(),updateTo:r},e)}async function wr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new K("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await V(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}var br=p("/send-verification-email",{method:"POST",query:x.object({currentURL:x.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:x.object({email:x.string({description:"The email to send the verification email to"}).email(),callbackURL:x.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new K("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new K("BAD_REQUEST",{message:u.USER_NOT_FOUND});return await wr(e,r.user),e.json({status:!0})}),yr=p("/verify-email",{method:"GET",query:x.object({token:x.string({description:"The token to verify the email"}),callbackURL:x.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new K("UNAUTHORIZED",{message:c})}let{token:r}=e.query,o;try{o=await hr(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let s=x.object({email:x.string().email(),updateTo:x.string().optional()}).parse(o.payload),n=await e.context.internalAdapter.findUserByEmail(s.email);if(!n)return t("user_not_found");if(s.updateTo){let c=await F(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==s.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(s.email,{email:s.updateTo,emailVerified:!1}),d=await V(e.context.secret,s.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${d}`,token:d},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(s.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await F(e)){let a=await e.context.internalAdapter.createSession(n.user.id,e.request);if(!a)throw new K("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await A(e,{session:a,user:n.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function ae(e,{userInfo:t,account:r,callbackURL:o}){let i=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw L.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),s=i?.user,n=!s;if(i){let a=i.accounts.find(d=>d.providerId===r.providerId);if(a){let d=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([l,f])=>f!==void 0));Object.keys(d).length>0&&await e.context.internalAdapter.updateAccount(a.id,d)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return be&&L.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:i.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(f){return L.error("Unable to link account",f),{error:"unable to link account",data:null}}}}else try{if(s=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&s&&e.context.options.emailVerification?.sendOnSignUp){let a=await V(e.context.secret,s.email),d=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:s,url:d,token:a},e.request)}}catch(a){return a instanceof it?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!s)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(s.id,e.request);return c?{data:{session:c,user:s},error:null,isRegister:n}:{error:"unable to create session",data:null,isRegister:!1}}var Ar=p("/sign-in/social",{method:"POST",query:T.object({currentURL:T.string().optional()}).optional(),body:T.object({callbackURL:T.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:T.string().optional(),errorCallbackURL:T.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:tt,disableRedirect:T.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:T.optional(T.object({token:T.string({description:"ID token from the provider"}),nonce:T.string({description:"Nonce used to generate the token"}).optional(),accessToken:T.string({description:"Access token from the provider"}).optional(),refreshToken:T.string({description:"Refresh token from the provider"}).optional(),expiresAt:T.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(s=>s.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new U("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new U("NOT_FOUND",{message:u.ID_TOKEN_NOT_SUPPORTED});let{token:s,nonce:n}=e.body.idToken;if(!await t.verifyIdToken(s,n))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new U("UNAUTHORIZED",{message:u.INVALID_TOKEN});let a=await t.getUserInfo({idToken:s,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new U("UNAUTHORIZED",{message:u.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new U("UNAUTHORIZED",{message:u.USER_EMAIL_NOT_FOUND});let d=await ae(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(d.error)throw new U("UNAUTHORIZED",{message:d.error});return await A(e,d.data),e.json({token:d.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await ne(e),i=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),Tr=p("/sign-in/email",{method:"POST",body:T.object({email:T.string({description:"Email of the user"}),password:T.string({description:"Password of the user"}),callbackURL:T.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:T.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new U("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!T.string().email().safeParse(t).success)throw new U("BAD_REQUEST",{message:u.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new U("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let s=i.accounts.find(d=>d.providerId==="credential");if(!s)throw e.context.logger.error("Credential account not found",{email:t}),new U("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let n=s?.password;if(!n)throw e.context.logger.error("Password not found",{email:t}),new U("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:n,password:r}))throw e.context.logger.error("Invalid password"),new U("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new U("UNAUTHORIZED",{message:u.EMAIL_NOT_VERIFIED});let d=await V(e.context.secret,i.user.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:l,token:d},e.request),e.context.logger.error("Email not verified",{email:t}),new U("FORBIDDEN",{message:u.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new U("UNAUTHORIZED",{message:u.FAILED_TO_CREATE_SESSION});return await A(e,{session:a,user:i.user},e.body.rememberMe===!1),e.json({user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as J}from"zod";var ce=J.object({code:J.string().optional(),error:J.string().optional(),error_description:J.string().optional(),state:J.string().optional()}),Er=p("/callback/:id",{method:["GET","POST"],body:ce.optional(),query:ce.optional(),metadata:G},async e=>{let t;try{if(e.method==="GET")t=ce.parse(e.query);else if(e.method==="POST")t=ce.parse(e.body);else throw new Error("Unsupported method")}catch(S){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",S),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:i,error_description:s}=t;if(!i)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${s}`);let n=e.context.socialProviders.find(S=>S.id===e.params.id);if(!n)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:a,link:d,errorURL:l,newUserURL:f}=await je(e),g;try{g=await n.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${n.id}`})}catch(S){throw e.context.logger.error("",S),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let h=await n.getUserInfo(g).then(S=>S?.user);function b(S){let C=l||a||`${e.context.baseURL}/error`;throw C.includes("?")?C=`${C}&error=${S}`:C=`${C}?error=${S}`,e.redirect(C)}if(!h)return e.context.logger.error("Unable to get user info"),b("unable_to_get_user_info");if(!h.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),b("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(d){if(d.email!==h.email.toLowerCase())return b("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:d.userId,providerId:n.id,accountId:h.id}))return b("unable_to_link_account");let C;try{C=a.toString()}catch{C=a}throw e.redirect(C)}let O=await ae(e,{userInfo:{...h,email:h.email,name:h.name||h.email},account:{providerId:n.id,accountId:h.id,...g,scope:g.scopes?.join(",")},callbackURL:a});if(O.error)return e.context.logger.error(O.error.split(" ").join("_")),b(O.error.split(" ").join("_"));let{session:Oe,user:me}=O.data;await A(e,{session:Oe,user:me});let fe;try{fe=(O.isRegister&&f||a).toString()}catch{fe=O.isRegister&&f||a}throw e.redirect(fe)});import"zod";import{APIError as kr}from"better-call";var Rr=p("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw v(e),new kr("BAD_REQUEST",{message:u.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),v(e),e.json({success:!0})});import{z as P}from"zod";import{APIError as Y}from"better-call";function nt(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([i,s])=>o.searchParams.set(i,s)),o.href}function Ur(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([i,s])=>o.searchParams.set(i,s)),o.href}var Or=p("/forget-password",{method:"POST",body:P.object({email:P.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:P.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new Y("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,s=z(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),n=We(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${n}`,expiresAt:s});let c=`${e.context.baseURL}/reset-password/${n}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:n},e.request),e.json({status:!0})}),_r=p("/reset-password/:token",{method:"GET",query:P.object({callbackURL:P.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(nt(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(nt(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Ur(e.context,r,{token:t}))}),Sr=p("/reset-password",{query:P.optional(P.object({token:P.string().optional(),currentURL:P.string().optional()})),method:"POST",body:P.object({newPassword:P.string({description:"The new password to set"}),token:P.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new Y("BAD_REQUEST",{message:u.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new Y("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});if(r.length>i)throw new Y("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let s=`reset-password:${t}`,n=await e.context.internalAdapter.findVerificationValue(s);if(!n||n.expiresAt<new Date)throw new Y("BAD_REQUEST",{message:u.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(n.id);let c=n.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(f=>f.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:a,accountId:c}),e.json({status:!0}))});import{z as R}from"zod";import{APIError as E}from"better-call";import{z as m}from"zod";import{APIError as Jn}from"better-call";var Yn=m.object({id:m.string(),providerId:m.string(),accountId:m.string(),userId:m.string(),accessToken:m.string().nullish(),refreshToken:m.string().nullish(),idToken:m.string().nullish(),accessTokenExpiresAt:m.date().nullish(),refreshTokenExpiresAt:m.date().nullish(),scope:m.string().nullish(),password:m.string().nullish(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date)}),Xn=m.object({id:m.string(),email:m.string().transform(e=>e.toLowerCase()),emailVerified:m.boolean().default(!1),name:m.string(),image:m.string().nullish(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date)}),ea=m.object({id:m.string(),userId:m.string(),expiresAt:m.date(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date),token:m.string(),ipAddress:m.string().nullish(),userAgent:m.string().nullish()}),ta=m.object({id:m.string(),value:m.string(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date),expiresAt:m.date(),identifier:m.string()});function at(e,t){if(!t)return e;for(let r in t){let o=t[r]?.modelName;o&&(e[r].modelName=o);for(let i in e[r].fields){let s=t[r]?.fields?.[i];s&&(e[r].fields[i].fieldName=s)}}return e}var Pr=p("/change-password",{method:"POST",body:R.object({newPassword:R.string({description:"The new password to set"}),currentPassword:R.string({description:"The current password"}),revokeOtherSessions:R.boolean({description:"Revoke all other sessions"}).optional()}),use:[k],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,i=e.context.session,s=e.context.password.config.minPasswordLength;if(t.length<s)throw e.context.logger.error("Password is too short"),new E("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new E("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(i.user.id)).find(g=>g.providerId==="credential"&&g.password);if(!a||!a.password)throw new E("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});let d=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new E("BAD_REQUEST",{message:u.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:d});let f=null;if(o){await e.context.internalAdapter.deleteSessions(i.user.id);let g=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!g)throw new E("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION});await A(e,{session:g,user:i.user}),f=g.token}return e.json({token:f})}),Ir=p("/set-password",{method:"POST",body:R.object({newPassword:R.string()}),metadata:{SERVER_ONLY:!0},use:[k]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new E("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new E("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let n=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),c=await e.context.password.hash(t);if(!n)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new E("BAD_REQUEST",{message:"user already has a password"})}),Lr=p("/delete-user",{method:"POST",use:[k],body:R.object({callbackURL:R.string().optional(),password:R.string().optional(),token:R.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new E("NOT_FOUND");let t=e.context.session;if(e.body.password){let s=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!s||!s.password)throw new E("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:s.password,password:e.body.password}))throw new E("BAD_REQUEST",{message:u.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=t.session.createdAt.getTime(),s=e.context.options.session.freshAge;if(Date.now()-i>s)throw new E("BAD_REQUEST",{message:u.SESSION_EXPIRED})}if(e.body.token)return await ct({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=I(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let s=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:s,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),v(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),ct=p("/delete-user/callback",{method:"GET",query:R.object({token:R.string(),callbackURL:R.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new E("NOT_FOUND");let t=await F(e);if(!t)throw new E("NOT_FOUND",{message:u.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new E("NOT_FOUND",{message:u.INVALID_TOKEN});if(r.value!==t.user.id)throw new E("NOT_FOUND",{message:u.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),v(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),xr=p("/change-email",{method:"POST",query:R.object({currentURL:R.string().optional()}).optional(),body:R.object({newEmail:R.string({description:"The new email to set"}).email(),callbackURL:R.string({description:"The URL to redirect to after email verification"}).optional()}),use:[k],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new E("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new E("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new E("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new E("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await V(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var Cr=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,Dr=p("/error",{method:"GET",metadata:{...G,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Cr(t),{headers:{"Content-Type":"text/html"}})});var Nr=p("/ok",{method:"GET",metadata:{...G,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as Ra}from"zod";import{APIError as Ia}from"better-call";import{z as X}from"zod";import{APIError as dt}from"better-call";var Br=p("/list-accounts",{method:"GET",use:[k],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),jr=p("/link-social",{method:"POST",requireHeaders:!0,query:X.object({currentURL:X.string().optional()}).optional(),body:X.object({callbackURL:X.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:X.enum(Ee,{description:"The OAuth2 provider to use"})}),use:[k],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new dt("BAD_REQUEST",{message:u.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new dt("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});let s=await ne(e,{userId:t.user.id,email:t.user.email}),n=await i.createAuthorizationURL({state:s.state,codeVerifier:s.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:n.toString(),redirect:!0})});import"defu";import{APIError as it}from"better-call";import{z as $}from"zod";import{APIError as ee}from"better-call";var de="two_factor";var pe="trust_device";import{z as pt}from"zod";import{createHMAC as Fr}from"@better-auth/utils/hmac";import"@better-auth/utils/base64";var H=N({body:pt.object({trustDevice:pt.boolean().optional()})},async e=>{let t=await F(e);if(!t){let r=e.context.createAuthCookie(de),o=await e.getSignedCookie(r.name,e.context.secret);if(!o)throw new ee("UNAUTHORIZED",{message:"invalid two factor cookie"});let i=await e.context.internalAdapter.findUserById(o);if(!i)throw new ee("UNAUTHORIZED",{message:"invalid two factor cookie"});let s=await e.context.internalAdapter.createSession(o,e.request);if(!s)throw new ee("INTERNAL_SERVER_ERROR",{message:"failed to create session"});return{valid:async()=>{if(await A(e,{session:s,user:i}),e.body.trustDevice){let n=e.context.createAuthCookie(pe,{maxAge:2592e3}),c=await Fr("SHA-256","base64urlnopad").sign(e.context.secret,`${i.id}!${s.token}`);await e.setSignedCookie(n.name,`${c}!${s.token}`,e.context.secret,n.attributes)}return e.json({token:s.token})},invalid:async()=>{throw new ee("UNAUTHORIZED",{message:"invalid two factor authentication"})},session:{session:s,user:i}}}return{valid:async()=>e.json({token:t.session.token}),invalid:async()=>{throw new ee("UNAUTHORIZED",{message:"invalid two factor authentication"})},session:t}});import{APIError as te}from"better-call";var _={OTP_NOT_ENABLED:"OTP not enabled",OTP_HAS_EXPIRED:"OTP has expired",TOTP_NOT_ENABLED:"TOTP not enabled",TWO_FACTOR_NOT_ENABLED:"Two factor isn't enabled",BACKUP_CODES_NOT_ENABLED:"Backup codes aren't enabled",INVALID_BACKUP_CODE:"Invalid backup code"};function Vr(e){return Array.from({length:e?.amount??10}).fill(null).map(()=>I(e?.length??10,"a-z","0-9","A-Z")).map(t=>`${t.slice(0,5)}-${t.slice(5)}`)}async function ke(e,t){let r=e,o=t?.customBackupCodesGenerate?t.customBackupCodesGenerate():Vr(),i=await Z({data:JSON.stringify(o),key:r});return{backupCodes:o,encryptedBackupCodes:i}}async function $r(e,t){let r=await ut(e.backupCodes,t);return r?{status:r.includes(e.code),updated:r.filter(o=>o!==e.code)}:{status:!1,updated:null}}async function ut(e,t){let r=Buffer.from(await ie({key:t,data:e})).toString("utf-8"),o=JSON.parse(r),i=$.array($.string()).safeParse(o);return i.success?i.data:null}var lt=e=>{let t="twoFactor";return{id:"backup_code",endpoints:{verifyBackupCode:p("/two-factor/verify-backup-code",{method:"POST",body:$.object({code:$.string(),disableSession:$.boolean().optional()}),use:[H]},async r=>{let o=r.context.session.user,i=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:o.id}]});if(!i)throw new te("BAD_REQUEST",{message:_.BACKUP_CODES_NOT_ENABLED});let s=await $r({backupCodes:i.backupCodes,code:r.body.code},r.context.secret);if(!s.status)throw new te("UNAUTHORIZED",{message:_.INVALID_BACKUP_CODE});let n=await Z({key:r.context.secret,data:JSON.stringify(s.updated)});return await r.context.adapter.updateMany({model:t,update:{backupCodes:n},where:[{field:"userId",value:o.id}]}),r.body.disableSession||await A(r,{session:r.context.session.session,user:o}),r.json({user:o,session:r.context.session})}),generateBackupCodes:p("/two-factor/generate-backup-codes",{method:"POST",body:$.object({password:$.string()}),use:[k]},async r=>{let o=r.context.session.user;if(!o.twoFactorEnabled)throw new te("BAD_REQUEST",{message:_.TWO_FACTOR_NOT_ENABLED});await r.context.password.checkPassword(o.id,r);let i=await ke(r.context.secret,e);return await r.context.adapter.update({model:t,update:{backupCodes:i.encryptedBackupCodes},where:[{field:"userId",value:r.context.session.user.id}]}),r.json({status:!0,backupCodes:i.backupCodes})}),viewBackupCodes:p("/two-factor/view-backup-codes",{method:"GET",body:$.object({userId:$.string()}),metadata:{SERVER_ONLY:!0}},async r=>{let o=await r.context.adapter.findOne({model:t,where:[{field:"userId",value:r.body.userId}]});if(!o)throw new te("BAD_REQUEST",{message:"Backup codes aren't enabled"});let i=await ut(o.backupCodes,r.context.secret);if(!i)throw new te("BAD_REQUEST",{message:_.BACKUP_CODES_NOT_ENABLED});return r.json({status:!0,backupCodes:i})})}}};import{APIError as re}from"better-call";import{z as mt}from"zod";var ft=e=>{let t={...e,digits:e?.digits||6,period:(e?.period||3)*60*1e3},r="twoFactor",o=p("/two-factor/send-otp",{method:"POST",use:[H],metadata:{openapi:{summary:"Send two factor OTP",description:"Send two factor OTP to the user",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async s=>{if(!e||!e.sendOTP)throw s.context.logger.error("send otp isn't configured. Please configure the send otp function on otp options."),new re("BAD_REQUEST",{message:"otp isn't configured"});let n=s.context.session.user;if(!await s.context.adapter.findOne({model:r,where:[{field:"userId",value:n.id}]}))throw new re("BAD_REQUEST",{message:_.OTP_NOT_ENABLED});let a=I(t.digits,"0-9");return await s.context.internalAdapter.createVerificationValue({value:a,identifier:`2fa-otp-${n.id}`,expiresAt:new Date(Date.now()+t.period)}),await e.sendOTP({user:n,otp:a},s.request),s.json({status:!0})}),i=p("/two-factor/verify-otp",{method:"POST",body:mt.object({code:mt.string({description:"The otp code to verify"})}),use:[H],metadata:{openapi:{summary:"Verify two factor OTP",description:"Verify two factor OTP",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async s=>{let n=s.context.session.user;if(!n.twoFactorEnabled)throw new re("BAD_REQUEST",{message:"two factor isn't enabled"});if(!await s.context.adapter.findOne({model:r,where:[{field:"userId",value:n.id}]}))throw new re("BAD_REQUEST",{message:_.OTP_NOT_ENABLED});let a=await s.context.internalAdapter.findVerificationValue(`2fa-otp-${n.id}`);if(!a||a.expiresAt<new Date)throw new re("BAD_REQUEST",{message:_.OTP_HAS_EXPIRED});return a.value===s.body.code?s.context.valid():s.context.invalid()});return{id:"otp",endpoints:{sendTwoFactorOTP:o,verifyTwoFactorOTP:i}}};import{APIError as W}from"better-call";import{z as ue}from"zod";import{createOTP as Re}from"@better-auth/utils/otp";var gt=e=>{let t={...e,digits:e?.digits||6,period:e?.period||30},r="twoFactor",o=p("/totp/generate",{method:"POST",use:[k],metadata:{openapi:{summary:"Generate TOTP code",description:"Use this endpoint to generate a TOTP code",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{code:{type:"string"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new W("BAD_REQUEST",{message:"totp isn't configured"});let c=n.context.session.user,a=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a)throw new W("BAD_REQUEST",{message:_.TOTP_NOT_ENABLED});return{code:await Re(a.secret,{period:t.period,digits:t.digits}).totp()}}),i=p("/two-factor/get-totp-uri",{method:"POST",use:[k],body:ue.object({password:ue.string({description:"User password"})}),metadata:{openapi:{summary:"Get TOTP URI",description:"Use this endpoint to get the TOTP URI",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new W("BAD_REQUEST",{message:"totp isn't configured"});let c=n.context.session.user,a=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a||!c.twoFactorEnabled)throw new W("BAD_REQUEST",{message:_.TOTP_NOT_ENABLED});return await n.context.password.checkPassword(c.id,n),{totpURI:Re(a.secret,{digits:t.digits,period:t.period}).url(e?.issuer||n.context.appName,c.email)}}),s=p("/two-factor/verify-totp",{method:"POST",body:ue.object({code:ue.string({description:"The otp code to verify"})}),use:[H],metadata:{openapi:{summary:"Verify two factor TOTP",description:"Verify two factor TOTP",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async n=>{if(e?.disable)throw n.context.logger.error("totp isn't configured. please pass totp option on two factor plugin to enable totp"),new W("BAD_REQUEST",{message:"totp isn't configured"});let c=n.context.session.user,a=await n.context.adapter.findOne({model:r,where:[{field:"userId",value:c.id}]});if(!a)throw new W("BAD_REQUEST",{message:_.TOTP_NOT_ENABLED});let d=await ie({key:n.context.secret,data:a.secret});if(!await Re(d,{period:t.period,digits:t.digits}).verify(n.body.code))return n.context.invalid();if(!c.twoFactorEnabled){let f=await n.context.internalAdapter.updateUser(c.id,{twoFactorEnabled:!0}),g=await n.context.internalAdapter.createSession(c.id,n.request,!1,n.context.session.session).catch(h=>{throw console.log(h),h});await n.context.internalAdapter.deleteSession(n.context.session.session.token),await A(n,{session:g,user:f})}return n.context.valid()});return{id:"totp",endpoints:{generateTOTP:o,getTOTPURI:i,verifyTOTP:s}}};import{APIError as Td}from"better-call";async function Ue(e,t){let o=(await e.context.internalAdapter.findAccounts(t.userId))?.find(n=>n.providerId==="credential"),i=o?.password;return!o||!i?!1:await e.context.password.verify({hash:i,password:t.password})}import{APIError as wt}from"better-call";var ht={user:{fields:{twoFactorEnabled:{type:"boolean",required:!1,defaultValue:!1,input:!1}}},twoFactor:{fields:{secret:{type:"string",required:!0,returned:!1},backupCodes:{type:"string",required:!0,returned:!1},userId:{type:"string",required:!0,returned:!1,references:{model:"user",field:"id"}}}}};import{createOTP as Mr}from"@better-auth/utils/otp";import"@better-auth/utils/base64";import{createHMAC as bt}from"@better-auth/utils/hmac";var Rd=e=>({id:"two-factor",$InferServerPlugin:{},atomListeners:[{matcher:t=>t.startsWith("/two-factor/"),signal:"$sessionSignal"}],pathMethods:{"/two-factor/disable":"POST","/two-factor/enable":"POST","/two-factor/send-otp":"POST","/two-factor/generate-backup-codes":"POST"},fetchPlugins:[{id:"two-factor",name:"two-factor",hooks:{async onSuccess(t){t.data?.twoFactorRedirect&&e?.onTwoFactorRedirect&&await e.onTwoFactorRedirect()}}}]});var Hd=e=>{let t={twoFactorTable:"twoFactor"},r=gt(e?.totpOptions),o=lt(e?.backupCodeOptions),i=ft(e?.otpOptions);return{id:"two-factor",endpoints:{...r.endpoints,...i.endpoints,...o.endpoints,enableTwoFactor:p("/two-factor/enable",{method:"POST",body:le.object({password:le.string({description:"User password"}).min(8)}),use:[k],metadata:{openapi:{summary:"Enable two factor authentication",description:"Use this endpoint to enable two factor authentication. This will generate a TOTP URI and backup codes. Once the user verifies the TOTP URI, the two factor authentication will be enabled.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{totpURI:{type:"string",description:"TOTP URI"},backupCodes:{type:"array",items:{type:"string"},description:"Backup codes"}}}}}}}}}},async s=>{let n=s.context.session.user,{password:c}=s.body;if(!await Ue(s,{password:c,userId:n.id}))throw new wt("BAD_REQUEST",{message:u.INVALID_PASSWORD});let d=I(32),l=await Z({key:s.context.secret,data:d}),f=await ke(s.context.secret,e?.backupCodeOptions);if(e?.skipVerificationOnEnable){let h=await s.context.internalAdapter.updateUser(n.id,{twoFactorEnabled:!0}),b=await s.context.internalAdapter.createSession(h.id,s.request,!1,s.context.session.session);await A(s,{session:b,user:n}),await s.context.internalAdapter.deleteSession(s.context.session.session.token)}await s.context.adapter.deleteMany({model:t.twoFactorTable,where:[{field:"userId",value:n.id}]}),await s.context.adapter.create({model:t.twoFactorTable,data:{secret:l,backupCodes:f.encryptedBackupCodes,userId:n.id}});let g=Mr(d,{digits:e?.totpOptions?.digits||6,period:e?.totpOptions?.period}).url(e?.issuer||"Better Auth",n.email);return s.json({totpURI:g,backupCodes:f.backupCodes})}),disableTwoFactor:p("/two-factor/disable",{method:"POST",body:le.object({password:le.string({description:"User password"}).min(8)}),use:[k],metadata:{openapi:{summary:"Disable two factor authentication",description:"Use this endpoint to disable two factor authentication.",responses:{200:{description:"Successful response",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async s=>{let n=s.context.session.user,{password:c}=s.body;if(!await Ue(s,{password:c,userId:n.id}))throw new wt("BAD_REQUEST",{message:"Invalid password"});await s.context.internalAdapter.updateUser(n.id,{twoFactorEnabled:!1}),await s.context.adapter.delete({model:t.twoFactorTable,where:[{field:"userId",value:n.id}]});let d=await s.context.internalAdapter.createSession(n.id,s.request,!1,s.context.session.session);return await A(s,{session:d,user:n}),await s.context.internalAdapter.deleteSession(s.context.session.session.token),s.json({status:!0})})},options:e,hooks:{after:[{matcher(s){return s.path==="/sign-in/email"||s.path==="/sign-in/username"||s.path==="/sign-in/phone-number"},handler:N(async s=>{let n=s.context.newSession;if(!n||!n?.user.twoFactorEnabled)return;let c=s.context.createAuthCookie(pe),a=await s.getSignedCookie(c.name,s.context.secret);if(a){let[l,f]=a.split("!"),g=await bt("SHA-256","base64urlnopad").sign(s.context.secret,`${n.user.id}!${f}`);if(l===g){let h=await bt("SHA-256","base64urlnopad").sign(s.context.secret,`${n.user.id}!${f}`);await s.setSignedCookie(c.name,`${h}!${n.session.token}`,s.context.secret,c.attributes);return}}v(s),await s.context.internalAdapter.deleteSession(n.session.token);let d=s.context.createAuthCookie(de,{maxAge:60*10});return await s.setSignedCookie(d.name,n.user.id,s.context.secret,d.attributes),s.json({twoFactorRedirect:!0})})}]},schema:at(ht,e?.schema),rateLimit:[{pathMatcher(s){return s.startsWith("/two-factor/")},window:10,max:3}]}};export{Hd as twoFactor,Rd as twoFactorClient};
