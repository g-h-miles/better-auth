var Ye=Object.defineProperty;var s=(e,t)=>Ye(e,"name",{value:t,configurable:!0});import{z as w}from"zod";import{APIError as Bd,createRouter as zd,getCookie as Md,getSignedCookie as qd,setCookie as Fd,setSignedCookie as Hd}from"better-call";import{APIError as nt}from"better-call";import{createEndpointCreator as Xe,createMiddleware as we,createMiddlewareCreator as et}from"better-call";var be=we(async()=>({})),J=et({use:[be,we(async()=>({}))]}),h=Xe({use:[be]});function ce(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}s(ce,"escapeRegExpChar");function tt(e){let t="";for(let r=0;r<e.length;r++)t+=ce(e[r]);return t}s(tt,"escapeRegExpString");function ye(e,t=!0){if(Array.isArray(e))return`(?:${e.map(p=>`^${ye(p,t)}$`).join("|")})`;let r="",o="",i=".";t===!0?(r="/",o="[/\\\\]",i="[^/\\\\]"):t&&(r=t,o=tt(r),o.length>1?(o=`(?:${o})`,i=`((?!${o}).)`):i=`[^${o}]`);let n=t?`${o}+?`:"",a=t?`${o}*?`:"",c=t?e.split(r):[e],d="";for(let l=0;l<c.length;l++){let p=c[l],m=c[l+1],A="";if(!(!p&&l>0)){if(t&&(l===c.length-1?A=a:m!=="**"?A=n:A=""),t&&p==="**"){A&&(d+=l===0?"":A,d+=`(?:${i}*?${A})*?`);continue}for(let g=0;g<p.length;g++){let b=p[g];b==="\\"?g<p.length-1&&(d+=ce(p[g+1]),g++):b==="?"?d+=i:b==="*"?d+=`${i}*?`:d+=ce(b)}d+=A}}return d}s(ye,"transform");function rt(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}s(rt,"isMatch");function le(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=ye(e,t.separator),o=new RegExp(`^${r}$`,t.flags),i=rt.bind(null,o);return i.options=t,i.pattern=e,i.regexp=o,i}s(le,"wildcardMatch");var ie=Object.create(null),K=s(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ie:globalThis),"_getEnv"),Ae=new Proxy(ie,{get(e,t){return K()[t]??ie[t]},has(e,t){let r=K();return t in r||t in ie},set(e,t,r){let o=K(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=K(!0);return delete r[t],!0},ownKeys(){let e=K(!0);return Object.keys(e)}});function ot(e){return e?e!=="false":!1}s(ot,"toBoolean");var pe=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var ue=pe==="dev"||pe==="development",it=pe==="test"||ot(Ae.TEST);var z=class extends Error{static{s(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function ke(e){try{return new URL(e).origin}catch{return null}}s(ke,"getOrigin");function Re(e){return e.includes("://")?new URL(e).host:e}s(Re,"getHost");var st=J(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,c=r?.currentURL,d=t?.errorCallbackURL,l=t?.newUserCallbackURL,p=o.trustedOrigins,m=e.headers?.has("cookie"),A=s((b,U)=>b.startsWith("/")?!1:U.includes("*")?le(U)(Re(b)):b.startsWith(U),"matchesPattern"),g=s((b,U)=>{if(!b)return;if(!p.some(j=>A(b,j)||b?.startsWith("/")&&U!=="origin"&&!b.includes(":")))throw e.context.logger.error(`Invalid ${U}: ${b}`),e.context.logger.info(`If it's a valid URL, please add ${b} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${p}`),new nt("FORBIDDEN",{message:`Invalid ${U}`})},"validateURL");m&&!e.context.options.advanced?.disableCSRFCheck&&g(i,"origin"),n&&g(n,"callbackURL"),a&&g(a,"redirectURL"),c&&g(c,"currentURL"),d&&g(d,"errorCallbackURL"),l&&g(a,"newUserCallbackURL")});import{APIError as S}from"better-call";import{z as E}from"zod";var M=s((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");import{base64Url as at}from"@better-auth/utils/base64";import{createHMAC as dt}from"@better-auth/utils/hmac";async function me(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=at.encode(JSON.stringify({session:t,expiresAt:M(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await dt("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new z("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}s(me,"setCookieCache");async function O(e,t,r,o){let i=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...i,maxAge:n,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await me(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}s(O,"setSessionCookie");function D(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}s(D,"deleteSessionCookie");import{betterFetch as mt}from"@better-fetch/fetch";import{APIError as ft}from"better-call";import{decodeJwt as gt,decodeProtectedHeader as ht,importJWK as wt,jwtVerify as bt}from"jose";import{createHash as ct}from"@better-auth/utils/hash";import{base64Url as lt}from"@better-auth/utils/base64";async function Ee(e){let t=await ct("SHA-256").digest(e);return lt.encode(new Uint8Array(t),{padding:!1})}s(Ee,"generateCodeChallenge");function ne(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?M(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}s(ne,"getOAuth2Tokens");async function R({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:i,scopes:n,claims:a,redirectURI:c,duration:d}){let l=new URL(r);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",t.clientId),l.searchParams.set("state",o),l.searchParams.set("scope",n.join(" ")),l.searchParams.set("redirect_uri",t.redirectURI||c),i){let p=await Ee(i);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",p)}if(a){let p=a.reduce((m,A)=>(m[A]=null,m),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...p}}))}return d&&l.searchParams.set("duration",d),l}s(R,"createAuthorizationURL");import{betterFetch as _e}from"@better-fetch/fetch";import{jwtVerify as pt}from"jose";async function k({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:i,authentication:n}){let a=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),n==="basic"){let m=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${m}`}else a.set("client_id",o.clientId),a.set("client_secret",o.clientSecret);let{data:d,error:l}=await _e(i,{method:"POST",body:a,headers:c});if(l)throw l;return ne(d)}s(k,"validateAuthorizationCode");async function Ue(e,t){let{data:r,error:o}=await _e(t,{method:"GET",headers:{accept:"application/json","user-agent":"better-auth"}});if(o)throw o;let i=r.keys,n=JSON.parse(atob(e.split(".")[0])),a=i.find(d=>d.kid===n.kid);if(!a)throw new Error("Key not found");return await pt(e,a)}s(Ue,"validateToken");import{z as $}from"zod";import{APIError as Te}from"better-call";import{createHash as Lo}from"@better-auth/utils/hash";import{xchacha20poly1305 as xo}from"@noble/ciphers/chacha";import{bytesToHex as Co,hexToBytes as jo,utf8ToBytes as No}from"@noble/ciphers/utils";import{managedNonce as Vo}from"@noble/ciphers/webcrypto";import{scryptAsync as ko}from"@noble/hashes/scrypt";import{getRandomValues as Eo}from"uncrypto";import{hex as Uo}from"@better-auth/utils/hex";import{createRandomStringGenerator as ut}from"@better-auth/utils/random";var Y=ut("a-z","0-9","A-Z","-_");async function G(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?ke(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Te("BAD_REQUEST",{message:"callbackURL is required"});let o=Y(128),i=Y(32),n=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:n,identifier:i,expiresAt:a});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Te("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}s(G,"generateState");async function se(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=$.object({callbackURL:$.string(),codeVerifier:$.string(),errorURL:$.string().optional(),newUserURL:$.string().optional(),expiresAt:$.number(),link:$.object({email:$.string(),userId:$.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}s(se,"parseState");var ve=s(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:i}){let n=o||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:i})=>k({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let i=ht(r),{kid:n,alg:a}=i;if(!n||!a)return!1;let c=await yt(n),{payload:d}=await bt(r,c,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{d[l]!==void 0&&(d[l]=!!d[l])}),o&&d.nonce!==o?!1:!!d},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=gt(r.idToken);if(!o)return null;let i=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:i,emailVerified:!1,email:o.email,...n},data:o}}}},"apple"),yt=s(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await mt(`${t}${r}`);if(!o?.keys)throw new ft("BAD_REQUEST",{message:"Keys not found"});let i=o.keys.find(n=>n.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await wt(i,i.alg)},"getApplePublicKey");import{betterFetch as At}from"@better-fetch/fetch";var Se=s(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await At("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...i},data:r}}}),"discord");import{betterFetch as kt}from"@better-fetch/fetch";var Oe=s(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["email","public_profile"];return e.scope&&i.push(...e.scope),await R({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:t,redirectURI:o})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await kt("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...i},data:r}}}),"facebook");import{betterFetch as Ie}from"@better-fetch/fetch";var Le=s(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:i,redirectURI:n}){let a=o||["user:email"];return e.scope&&a.push(...e.scope),R({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:n})},validateAuthorizationCode:s(async({code:r,redirectURI:o})=>k({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await Ie("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=!1,{data:a}=await Ie("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(o.email=(a.find(d=>d.primary)??a[0])?.email,n=a.find(d=>d.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:n,...c},data:o}}}},"github");var fe=["info","success","warn","error","debug"];function Rt(e,t){return fe.indexOf(t)<=fe.indexOf(e)}s(Rt,"shouldPublishLog");var C={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Et={info:C.fg.blue,success:C.fg.green,warn:C.fg.yellow,error:C.fg.red,debug:C.fg.magenta},_t=s((e,t)=>{let r=new Date().toISOString();return`${C.dim}${r}${C.reset} ${Et[e]}${e.toUpperCase()}${C.reset} ${C.bright}Better Auth${C.reset} ${t}`},"formatMessage"),Ut=s(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=s((i,n,a=[])=>{if(!t||!Rt(r,i))return;let c=_t(i,n);if(!e||typeof e.log!="function"){i==="error"?console.error(c,...a):i==="warn"?console.warn(c,...a):console.log(c,...a);return}e.log(i==="success"?"info":i,c,...a)},"LogFunc");return Object.fromEntries(fe.map(i=>[i,(...[n,...a])=>o(i,n,a)]))},"createLogger"),P=Ut();import{betterFetch as Tt}from"@better-fetch/fetch";import{decodeJwt as vt}from"jose";var Pe=s(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw P.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new z("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new z("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let a=await R({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:o,redirectURI:i});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:i}=await Tt(o);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=vt(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");import{betterFetch as St}from"@better-fetch/fetch";import{decodeJwt as Ot}from"jose";var xe=s(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let n=i.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),R({id:"microsoft",options:e,authorizationEndpoint:r,state:i.state,codeVerifier:i.codeVerifier,scopes:n,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:n,redirectURI:a}){return k({code:i,codeVerifier:n,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:o})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let n=Ot(i.idToken),a=e.profilePhotoSize||48;await St(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(d){if(!(e.disableProfilePhoto||!d.response.ok))try{let p=await d.response.clone().arrayBuffer(),m=Buffer.from(p).toString("base64");n.picture=`data:image/jpeg;base64, ${m}`}catch(l){P.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let c=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...c},data:n}}}},"microsoft");import{betterFetch as It}from"@better-fetch/fetch";var De=s(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),R({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:o,redirectURI:i})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await It("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...i},data:r}}}),"spotify");var W={isAction:!1};import{createRandomStringGenerator as Lt}from"@better-auth/utils/random";var Ce=s(e=>Lt("a-z","A-Z","0-9")(e||32),"generateId");import{decodeJwt as Pt}from"jose";var je=s(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["user:read:email","openid"];return e.scope&&i.push(...e.scope),R({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return P.error("No idToken found in token"),null;let o=Pt(r),i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...i},data:o}}}),"twitch");import{betterFetch as xt}from"@better-fetch/fetch";var Ne=s(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),R({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await xt("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...i},data:r}}}),"twitter");import{betterFetch as Dt}from"@better-fetch/fetch";var $e=s(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:s(async({state:r,scopes:o,codeVerifier:i,redirectURI:n})=>{let a=o||["account_info.read"];return e.scope&&a.push(...e.scope),await R({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:n,codeVerifier:i})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:i})=>await k({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await Dt("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...n},data:o}}}},"dropbox");import{betterFetch as Ct}from"@better-fetch/fetch";var Ve=s(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:s(async({state:o,scopes:i,redirectURI:n})=>{let a=i||["profile","email","openid"];return e.scope&&a.push(...e.scope),await R({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:o,redirectURI:n})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:o,redirectURI:i})=>await k({code:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:i,error:n}=await Ct("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(n)return null;let a=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...a},data:i}}}},"linkedin");import{betterFetch as jt}from"@better-fetch/fetch";var ge=s((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),Nt=s(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:ge(`${t}/oauth/authorize`),tokenEndpoint:ge(`${t}/oauth/token`),userinfoEndpoint:ge(`${t}/api/v4/user`)}},"issuerToEndpoints"),Be=s(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=Nt(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:s(async({state:a,scopes:c,codeVerifier:d,redirectURI:l})=>{let p=c||["read_user"];return e.scope&&p.push(...e.scope),await R({id:i,options:e,authorizationEndpoint:t,scopes:p,state:a,redirectURI:l,codeVerifier:d})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:a,redirectURI:c,codeVerifier:d})=>k({code:a,redirectURI:e.redirectURI||c,options:e,codeVerifier:d,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:c,error:d}=await jt(o,{headers:{authorization:`Bearer ${a.accessToken}`}});if(d||c.state!=="active"||c.locked)return null;let l=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...l},data:c}}}},"gitlab");import{betterFetch as ze}from"@better-fetch/fetch";var Me=s(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identity"];return e.scope&&i.push(...e.scope),R({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:a}=await ze("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:o.toString()});if(a)throw a;return ne(n)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await ze("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...i},data:r}}}),"reddit");import{z as $t}from"zod";var Vt={apple:ve,discord:Se,facebook:Oe,github:Le,microsoft:xe,google:Pe,spotify:De,twitch:je,twitter:Ne,dropbox:$e,linkedin:Ve,gitlab:Be,reddit:Me},he=Object.keys(Vt),qe=$t.enum(he,{description:"OAuth2 provider to use"});import{z as x}from"zod";import{APIError as X}from"better-call";import{APIError as V}from"better-call";import{z as F}from"zod";function Fe(e){try{return JSON.parse(e)}catch{return null}}s(Fe,"safeJSONParse");var u={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as Bt}from"@better-auth/utils/hmac";import{base64 as zt}from"@better-auth/utils/base64";import{binary as Mt}from"@better-auth/utils/binary";var He=s(()=>h("/get-session",{method:"GET",query:F.optional(F.object({disableCookieCache:F.boolean({description:"Disable cookie cache and fetch session from database"}).or(F.string().transform(e=>e==="true")).optional(),disableRefresh:F.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Fe(Mt.decode(zt.decode(r))):null;if(o&&!await Bt("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return D(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let p=o.session;if(o.expiresAt<Date.now()||p.session.expiresAt<new Date){let A=e.context.authCookies.sessionData.name;e.setCookie(A,"",{maxAge:0})}else return e.json(p)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return D(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(n);let a=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-a*1e3+c*1e3<=Date.now()){let p=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:M(e.context.sessionConfig.expiresIn,"sec")});if(!p)return D(e),e.json(null,{status:401});let m=(p.expiresAt.valueOf()-Date.now())/1e3;return await O(e,{session:p,user:n.user},!1,{maxAge:m}),e.json({session:p,user:n.user})}return await me(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new V("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION})}}),"getSession"),H=s(async(e,t)=>{if(e.context.session)return e.context.session;let r=await He()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),I=J(async e=>{let t=await H(e);if(!t?.session)throw new V("UNAUTHORIZED");return{session:t}}),fs=J(async e=>{let t=await H(e);if(!t?.session)throw new V("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new V("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var qt=h("/revoke-session",{method:"POST",body:F.object({token:F.string({description:"The token to revoke"})}),use:[I],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new V("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new V("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new V("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Ft=h("/revoke-sessions",{method:"POST",use:[I],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new V("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Ht=h("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[I],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new V("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(i.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});import{jwtVerify as Wt}from"jose";import{SignJWT as Gt}from"jose";async function Ge(e,t,r=3600){return await new Gt(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}s(Ge,"signJWT");async function B(e,t,r){return await Ge({email:t.toLowerCase(),updateTo:r},e)}s(B,"createEmailVerificationToken");async function Qt(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new X("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await B(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}s(Qt,"sendVerificationEmailFn");var Zt=h("/send-verification-email",{method:"POST",query:x.object({currentURL:x.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:x.object({email:x.string({description:"The email to send the verification email to"}).email(),callbackURL:x.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new X("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new X("BAD_REQUEST",{message:u.USER_NOT_FOUND});return await Qt(e,r.user),e.json({status:!0})}),Jt=h("/verify-email",{method:"GET",query:x.object({token:x.string({description:"The token to verify the email"}),callbackURL:x.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new X("UNAUTHORIZED",{message:c})}s(t,"redirectOnError");let{token:r}=e.query,o;try{o=await Wt(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let n=x.object({email:x.string().email(),updateTo:x.string().optional()}).parse(o.payload),a=await e.context.internalAdapter.findUserByEmail(n.email);if(!a)return t("user_not_found");if(n.updateTo){let c=await H(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let d=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),l=await B(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:d,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await H(e)){let d=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!d)throw new X("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await O(e,{session:d,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function Q(e,{userInfo:t,account:r,callbackURL:o}){let i=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(d=>{throw P.error(`Better auth was unable to query your database.
Error: `,d),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=i?.user,a=!n;if(i){let d=i.accounts.find(l=>l.providerId===r.providerId);if(d){let l=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([p,m])=>m!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(d.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return ue&&P.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:i.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(m){return P.error("Unable to link account",m),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(d=>d?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let d=await B(e.context.secret,n.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:l,token:d},e.request)}}catch(d){return d instanceof Z?{error:d.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(n.id,e.request);return c?{data:{session:c,user:n},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}s(Q,"handleOAuthUserInfo");var Kt=h("/sign-in/social",{method:"POST",query:E.object({currentURL:E.string().optional()}).optional(),body:E.object({callbackURL:E.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:E.string().optional(),errorCallbackURL:E.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:qe,disableRedirect:E.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:E.optional(E.object({token:E.string({description:"ID token from the provider"}),nonce:E.string({description:"Nonce used to generate the token"}).optional(),accessToken:E.string({description:"Access token from the provider"}).optional(),refreshToken:E.string({description:"Refresh token from the provider"}).optional(),expiresAt:E.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new S("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new S("NOT_FOUND",{message:u.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(n,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new S("UNAUTHORIZED",{message:u.INVALID_TOKEN});let d=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!d||!d?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new S("UNAUTHORIZED",{message:u.FAILED_TO_GET_USER_INFO});if(!d.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new S("UNAUTHORIZED",{message:u.USER_EMAIL_NOT_FOUND});let l=await Q(e,{userInfo:{email:d.user.email,id:d.user.id,name:d.user.name||"",image:d.user.image,emailVerified:d.user.emailVerified||!1},account:{providerId:t.id,accountId:d.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new S("UNAUTHORIZED",{message:l.error});return await O(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await G(e),i=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),Yt=h("/sign-in/email",{method:"POST",body:E.object({email:E.string({description:"Email of the user"}),password:E.string({description:"Password of the user"}),callbackURL:E.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:E.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new S("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!E.string().email().safeParse(t).success)throw new S("BAD_REQUEST",{message:u.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new S("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let n=i.accounts.find(l=>l.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new S("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let a=n?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new S("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new S("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new S("UNAUTHORIZED",{message:u.EMAIL_NOT_VERIFIED});let l=await B(e.context.secret,i.user.email),p=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:p,token:l},e.request),e.context.logger.error("Email not verified",{email:t}),new S("FORBIDDEN",{message:u.EMAIL_NOT_VERIFIED})}let d=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!d)throw e.context.logger.error("Failed to create session"),new S("UNAUTHORIZED",{message:u.FAILED_TO_CREATE_SESSION});return await O(e,{session:d,user:i.user},e.body.rememberMe===!1),e.json({user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as ee}from"zod";var ae=ee.object({code:ee.string().optional(),error:ee.string().optional(),error_description:ee.string().optional(),state:ee.string().optional()}),Xt=h("/callback/:id",{method:["GET","POST"],body:ae.optional(),query:ae.optional(),metadata:W},async e=>{let t;try{if(e.method==="GET")t=ae.parse(e.query);else if(e.method==="POST")t=ae.parse(e.body);else throw new Error("Unsupported method")}catch(y){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",y),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:i,error_description:n}=t;if(!i)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${n}`);let a=e.context.socialProviders.find(y=>y.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:d,link:l,errorURL:p,newUserURL:m}=await se(e),A;try{A=await a.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(y){throw e.context.logger.error("",y),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let g=await a.getUserInfo(A).then(y=>y?.user);function b(y){let v=p||d||`${e.context.baseURL}/error`;throw v.includes("?")?v=`${v}&error=${y}`:v=`${v}?error=${y}`,e.redirect(v)}if(s(b,"redirectOnError"),!g)return e.context.logger.error("Unable to get user info"),b("unable_to_get_user_info");if(!g.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),b("email_not_found");if(!d)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==g.email.toLowerCase())return b("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:a.id,accountId:g.id}))return b("unable_to_link_account");let v;try{v=d.toString()}catch{v=d}throw e.redirect(v)}let U=await Q(e,{userInfo:{...g,email:g.email,name:g.name||g.email},account:{providerId:a.id,accountId:g.id,...A,scope:A.scopes?.join(",")},callbackURL:d});if(U.error)return e.context.logger.error(U.error.split(" ").join("_")),b(U.error.split(" ").join("_"));let{session:oe,user:j}=U.data;await O(e,{session:oe,user:j});let q;try{q=(U.isRegister&&m||d).toString()}catch{q=U.isRegister&&m||d}throw e.redirect(q)});import"zod";import{APIError as er}from"better-call";var tr=h("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw D(e),new er("BAD_REQUEST",{message:u.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),D(e),e.json({success:!0})});import{z as L}from"zod";import{APIError as te}from"better-call";function We(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}s(We,"redirectError");function rr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}s(rr,"redirectCallback");var or=h("/forget-password",{method:"POST",body:L.object({email:L.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:L.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new te("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,n=M(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),a=Ce(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:n});let c=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:a},e.request),e.json({status:!0})}),ir=h("/reset-password/:token",{method:"GET",query:L.object({callbackURL:L.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(We(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(We(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(rr(e.context,r,{token:t}))}),nr=h("/reset-password",{query:L.optional(L.object({token:L.string().optional(),currentURL:L.string().optional()})),method:"POST",body:L.object({newPassword:L.string({description:"The new password to set"}),token:L.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new te("BAD_REQUEST",{message:u.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new te("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});if(r.length>i)throw new te("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(n);if(!a||a.expiresAt<new Date)throw new te("BAD_REQUEST",{message:u.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let c=a.value,d=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(m=>m.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,d),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:d,accountId:c}),e.json({status:!0}))});import{z as T}from"zod";import{APIError as _}from"better-call";import{z as f}from"zod";import{APIError as ha}from"better-call";var wa=f.object({id:f.string(),providerId:f.string(),accountId:f.string(),userId:f.string(),accessToken:f.string().nullish(),refreshToken:f.string().nullish(),idToken:f.string().nullish(),accessTokenExpiresAt:f.date().nullish(),refreshTokenExpiresAt:f.date().nullish(),scope:f.string().nullish(),password:f.string().nullish(),createdAt:f.date().default(()=>new Date),updatedAt:f.date().default(()=>new Date)}),ba=f.object({id:f.string(),email:f.string().transform(e=>e.toLowerCase()),emailVerified:f.boolean().default(!1),name:f.string(),image:f.string().nullish(),createdAt:f.date().default(()=>new Date),updatedAt:f.date().default(()=>new Date)}),ya=f.object({id:f.string(),userId:f.string(),expiresAt:f.date(),createdAt:f.date().default(()=>new Date),updatedAt:f.date().default(()=>new Date),token:f.string(),ipAddress:f.string().nullish(),userAgent:f.string().nullish()}),Aa=f.object({id:f.string(),value:f.string(),createdAt:f.date().default(()=>new Date),updatedAt:f.date().default(()=>new Date),expiresAt:f.date(),identifier:f.string()});var ar=h("/change-password",{method:"POST",body:T.object({newPassword:T.string({description:"The new password to set"}),currentPassword:T.string({description:"The current password"}),revokeOtherSessions:T.boolean({description:"Revoke all other sessions"}).optional()}),use:[I],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,i=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new _("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new _("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let d=(await e.context.internalAdapter.findAccounts(i.user.id)).find(A=>A.providerId==="credential"&&A.password);if(!d||!d.password)throw new _("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(t);if(!await e.context.password.verify({hash:d.password,password:r}))throw new _("BAD_REQUEST",{message:u.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(d.id,{password:l});let m=null;if(o){await e.context.internalAdapter.deleteSessions(i.user.id);let A=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!A)throw new _("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION});await O(e,{session:A,user:i.user}),m=A.token}return e.json({token:m})}),dr=h("/set-password",{method:"POST",body:T.object({newPassword:T.string()}),metadata:{SERVER_ONLY:!0},use:[I]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new _("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new _("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(d=>d.providerId==="credential"&&d.password),c=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new _("BAD_REQUEST",{message:"user already has a password"})}),cr=h("/delete-user",{method:"POST",use:[I],body:T.object({callbackURL:T.string().optional(),password:T.string().optional(),token:T.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new _("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!n||!n.password)throw new _("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new _("BAD_REQUEST",{message:u.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-i>n)throw new _("BAD_REQUEST",{message:u.SESSION_EXPIRED})}if(e.body.token)return await Qe({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=Y(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),D(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Qe=h("/delete-user/callback",{method:"GET",query:T.object({token:T.string(),callbackURL:T.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new _("NOT_FOUND");let t=await H(e);if(!t)throw new _("NOT_FOUND",{message:u.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new _("NOT_FOUND",{message:u.INVALID_TOKEN});if(r.value!==t.user.id)throw new _("NOT_FOUND",{message:u.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),D(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),lr=h("/change-email",{method:"POST",query:T.object({currentURL:T.string().optional()}).optional(),body:T.object({newEmail:T.string({description:"The new email to set"}).email(),callbackURL:T.string({description:"The URL to redirect to after email verification"}).optional()}),use:[I],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new _("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new _("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new _("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new _("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await B(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var pr=s((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),ur=h("/error",{method:"GET",metadata:{...W,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(pr(t),{headers:{"Content-Type":"text/html"}})});var mr=h("/ok",{method:"GET",metadata:{...W,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as Ga}from"zod";import{APIError as Xa}from"better-call";import{z as re}from"zod";import{APIError as Ze}from"better-call";var fr=h("/list-accounts",{method:"GET",use:[I],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),gr=h("/link-social",{method:"POST",requireHeaders:!0,query:re.object({currentURL:re.string().optional()}).optional(),body:re.object({callbackURL:re.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:re.enum(he,{description:"The OAuth2 provider to use"})}),use:[I],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new Ze("BAD_REQUEST",{message:u.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new Ze("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});let n=await G(e,{userId:t.user.id,email:t.user.email}),a=await i.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:a.toString(),redirect:!0})});import"defu";import{APIError as Z}from"better-call";import{betterFetch as Je,BetterFetchError as hr}from"@better-fetch/fetch";import{decodeJwt as wr}from"jose";var fc=s(e=>({id:"sso",endpoints:{createOIDCProvider:h("/sso/register",{method:"POST",body:w.object({providerId:w.string({description:"The ID of the provider. This is used to identify the provider during login and callback"}),issuer:w.string({description:"The issuer url of the provider (e.g. https://idp.example.com)"}),domain:w.string({description:"The domain of the provider. This is used for email matching"}),clientId:w.string({description:"The client ID"}),clientSecret:w.string({description:"The client secret"}),authorizationEndpoint:w.string({description:"The authorization endpoint"}).optional(),tokenEndpoint:w.string({description:"The token endpoint"}).optional(),userInfoEndpoint:w.string({description:"The user info endpoint"}).optional(),tokenEndpointAuthentication:w.enum(["client_secret_post","client_secret_basic"]).optional(),jwksEndpoint:w.string({description:"The JWKS endpoint"}).optional(),discoveryEndpoint:w.string().optional(),scopes:w.array(w.string(),{description:"The scopes to request. Defaults to ['openid', 'email', 'profile', 'offline_access']"}).optional(),pkce:w.boolean({description:"Whether to use PKCE for the authorization flow"}).default(!0).optional(),mapping:w.object({id:w.string({description:"The field in the user info response that contains the id. Defaults to 'sub'"}),email:w.string({description:"The field in the user info response that contains the email. Defaults to 'email'"}),emailVerified:w.string({description:"The field in the user info response that contains whether the email is verified. defaults to 'email_verified'"}).optional(),name:w.string({description:"The field in the user info response that contains the name. Defaults to 'name'"}),image:w.string({description:"The field in the user info response that contains the image. Defaults to 'picture'"}).optional(),extraFields:w.record(w.string()).optional()}).optional(),organizationId:w.string({description:"If organization plugin is enabled, the organization id to link the provider to"}).optional()}),use:[I],metadata:{openapi:{summary:"Register an OIDC provider",description:"This endpoint is used to register an OIDC provider. This is used to configure the provider and link it to an organization",responses:{200:{description:"The created provider"}}}}},async t=>{let r=t.body;if(w.string().url().safeParse(r.issuer).error)throw new Z("BAD_REQUEST",{message:"Invalid issuer. Must be a valid URL"});let i=await t.context.adapter.create({model:"ssoProvider",data:{issuer:r.issuer,domain:r.domain,oidcConfig:JSON.stringify({issuer:r.issuer,clientId:r.clientId,clientSecret:r.clientSecret,authorizationEndpoint:r.authorizationEndpoint,tokenEndpoint:r.tokenEndpoint,tokenEndpointAuthentication:r.tokenEndpointAuthentication,jwksEndpoint:r.jwksEndpoint,pkce:r.pkce,discoveryEndpoint:r.discoveryEndpoint||`${r.issuer}/.well-known/openid-configuration`,mapping:r.mapping,scopes:r.scopes,userinfoEndpoint:r.userInfoEndpoint}),organizationId:r.organizationId,userId:t.context.session.user.id,providerId:r.providerId}});return t.json({...i,oidcConfig:JSON.parse(i.oidcConfig),redirectURI:`${t.context.baseURL}/sso/callback/${i.providerId}`})}),signInSSO:h("/sign-in/sso",{method:"POST",body:w.object({email:w.string({description:"The email address to sign in with. This is used to identify the issuer to sign in with. It's optional if the issuer is provided"}).optional(),organizationSlug:w.string({description:"The slug of the organization to sign in with"}).optional(),domain:w.string({description:"The domain of the provider."}).optional(),callbackURL:w.string({description:"The URL to redirect to after login"}),errorCallbackURL:w.string({description:"The URL to redirect to after login"}).optional(),newUserCallbackURL:w.string({description:"The URL to redirect to after login if the user is new"}).optional()}),metadata:{openapi:{summary:"Sign in with SSO provider",description:"This endpoint is used to sign in with an SSO provider. It redirects to the provider's authorization URL",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email address to sign in with. This is used to identify the issuer to sign in with. It's optional if the issuer is provided"},issuer:{type:"string",description:"The issuer identifier, this is the URL of the provider and can be used to verify the provider and identify the provider during login. It's optional if the email is provided"},providerId:{type:"string",description:"The ID of the provider to sign in with. This can be provided instead of email or issuer"},callbackURL:{type:"string",description:"The URL to redirect to after login"},errorCallbackURL:{type:"string",description:"The URL to redirect to after login"},newUserCallbackURL:{type:"string",description:"The URL to redirect to after login if the user is new"}},required:["callbackURL"]}}}}}}},async t=>{let r=t.body,{email:o,organizationSlug:i,domain:n}=r;if(!o&&!i&&!n)throw new Z("BAD_REQUEST",{message:"email, organizationSlug or domain is required"});n=r.domain||o?.split("@")[1];let a="";i&&(a=await t.context.adapter.findOne({model:"organization",where:[{field:"slug",value:i}]}).then(m=>m?m.id:""));let c=await t.context.adapter.findOne({model:"ssoProvider",where:[{field:a?"organizationId":"domain",value:a||n}]}).then(m=>m?{...m,oidcConfig:JSON.parse(m.oidcConfig)}:null);if(!c)throw new Z("NOT_FOUND",{message:"No provider found for the issuer"});let d=await G(t),l=`${t.context.baseURL}/sso/callback/${c.providerId}`,p=await R({id:c.issuer,options:{clientId:c.oidcConfig.clientId,clientSecret:c.oidcConfig.clientSecret},redirectURI:l,state:d.state,codeVerifier:c.oidcConfig.pkce?d.codeVerifier:void 0,scopes:["openid","email","profile","offline_access"],authorizationEndpoint:c.oidcConfig.authorizationEndpoint});return t.json({url:p.toString(),redirect:!0})}),callbackSSO:h("/sso/callback/:providerId",{method:"GET",query:w.object({code:w.string().optional(),state:w.string(),error:w.string().optional(),error_description:w.string().optional()}),metadata:{isAction:!1,openapi:{summary:"Callback URL for SSO provider",description:"This endpoint is used as the callback URL for SSO providers. It handles the authorization code and exchanges it for an access token",responses:{302:{description:"Redirects to the callback URL"}}}}},async t=>{let{code:r,state:o,error:i,error_description:n}=t.query,a=await se(t);if(!a)throw t.redirect(`${t.context.baseURL}/error?error=invalid_state`);let{callbackURL:c,errorURL:d,newUserURL:l}=a;if(!r||i)throw t.redirect(`${d||c}?error=${i}&error_description=${n}`);let p=await t.context.adapter.findOne({model:"ssoProvider",where:[{field:"providerId",value:t.params.providerId}]}).then(y=>y?{...y,oidcConfig:JSON.parse(y.oidcConfig)}:null);if(!p)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=provider not found`);let m=p.oidcConfig,A=await Je(p.oidcConfig.discoveryEndpoint);if(A.data&&(m={tokenEndpoint:A.data.token_endpoint,tokenEndpointAuthentication:A.data.token_endpoint_auth_method,userInfoEndpoint:A.data.userinfo_endpoint,scopes:["openid","email","profile","offline_access"],...p.oidcConfig}),!m.tokenEndpoint)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=token_endpoint_not_found`);let g=await k({code:r,codeVerifier:p.oidcConfig.pkce?a.codeVerifier:void 0,redirectURI:`${t.context.baseURL}/sso/callback/${p.providerId}`,options:{clientId:p.oidcConfig.clientId,clientSecret:p.oidcConfig.clientSecret},tokenEndpoint:m.tokenEndpoint,authentication:m.tokenEndpointAuthentication==="client_secret_post"?"post":"basic"}).catch(y=>{if(y instanceof hr)throw t.redirect(`${d||c}?error=invalid_provider&error_description=${y.message}`);return null});if(!g)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=token_response_not_found`);let b=null;if(g.idToken){let y=wr(g.idToken);if(!m.jwksEndpoint)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=jwks_endpoint_not_found`);let v=await Ue(g.idToken,m.jwksEndpoint).catch(de=>(t.context.logger.error(de),null));if(!v)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=token_not_verified`);if(v.payload.iss!==p.issuer)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=issuer_mismatch`);let N=m.mapping||{};b={...Object.fromEntries(Object.entries(N.extraFields||{}).map(([de,Ke])=>[de,v.payload[Ke]])),id:y[N.id||"sub"],email:y[N.email||"email"],emailVerified:y[N.emailVerified||"email_verified"],name:y[N.name||"name"],image:y[N.image||"picture"]}}if(!b){if(!m.userInfoEndpoint)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=user_info_endpoint_not_found`);let y=await Je(m.userInfoEndpoint,{headers:{Authorization:`Bearer ${g.accessToken}`}});if(y.error)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=${y.error.message}`);b=y.data}if(!b.email||!b.id)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=missing_user_info`);let U=await Q(t,{userInfo:{email:b.email,name:b.name||b.email,id:b.id,image:b.image,emailVerified:b.emailVerified||!1},account:{idToken:g.idToken,accessToken:g.accessToken,refreshToken:g.refreshToken,accountId:b.id,providerId:p.providerId,accessTokenExpiresAt:g.accessTokenExpiresAt,refreshTokenExpiresAt:g.refreshTokenExpiresAt,scope:g.scopes?.join(",")}});if(U.error)throw t.redirect(`${d||c}/error?error=${U.error}`);let{session:oe,user:j}=U.data;if(e?.provisionUser&&await e.provisionUser({user:j,userInfo:b,token:g,provider:p}),p.organizationId&&!e?.organizationProvisioning?.disabled&&t.context.options.plugins?.find(v=>v.id==="organization")&&!await t.context.adapter.findOne({model:"member",where:[{field:"organizationId",value:p.organizationId},{field:"userId",value:j.id}]})){let N=e?.organizationProvisioning?.getRole?await e.organizationProvisioning.getRole({user:j,userInfo:b,token:g,provider:p}):e?.organizationProvisioning?.defaultRole||"member";await t.context.adapter.create({model:"member",data:{organizationId:p.organizationId,userId:j.id,role:N,createdAt:new Date,updatedAt:new Date}})}await O(t,{session:oe,user:j});let q;try{q=new URL(c).toString()}catch{q=c}throw t.redirect(q)})},schema:{ssoProvider:{fields:{issuer:{type:"string",required:!0},oidcConfig:{type:"string",required:!1},samlConfig:{type:"string",required:!1},userId:{type:"string",references:{model:"user",field:"id"}},providerId:{type:"string",required:!0,unique:!0},organizationId:{type:"string",required:!1},domain:{type:"string",required:!0}}}}}),"sso");export{fc as sso};
