var Ze=Object.defineProperty;var s=(e,t)=>Ze(e,"name",{value:t,configurable:!0});import{z as oe}from"zod";import{APIError as Nc,createRouter as jc,getCookie as $c,getSignedCookie as Vc,setCookie as Bc,setSignedCookie as Mc}from"better-call";import{APIError as tt}from"better-call";import{createEndpointCreator as Qe,createMiddleware as ge,createMiddlewareCreator as Ke}from"better-call";var he=ge(async()=>({})),$=Ke({use:[he,ge(async()=>({}))]}),g=Qe({use:[he]});function se(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}s(se,"escapeRegExpChar");function Je(e){let t="";for(let r=0;r<e.length;r++)t+=se(e[r]);return t}s(Je,"escapeRegExpString");function we(e,t=!0){if(Array.isArray(e))return`(?:${e.map(u=>`^${we(u,t)}$`).join("|")})`;let r="",i="",o=".";t===!0?(r="/",i="[/\\\\]",o="[^/\\\\]"):t&&(r=t,i=Je(r),i.length>1?(i=`(?:${i})`,o=`((?!${i}).)`):o=`[^${i}]`);let n=t?`${i}+?`:"",a=t?`${i}*?`:"",d=t?e.split(r):[e],c="";for(let l=0;l<d.length;l++){let u=d[l],h=d[l+1],b="";if(!(!u&&l>0)){if(t&&(l===d.length-1?b=a:h!=="**"?b=n:b=""),t&&u==="**"){b&&(c+=l===0?"":b,c+=`(?:${o}*?${b})*?`);continue}for(let w=0;w<u.length;w++){let f=u[w];f==="\\"?w<u.length-1&&(c+=se(u[w+1]),w++):f==="?"?c+=o:f==="*"?c+=`${o}*?`:c+=se(f)}c+=b}}return c}s(we,"transform");function Ye(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}s(Ye,"isMatch");function ae(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=we(e,t.separator),i=new RegExp(`^${r}$`,t.flags),o=Ye.bind(null,i);return o.options=t,o.pattern=e,o.regexp=i,o}s(ae,"wildcardMatch");var Y=Object.create(null),H=s(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?Y:globalThis),"_getEnv"),be=new Proxy(Y,{get(e,t){return H()[t]??Y[t]},has(e,t){let r=H();return t in r||t in Y},set(e,t,r){let i=H(!0);return i[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=H(!0);return delete r[t],!0},ownKeys(){let e=H(!0);return Object.keys(e)}});function Xe(e){return e?e!=="false":!1}s(Xe,"toBoolean");var ce=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var de=ce==="dev"||ce==="development",et=ce==="test"||Xe(be.TEST);var V=class extends Error{static{s(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function ye(e){try{return new URL(e).origin}catch{return null}}s(ye,"getOrigin");function Ae(e){return e.includes("://")?new URL(e).host:e}s(Ae,"getHost");var rt=$(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:i}=e,o=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,d=r?.currentURL,c=t?.errorCallbackURL,l=t?.newUserCallbackURL,u=i.trustedOrigins,h=e.headers?.has("cookie"),b=s((f,A)=>f.startsWith("/")?!1:A.includes("*")?ae(A)(Ae(f)):f.startsWith(A),"matchesPattern"),w=s((f,A)=>{if(!f)return;if(!u.some(ie=>b(f,ie)||f?.startsWith("/")&&A!=="origin"&&!f.includes(":")))throw e.context.logger.error(`Invalid ${A}: ${f}`),e.context.logger.info(`If it's a valid URL, please add ${f} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${u}`),new tt("FORBIDDEN",{message:`Invalid ${A}`})},"validateURL");h&&!e.context.options.advanced?.disableCSRFCheck&&w(o,"origin"),n&&w(n,"callbackURL"),a&&w(a,"redirectURL"),d&&w(d,"currentURL"),c&&w(c,"errorCallbackURL"),l&&w(a,"newUserCallbackURL")});import{APIError as _}from"better-call";import{z as R}from"zod";var B=s((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");import{base64Url as ot}from"@better-auth/utils/base64";import{createHMAC as it}from"@better-auth/utils/hmac";function ke(e){let t=new Map;return e.split(", ").forEach(i=>{let o=i.split(";").map(h=>h.trim()),[n,...a]=o,[d,...c]=n.split("="),l=c.join("=");if(!d||l===void 0)return;let u={value:l};a.forEach(h=>{let[b,...w]=h.split("="),f=w.join("="),A=b.trim().toLowerCase();switch(A){case"max-age":u["max-age"]=f?parseInt(f.trim(),10):void 0;break;case"expires":u.expires=f?new Date(f.trim()):void 0;break;case"domain":u.domain=f?f.trim():void 0;break;case"path":u.path=f?f.trim():void 0;break;case"secure":u.secure=!0;break;case"httponly":u.httponly=!0;break;case"samesite":u.samesite=f?f.trim().toLowerCase():void 0;break;default:u[A]=f?f.trim():!0;break}}),t.set(d,u)}),t}s(ke,"parseSetCookieHeader");async function le(e,t){if(e.context.options.session?.cookieCache?.enabled){let i=ot.encode(JSON.stringify({session:t,expiresAt:B(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await it("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(i.length>4093)throw new V("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,i,e.context.authCookies.sessionData.options)}}s(le,"setCookieCache");async function T(e,t,r,i){let o=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...o,maxAge:n,...i}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await le(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}s(T,"setSessionCookie");function S(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}s(S,"deleteSessionCookie");function G(e){let t=e.split("; "),r=new Map;return t.forEach(i=>{let[o,n]=i.split("=");r.set(o,n)}),r}s(G,"parseCookies");import{betterFetch as dt}from"@better-fetch/fetch";import{APIError as lt}from"better-call";import{decodeJwt as ut,decodeProtectedHeader as pt,importJWK as mt,jwtVerify as ft}from"jose";import{createHash as nt}from"@better-auth/utils/hash";import{base64Url as st}from"@better-auth/utils/base64";async function Re(e){let t=await nt("SHA-256").digest(e);return st.encode(new Uint8Array(t),{padding:!1})}s(Re,"generateCodeChallenge");function X(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?B(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}s(X,"getOAuth2Tokens");async function k({id:e,options:t,authorizationEndpoint:r,state:i,codeVerifier:o,scopes:n,claims:a,redirectURI:d,duration:c}){let l=new URL(r);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",t.clientId),l.searchParams.set("state",i),l.searchParams.set("scope",n.join(" ")),l.searchParams.set("redirect_uri",t.redirectURI||d),o){let u=await Re(o);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",u)}if(a){let u=a.reduce((h,b)=>(h[b]=null,h),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...u}}))}return c&&l.searchParams.set("duration",c),l}s(k,"createAuthorizationURL");import{betterFetch as at}from"@better-fetch/fetch";import{jwtVerify as co}from"jose";async function y({code:e,codeVerifier:t,redirectURI:r,options:i,tokenEndpoint:o,authentication:n}){let a=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),n==="basic"){let h=btoa(`${i.clientId}:${i.clientSecret}`);d.authorization=`Basic ${h}`}else a.set("client_id",i.clientId),a.set("client_secret",i.clientSecret);let{data:c,error:l}=await at(o,{method:"POST",body:a,headers:d});if(l)throw l;return X(c)}s(y,"validateAuthorizationCode");import{z as C}from"zod";import{APIError as Ee}from"better-call";import{createHash as So}from"@better-auth/utils/hash";import{xchacha20poly1305 as vo}from"@noble/ciphers/chacha";import{bytesToHex as Lo,hexToBytes as Po,utf8ToBytes as xo}from"@noble/ciphers/utils";import{managedNonce as Co}from"@noble/ciphers/webcrypto";import{scryptAsync as wo}from"@noble/hashes/scrypt";import{getRandomValues as yo}from"uncrypto";import{hex as ko}from"@better-auth/utils/hex";import{createRandomStringGenerator as ct}from"@better-auth/utils/random";var W=ct("a-z","0-9","A-Z","-_");async function ee(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?ye(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Ee("BAD_REQUEST",{message:"callbackURL is required"});let i=W(128),o=W(32),n=JSON.stringify({callbackURL:r,codeVerifier:i,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:n,identifier:o,expiresAt:a});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Ee("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:i}}s(ee,"generateState");async function Ue(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let i=C.object({callbackURL:C.string(),codeVerifier:C.string(),errorURL:C.string().optional(),newUserURL:C.string().optional(),expiresAt:C.number(),link:C.object({email:C.string(),userId:C.string()}).optional()}).parse(JSON.parse(r.value));if(i.errorURL||(i.errorURL=`${e.context.baseURL}/error`),i.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),i}s(Ue,"parseState");var Te=s(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:i,redirectURI:o}){let n=i||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||o}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:s(async({code:r,codeVerifier:i,redirectURI:o})=>y({code:r,codeVerifier:i,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,i){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,i);let o=pt(r),{kid:n,alg:a}=o;if(!n||!a)return!1;let d=await gt(n),{payload:c}=await ft(r,d,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{c[l]!==void 0&&(c[l]=!!c[l])}),i&&c.nonce!==i?!1:!!c},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let i=ut(r.idToken);if(!i)return null;let o=i.user?`${i.user.name.firstName} ${i.user.name.lastName}`:i.email,n=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:o,emailVerified:!1,email:i.email,...n},data:i}}}},"apple"),gt=s(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:i}=await dt(`${t}${r}`);if(!i?.keys)throw new lt("BAD_REQUEST",{message:"Keys not found"});let o=i.keys.find(n=>n.kid===e);if(!o)throw new Error(`JWK with kid ${e} not found`);return await mt(o,o.alg)},"getApplePublicKey");import{betterFetch as ht}from"@better-fetch/fetch";var _e=s(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:i}){let o=r||["identify","email"];return e.scope&&o.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${o.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||i)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>y({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await ht("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(i)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...o},data:r}}}),"discord");import{betterFetch as wt}from"@better-fetch/fetch";var Se=s(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:i}){let o=r||["email","public_profile"];return e.scope&&o.push(...e.scope),await k({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:o,state:t,redirectURI:i})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>y({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await wt("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(i)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...o},data:r}}}),"facebook");import{betterFetch as Oe}from"@better-fetch/fetch";var ve=s(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:i,codeVerifier:o,redirectURI:n}){let a=i||["user:email"];return e.scope&&a.push(...e.scope),k({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:n})},validateAuthorizationCode:s(async({code:r,redirectURI:i})=>y({code:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:i,error:o}=await Oe("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(o)return null;let n=!1,{data:a}=await Oe("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(i.email=(a.find(c=>c.primary)??a[0])?.email,n=a.find(c=>c.email===i.email)?.verified??!1);let d=await e.mapProfileToUser?.(i);return{user:{id:i.id.toString(),name:i.name||i.login,email:i.email,image:i.avatar_url,emailVerified:n,...d},data:i}}}},"github");var ue=["info","success","warn","error","debug"];function bt(e,t){return ue.indexOf(t)<=ue.indexOf(e)}s(bt,"shouldPublishLog");var D={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},yt={info:D.fg.blue,success:D.fg.green,warn:D.fg.yellow,error:D.fg.red,debug:D.fg.magenta},At=s((e,t)=>{let r=new Date().toISOString();return`${D.dim}${r}${D.reset} ${yt[e]}${e.toUpperCase()}${D.reset} ${D.bright}Better Auth${D.reset} ${t}`},"formatMessage"),kt=s(e=>{let t=e?.disabled!==!0,r=e?.level??"error",i=s((o,n,a=[])=>{if(!t||!bt(r,o))return;let d=At(o,n);if(!e||typeof e.log!="function"){o==="error"?console.error(d,...a):o==="warn"?console.warn(d,...a):console.log(d,...a);return}e.log(o==="success"?"info":o,d,...a)},"LogFunc");return Object.fromEntries(ue.map(o=>[o,(...[n,...a])=>i(o,n,a)]))},"createLogger"),L=kt();import{betterFetch as Rt}from"@better-fetch/fetch";import{decodeJwt as Et}from"jose";var Ie=s(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:i,redirectURI:o}){if(!e.clientId||!e.clientSecret)throw L.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new V("CLIENT_ID_AND_SECRET_REQUIRED");if(!i)throw new V("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let a=await k({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:i,redirectURI:o});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:i})=>y({code:t,codeVerifier:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let i=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:o}=await Rt(i);return o?o.aud===e.clientId&&o.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=Et(t.idToken),i=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...i},data:r}}}),"google");import{betterFetch as Ut}from"@better-fetch/fetch";import{decodeJwt as Tt}from"jose";var Le=s(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,i=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(o){let n=o.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),k({id:"microsoft",options:e,authorizationEndpoint:r,state:o.state,codeVerifier:o.codeVerifier,scopes:n,redirectURI:o.redirectURI})},validateAuthorizationCode({code:o,codeVerifier:n,redirectURI:a}){return y({code:o,codeVerifier:n,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:i})},async getUserInfo(o){if(e.getUserInfo)return e.getUserInfo(o);if(!o.idToken)return null;let n=Tt(o.idToken),a=e.profilePhotoSize||48;await Ut(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${o.accessToken}`},async onResponse(c){if(!(e.disableProfilePhoto||!c.response.ok))try{let u=await c.response.clone().arrayBuffer(),h=Buffer.from(u).toString("base64");n.picture=`data:image/jpeg;base64, ${h}`}catch(l){L.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let d=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...d},data:n}}}},"microsoft");import{betterFetch as _t}from"@better-fetch/fetch";var Pe=s(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:i,redirectURI:o}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),k({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:i,redirectURI:o})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:i})=>y({code:t,codeVerifier:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await _t("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(i)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...o},data:r}}}),"spotify");var q={isAction:!1};import{createRandomStringGenerator as St}from"@better-auth/utils/random";var xe=s(e=>St("a-z","A-Z","0-9")(e||32),"generateId");import{decodeJwt as Ot}from"jose";var De=s(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:i}){let o=r||["user:read:email","openid"];return e.scope&&o.push(...e.scope),k({id:"twitch",redirectURI:i,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:o,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>y({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return L.error("No idToken found in token"),null;let i=Ot(r),o=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.preferred_username,email:i.email,image:i.picture,emailVerified:!1,...o},data:i}}}),"twitch");import{betterFetch as vt}from"@better-fetch/fetch";var Ce=s(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),k({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:i})=>y({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||i,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await vt("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(i)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...o},data:r}}}),"twitter");import{betterFetch as It}from"@better-fetch/fetch";var Ne=s(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:s(async({state:r,scopes:i,codeVerifier:o,redirectURI:n})=>{let a=i||["account_info.read"];return e.scope&&a.push(...e.scope),await k({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:n,codeVerifier:o})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:r,codeVerifier:i,redirectURI:o})=>await y({code:r,codeVerifier:i,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:i,error:o}=await It("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(i);return{user:{id:i.account_id,name:i.name?.display_name,email:i.email,emailVerified:i.email_verified||!1,image:i.profile_photo_url,...n},data:i}}}},"dropbox");import{betterFetch as Lt}from"@better-fetch/fetch";var je=s(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:s(async({state:i,scopes:o,redirectURI:n})=>{let a=o||["profile","email","openid"];return e.scope&&a.push(...e.scope),await k({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:i,redirectURI:n})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:i,redirectURI:o})=>await y({code:i,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(i){let{data:o,error:n}=await Lt("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${i.accessToken}`}});if(n)return null;let a=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.name,email:o.email,emailVerified:o.email_verified||!1,image:o.picture,...a},data:o}}}},"linkedin");import{betterFetch as Pt}from"@better-fetch/fetch";var pe=s((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),xt=s(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:pe(`${t}/oauth/authorize`),tokenEndpoint:pe(`${t}/oauth/token`),userinfoEndpoint:pe(`${t}/api/v4/user`)}},"issuerToEndpoints"),$e=s(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:i}=xt(e.issuer),o="gitlab";return{id:o,name:"Gitlab",createAuthorizationURL:s(async({state:a,scopes:d,codeVerifier:c,redirectURI:l})=>{let u=d||["read_user"];return e.scope&&u.push(...e.scope),await k({id:o,options:e,authorizationEndpoint:t,scopes:u,state:a,redirectURI:l,codeVerifier:c})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:a,redirectURI:d,codeVerifier:c})=>y({code:a,redirectURI:e.redirectURI||d,options:e,codeVerifier:c,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:d,error:c}=await Pt(i,{headers:{authorization:`Bearer ${a.accessToken}`}});if(c||d.state!=="active"||d.locked)return null;let l=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...l},data:d}}}},"gitlab");import{betterFetch as Ve}from"@better-fetch/fetch";var Be=s(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:i}){let o=r||["identity"];return e.scope&&o.push(...e.scope),k({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:o,state:t,redirectURI:i,duration:e.duration})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>{let i=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),o={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:a}=await Ve("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:o,body:i.toString()});if(a)throw a;return X(n)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await Ve("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(i)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...o},data:r}}}),"reddit");import{z as Dt}from"zod";var Ct={apple:Te,discord:_e,facebook:Se,github:ve,microsoft:Le,google:Ie,spotify:Pe,twitch:De,twitter:Ce,dropbox:Ne,linkedin:je,gitlab:$e,reddit:Be},me=Object.keys(Ct),Me=Dt.enum(me,{description:"OAuth2 provider to use"});import{z as P}from"zod";import{APIError as Z}from"better-call";import{APIError as N}from"better-call";import{z as M}from"zod";function ze(e){try{return JSON.parse(e)}catch{return null}}s(ze,"safeJSONParse");var p={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as Nt}from"@better-auth/utils/hmac";import{base64 as jt}from"@better-auth/utils/base64";import{binary as $t}from"@better-auth/utils/binary";var qe=s(()=>g("/get-session",{method:"GET",query:M.optional(M.object({disableCookieCache:M.boolean({description:"Disable cookie cache and fetch session from database"}).or(M.string().transform(e=>e==="true")).optional(),disableRefresh:M.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),i=r?ze($t.decode(jt.decode(r))):null;if(i&&!await Nt("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(i.session),i.signature))return S(e),e.json(null);let o=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(i?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let u=i.session;if(i.expiresAt<Date.now()||u.session.expiresAt<new Date){let b=e.context.authCookies.sessionData.name;e.setCookie(b,"",{maxAge:0})}else return e.json(u)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return S(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(o||e.query?.disableRefresh)return e.json(n);let a=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-a*1e3+d*1e3<=Date.now()){let u=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:B(e.context.sessionConfig.expiresIn,"sec")});if(!u)return S(e),e.json(null,{status:401});let h=(u.expiresAt.valueOf()-Date.now())/1e3;return await T(e,{session:u,user:n.user},!1,{maxAge:h}),e.json({session:u,user:n.user})}return await le(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new N("INTERNAL_SERVER_ERROR",{message:p.FAILED_TO_GET_SESSION})}}),"getSession"),z=s(async(e,t)=>{if(e.context.session)return e.context.session;let r=await qe()({...e,_flag:"json",headers:e.headers,query:t}).catch(i=>null);return e.context.session=r,r},"getSessionFromCtx"),O=$(async e=>{let t=await z(e);if(!t?.session)throw new N("UNAUTHORIZED");return{session:t}}),ls=$(async e=>{let t=await z(e);if(!t?.session)throw new N("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,i=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-i<r*1e3))throw new N("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var Vt=g("/revoke-session",{method:"POST",body:M.object({token:M.string({description:"The token to revoke"})}),use:[O],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new N("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new N("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(i){throw e.context.logger.error(i&&typeof i=="object"&&"name"in i?i.name:"",i),new N("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Bt=g("/revoke-sessions",{method:"POST",use:[O],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new N("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Mt=g("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[O],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new N("UNAUTHORIZED");let o=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(o.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});import{jwtVerify as qt}from"jose";import{SignJWT as zt}from"jose";async function Fe(e,t,r=3600){return await new zt(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}s(Fe,"signJWT");async function j(e,t,r){return await Fe({email:t.toLowerCase(),updateTo:r},e)}s(j,"createEmailVerificationToken");async function Ft(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Z("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await j(e.context.secret,t.email),i=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:i,token:r},e.request)}s(Ft,"sendVerificationEmailFn");var Ht=g("/send-verification-email",{method:"POST",query:P.object({currentURL:P.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:P.object({email:P.string({description:"The email to send the verification email to"}).email(),callbackURL:P.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Z("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new Z("BAD_REQUEST",{message:p.USER_NOT_FOUND});return await Ft(e,r.user),e.json({status:!0})}),Gt=g("/verify-email",{method:"GET",query:P.object({token:P.string({description:"The token to verify the email"}),callbackURL:P.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new Z("UNAUTHORIZED",{message:d})}s(t,"redirectOnError");let{token:r}=e.query,i;try{i=await qt(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return e.context.logger.error("Failed to verify email",d),t("invalid_token")}let n=P.object({email:P.string().email(),updateTo:P.string().optional()}).parse(i.payload),a=await e.context.internalAdapter.findUserByEmail(n.email);if(!a)return t("user_not_found");if(n.updateTo){let d=await z(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let c=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),l=await j(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:c,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await z(e)){let c=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!c)throw new Z("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await T(e,{session:c,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function te(e,{userInfo:t,account:r,callbackURL:i}){let o=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(c=>{throw L.error(`Better auth was unable to query your database.
Error: `,c),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=o?.user,a=!n;if(o){let c=o.accounts.find(l=>l.providerId===r.providerId);if(c){let l=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([u,h])=>h!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(c.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return de&&L.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:o.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(h){return L.error("Unable to link account",h),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(c=>c?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let c=await j(e.context.secret,n.email),l=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${i}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:l,token:c},e.request)}}catch(c){return c instanceof F?{error:c.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(n.id,e.request);return d?{data:{session:d,user:n},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}s(te,"handleOAuthUserInfo");var Wt=g("/sign-in/social",{method:"POST",query:R.object({currentURL:R.string().optional()}).optional(),body:R.object({callbackURL:R.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:R.string().optional(),errorCallbackURL:R.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:Me,disableRedirect:R.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:R.optional(R.object({token:R.string({description:"ID token from the provider"}),nonce:R.string({description:"Nonce used to generate the token"}).optional(),accessToken:R.string({description:"Access token from the provider"}).optional(),refreshToken:R.string({description:"Refresh token from the provider"}).optional(),expiresAt:R.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new _("NOT_FOUND",{message:p.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new _("NOT_FOUND",{message:p.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(n,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:p.INVALID_TOKEN});let c=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!c||!c?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:p.FAILED_TO_GET_USER_INFO});if(!c.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:p.USER_EMAIL_NOT_FOUND});let l=await te(e,{userInfo:{email:c.user.email,id:c.user.id,name:c.user.name||"",image:c.user.image,emailVerified:c.user.emailVerified||!1},account:{providerId:t.id,accountId:c.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new _("UNAUTHORIZED",{message:l.error});return await T(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:i}=await ee(e),o=await t.createAuthorizationURL({state:i,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:o.toString(),redirect:!e.body.disableRedirect})}),Zt=g("/sign-in/email",{method:"POST",body:R.object({email:R.string({description:"Email of the user"}),password:R.string({description:"Password of the user"}),callbackURL:R.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:R.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new _("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!R.string().email().safeParse(t).success)throw new _("BAD_REQUEST",{message:p.INVALID_EMAIL});let o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new _("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});let n=o.accounts.find(l=>l.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new _("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});let a=n?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new _("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new _("UNAUTHORIZED",{message:p.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!o.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new _("UNAUTHORIZED",{message:p.EMAIL_NOT_VERIFIED});let l=await j(e.context.secret,o.user.email),u=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:o.user,url:u,token:l},e.request),e.context.logger.error("Email not verified",{email:t}),new _("FORBIDDEN",{message:p.EMAIL_NOT_VERIFIED})}let c=await e.context.internalAdapter.createSession(o.user.id,e.headers,e.body.rememberMe===!1);if(!c)throw e.context.logger.error("Failed to create session"),new _("UNAUTHORIZED",{message:p.FAILED_TO_CREATE_SESSION});return await T(e,{session:c,user:o.user},e.body.rememberMe===!1),e.json({user:{id:o.user.id,email:o.user.email,name:o.user.name,image:o.user.image,emailVerified:o.user.emailVerified,createdAt:o.user.createdAt,updatedAt:o.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as Q}from"zod";var re=Q.object({code:Q.string().optional(),error:Q.string().optional(),error_description:Q.string().optional(),state:Q.string().optional()}),Qt=g("/callback/:id",{method:["GET","POST"],body:re.optional(),query:re.optional(),metadata:q},async e=>{let t;try{if(e.method==="GET")t=re.parse(e.query);else if(e.method==="POST")t=re.parse(e.body);else throw new Error("Unsupported method")}catch(v){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",v),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:i,state:o,error_description:n}=t;if(!o)throw e.context.logger.error("State not found",i),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${i||"no_code"}&error_description=${n}`);let a=e.context.socialProviders.find(v=>v.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:c,link:l,errorURL:u,newUserURL:h}=await Ue(e),b;try{b=await a.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(v){throw e.context.logger.error("",v),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let w=await a.getUserInfo(b).then(v=>v?.user);function f(v){let x=u||c||`${e.context.baseURL}/error`;throw x.includes("?")?x=`${x}&error=${v}`:x=`${x}?error=${v}`,e.redirect(x)}if(s(f,"redirectOnError"),!w)return e.context.logger.error("Unable to get user info"),f("unable_to_get_user_info");if(!w.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),f("email_not_found");if(!c)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==w.email.toLowerCase())return f("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:a.id,accountId:w.id}))return f("unable_to_link_account");let x;try{x=c.toString()}catch{x=c}throw e.redirect(x)}let A=await te(e,{userInfo:{...w,email:w.email,name:w.name||w.email},account:{providerId:a.id,accountId:w.id,...b,scope:b.scopes?.join(",")},callbackURL:c});if(A.error)return e.context.logger.error(A.error.split(" ").join("_")),f(A.error.split(" ").join("_"));let{session:fe,user:ie}=A.data;await T(e,{session:fe,user:ie});let ne;try{ne=(A.isRegister&&h||c).toString()}catch{ne=A.isRegister&&h||c}throw e.redirect(ne)});import"zod";import{APIError as Kt}from"better-call";var Jt=g("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw S(e),new Kt("BAD_REQUEST",{message:p.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),S(e),e.json({success:!0})});import{z as I}from"zod";import{APIError as K}from"better-call";function He(e,t,r){let i=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([o,n])=>i.searchParams.set(o,n)),i.href}s(He,"redirectError");function Yt(e,t,r){let i=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([o,n])=>i.searchParams.set(o,n)),i.href}s(Yt,"redirectCallback");var Xt=g("/forget-password",{method:"POST",body:I.object({email:I.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:I.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new K("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let o=60*60*1,n=B(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||o,"sec"),a=xe(24);await e.context.internalAdapter.createVerificationValue({value:i.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:n});let d=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:i.user,url:d,token:a},e.request),e.json({status:!0})}),er=g("/reset-password/:token",{method:"GET",query:I.object({callbackURL:I.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(He(e.context,r,{error:"INVALID_TOKEN"}));let i=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!i||i.expiresAt<new Date?e.redirect(He(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Yt(e.context,r,{token:t}))}),tr=g("/reset-password",{query:I.optional(I.object({token:I.string().optional(),currentURL:I.string().optional()})),method:"POST",body:I.object({newPassword:I.string({description:"The new password to set"}),token:I.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new K("BAD_REQUEST",{message:p.INVALID_TOKEN});let{newPassword:r}=e.body,i=e.context.password?.config.minPasswordLength,o=e.context.password?.config.maxPasswordLength;if(r.length<i)throw new K("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});if(r.length>o)throw new K("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(n);if(!a||a.expiresAt<new Date)throw new K("BAD_REQUEST",{message:p.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let d=a.value,c=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(h=>h.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,c),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:c,accountId:d}),e.json({status:!0}))});import{z as U}from"zod";import{APIError as E}from"better-call";import{z as m}from"zod";import{APIError as pa}from"better-call";var ma=m.object({id:m.string(),providerId:m.string(),accountId:m.string(),userId:m.string(),accessToken:m.string().nullish(),refreshToken:m.string().nullish(),idToken:m.string().nullish(),accessTokenExpiresAt:m.date().nullish(),refreshTokenExpiresAt:m.date().nullish(),scope:m.string().nullish(),password:m.string().nullish(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date)}),fa=m.object({id:m.string(),email:m.string().transform(e=>e.toLowerCase()),emailVerified:m.boolean().default(!1),name:m.string(),image:m.string().nullish(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date)}),ga=m.object({id:m.string(),userId:m.string(),expiresAt:m.date(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date),token:m.string(),ipAddress:m.string().nullish(),userAgent:m.string().nullish()}),ha=m.object({id:m.string(),value:m.string(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date),expiresAt:m.date(),identifier:m.string()});var or=g("/change-password",{method:"POST",body:U.object({newPassword:U.string({description:"The new password to set"}),currentPassword:U.string({description:"The current password"}),revokeOtherSessions:U.boolean({description:"Revoke all other sessions"}).optional()}),use:[O],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:i}=e.body,o=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new E("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new E("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let c=(await e.context.internalAdapter.findAccounts(o.user.id)).find(b=>b.providerId==="credential"&&b.password);if(!c||!c.password)throw new E("BAD_REQUEST",{message:p.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(t);if(!await e.context.password.verify({hash:c.password,password:r}))throw new E("BAD_REQUEST",{message:p.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(c.id,{password:l});let h=null;if(i){await e.context.internalAdapter.deleteSessions(o.user.id);let b=await e.context.internalAdapter.createSession(o.user.id,e.headers);if(!b)throw new E("INTERNAL_SERVER_ERROR",{message:p.FAILED_TO_GET_SESSION});await T(e,{session:b,user:o.user}),h=b.token}return e.json({token:h})}),ir=g("/set-password",{method:"POST",body:U.object({newPassword:U.string()}),metadata:{SERVER_ONLY:!0},use:[O]},async e=>{let{newPassword:t}=e.body,r=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new E("BAD_REQUEST",{message:p.PASSWORD_TOO_SHORT});let o=e.context.password.config.maxPasswordLength;if(t.length>o)throw e.context.logger.error("Password is too long"),new E("BAD_REQUEST",{message:p.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(c=>c.providerId==="credential"&&c.password),d=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new E("BAD_REQUEST",{message:"user already has a password"})}),nr=g("/delete-user",{method:"POST",use:[O],body:U.object({callbackURL:U.string().optional(),password:U.string().optional(),token:U.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new E("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!n||!n.password)throw new E("BAD_REQUEST",{message:p.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new E("BAD_REQUEST",{message:p.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let o=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-o>n)throw new E("BAD_REQUEST",{message:p.SESSION_EXPIRED})}if(e.body.token)return await Ge({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let o=W(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${o}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${o}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:o},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),S(e);let i=e.context.options.user.deleteUser?.afterDelete;return i&&await i(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Ge=g("/delete-user/callback",{method:"GET",query:U.object({token:U.string(),callbackURL:U.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new E("NOT_FOUND");let t=await z(e);if(!t)throw new E("NOT_FOUND",{message:p.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new E("NOT_FOUND",{message:p.INVALID_TOKEN});if(r.value!==t.user.id)throw new E("NOT_FOUND",{message:p.INVALID_TOKEN});let i=e.context.options.user.deleteUser?.beforeDelete;i&&await i(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),S(e);let o=e.context.options.user.deleteUser?.afterDelete;if(o&&await o(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),sr=g("/change-email",{method:"POST",query:U.object({currentURL:U.string().optional()}).optional(),body:U.object({newEmail:U.string({description:"The new email to set"}).email(),callbackURL:U.string({description:"The URL to redirect to after email verification"}).optional()}),use:[O],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new E("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new E("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new E("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let o=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new E("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await j(e.context.secret,e.context.session.user.email,e.body.newEmail),i=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:i,token:r},e.request),e.json({status:!0})});var ar=s((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),cr=g("/error",{method:"GET",metadata:{...q,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(ar(t),{headers:{"Content-Type":"text/html"}})});var dr=g("/ok",{method:"GET",metadata:{...q,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as za}from"zod";import{APIError as Qa}from"better-call";import{z as J}from"zod";import{APIError as We}from"better-call";var lr=g("/list-accounts",{method:"GET",use:[O],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(i=>({id:i.id,provider:i.providerId})))}),ur=g("/link-social",{method:"POST",requireHeaders:!0,query:J.object({currentURL:J.string().optional()}).optional(),body:J.object({callbackURL:J.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:J.enum(me,{description:"The OAuth2 provider to use"})}),use:[O],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new We("BAD_REQUEST",{message:p.SOCIAL_ACCOUNT_ALREADY_LINKED});let o=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!o)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new We("NOT_FOUND",{message:p.PROVIDER_NOT_FOUND});let n=await ee(e,{userId:t.user.id,email:t.user.email}),a=await o.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${o.id}`});return e.json({url:a.toString(),redirect:!0})});import"defu";import{APIError as F}from"better-call";var sd=s(e=>{let t={maximumSessions:5,...e},r=s(o=>o.includes("_multi-"),"isMultiSessionCookie"),i={INVALID_SESSION_TOKEN:"Invalid session token"};return{id:"multi-session",endpoints:{listDeviceSessions:g("/multi-session/list-device-sessions",{method:"GET",requireHeaders:!0},async o=>{let n=o.headers?.get("cookie");if(!n)return o.json([]);let a=Object.fromEntries(G(n)),d=(await Promise.all(Object.entries(a).filter(([u])=>r(u)).map(async([u])=>await o.getSignedCookie(u,o.context.secret)))).filter(u=>u!==void 0);if(!d.length)return o.json([]);let l=(await o.context.internalAdapter.findSessions(d)).filter(u=>u&&u.session.expiresAt>new Date);return o.json(l)}),setActiveSession:g("/multi-session/set-active",{method:"POST",body:oe.object({sessionToken:oe.string({description:"The session token to set as active"})}),requireHeaders:!0,use:[O],metadata:{openapi:{description:"Set the active session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{$ref:"#/components/schemas/Session"}}}}}}}}}},async o=>{let n=o.body.sessionToken,a=`${o.context.authCookies.sessionToken.name}_multi-${n}`;if(!await o.getSignedCookie(a,o.context.secret))throw new F("UNAUTHORIZED",{message:i.INVALID_SESSION_TOKEN});let c=await o.context.internalAdapter.findSession(n);if(!c||c.session.expiresAt<new Date)throw o.setCookie(a,"",{...o.context.authCookies.sessionToken.options,maxAge:0}),new F("UNAUTHORIZED",{message:i.INVALID_SESSION_TOKEN});return await T(o,c),o.json(c)}),revokeDeviceSession:g("/multi-session/revoke",{method:"POST",body:oe.object({sessionToken:oe.string({description:"The session token to revoke"})}),requireHeaders:!0,use:[O],metadata:{openapi:{description:"Revoke a device session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async o=>{let n=o.body.sessionToken,a=`${o.context.authCookies.sessionToken.name}_multi-${n}`;if(!await o.getSignedCookie(a,o.context.secret))throw new F("UNAUTHORIZED",{message:i.INVALID_SESSION_TOKEN});if(await o.context.internalAdapter.deleteSession(n),o.setCookie(a,"",{...o.context.authCookies.sessionToken.options,maxAge:0}),!(o.context.session?.session.token===n))return o.json({status:!0});let l=o.headers?.get("cookie");if(l){let u=Object.fromEntries(G(l)),h=(await Promise.all(Object.entries(u).filter(([w])=>r(w)).map(async([w])=>await o.getSignedCookie(w,o.context.secret)))).filter(w=>w!==void 0),b=o.context.internalAdapter;if(h.length>0){let f=(await b.findSessions(h)).filter(A=>A&&A.session.expiresAt>new Date);if(f.length>0){let A=f[0];await T(o,A)}else S(o)}else S(o)}else S(o);return o.json({status:!0})})},hooks:{after:[{matcher:s(()=>!0,"matcher"),handler:$(async o=>{let n=o.responseHeader.get("set-cookie");if(!n)return;let a=ke(n),d=o.context.authCookies.sessionToken,c=a.get(d.name)?.value;if(!c)return;let l=G(o.headers?.get("cookie")||""),u=c.split(".")[0];if(!u)return;let h=`${d.name}_multi-${u}`;a.get(h)||l.get(h)||Object.keys(Object.fromEntries(l)).filter(r).length+(n.includes("session_token")?1:0)>t.maximumSessions||await o.setSignedCookie(h,u,o.context.secret,d.options)})},{matcher:s(o=>o.path==="/sign-out","matcher"),handler:$(async o=>{let n=o.headers?.get("cookie");if(!n)return;let a=Object.fromEntries(G(n)),d=Object.keys(a).map(c=>r(c)?(o.setCookie(c,"",{maxAge:0}),c.split("_multi-")[1]):null).filter(c=>c!==null);await o.context.internalAdapter.deleteSessions(d)})}]},$ERROR_CODES:i}},"multiSession");export{sd as multiSession};
