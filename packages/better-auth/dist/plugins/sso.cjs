"use strict";var de=Object.defineProperty;var Pt=Object.getOwnPropertyDescriptor;var xt=Object.getOwnPropertyNames;var Dt=Object.prototype.hasOwnProperty;var s=(e,t)=>de(e,"name",{value:t,configurable:!0});var Ct=(e,t)=>{for(var r in t)de(e,r,{get:t[r],enumerable:!0})},jt=(e,t,r,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of xt(t))!Dt.call(e,i)&&i!==r&&de(e,i,{get:()=>t[i],enumerable:!(o=Pt(t,i))||o.enumerable});return e};var Nt=e=>jt(de({},"__esModule",{value:!0}),e);var Ir={};Ct(Ir,{sso:()=>Or});module.exports=Nt(Ir);var g=require("zod");var re=require("better-call");var xe=require("better-call");var G=require("better-call"),Se=(0,G.createMiddleware)(async()=>({})),oe=(0,G.createMiddlewareCreator)({use:[Se,(0,G.createMiddleware)(async()=>({}))]}),w=(0,G.createEndpointCreator)({use:[Se]});function fe(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}s(fe,"escapeRegExpChar");function $t(e){let t="";for(let r=0;r<e.length;r++)t+=fe(e[r]);return t}s($t,"escapeRegExpString");function Oe(e,t=!0){if(Array.isArray(e))return`(?:${e.map(p=>`^${Oe(p,t)}$`).join("|")})`;let r="",o="",i=".";t===!0?(r="/",o="[/\\\\]",i="[^/\\\\]"):t&&(r=t,o=$t(r),o.length>1?(o=`(?:${o})`,i=`((?!${o}).)`):i=`[^${o}]`);let n=t?`${o}+?`:"",a=t?`${o}*?`:"",c=t?e.split(r):[e],d="";for(let l=0;l<c.length;l++){let p=c[l],m=c[l+1],A="";if(!(!p&&l>0)){if(t&&(l===c.length-1?A=a:m!=="**"?A=n:A=""),t&&p==="**"){A&&(d+=l===0?"":A,d+=`(?:${i}*?${A})*?`);continue}for(let h=0;h<p.length;h++){let b=p[h];b==="\\"?h<p.length-1&&(d+=fe(p[h+1]),h++):b==="?"?d+=i:b==="*"?d+=`${i}*?`:d+=fe(b)}d+=A}}return d}s(Oe,"transform");function Vt(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}s(Vt,"isMatch");function ge(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Oe(e,t.separator),o=new RegExp(`^${r}$`,t.flags),i=Vt.bind(null,o);return i.options=t,i.pattern=e,i.regexp=o,i}s(ge,"wildcardMatch");var ce=Object.create(null),ie=s(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ce:globalThis),"_getEnv"),Ie=new Proxy(ce,{get(e,t){return ie()[t]??ce[t]},has(e,t){let r=ie();return t in r||t in ce},set(e,t,r){let o=ie(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=ie(!0);return delete r[t],!0},ownKeys(){let e=ie(!0);return Object.keys(e)}});function Bt(e){return e?e!=="false":!1}s(Bt,"toBoolean");var he=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var we=he==="dev"||he==="development",zt=he==="test"||Bt(Ie.TEST);var z=class extends Error{static{s(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function Le(e){try{return new URL(e).origin}catch{return null}}s(Le,"getOrigin");function Pe(e){return e.includes("://")?new URL(e).host:e}s(Pe,"getHost");var Mt=oe(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,i=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,c=r?.currentURL,d=t?.errorCallbackURL,l=t?.newUserCallbackURL,p=o.trustedOrigins,m=e.headers?.has("cookie"),A=s((b,T)=>b.startsWith("/")?!1:T.includes("*")?ge(T)(Pe(b)):b.startsWith(T),"matchesPattern"),h=s((b,T)=>{if(!b)return;if(!p.some($=>A(b,$)||b?.startsWith("/")&&T!=="origin"&&!b.includes(":")))throw e.context.logger.error(`Invalid ${T}: ${b}`),e.context.logger.info(`If it's a valid URL, please add ${b} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${p}`),new xe.APIError("FORBIDDEN",{message:`Invalid ${T}`})},"validateURL");m&&!e.context.options.advanced?.disableCSRFCheck&&h(i,"origin"),n&&h(n,"callbackURL"),a&&h(a,"redirectURL"),c&&h(c,"currentURL"),d&&h(d,"errorCallbackURL"),l&&h(a,"newUserCallbackURL")});var S=require("better-call"),E=require("zod");var M=s((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");var De=require("@better-auth/utils/base64");var Ce=require("@better-auth/utils/hmac");async function be(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=De.base64Url.encode(JSON.stringify({session:t,expiresAt:M(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,Ce.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new z("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}s(be,"setCookieCache");async function O(e,t,r,o){let i=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...i,maxAge:n,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await be(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}s(O,"setSessionCookie");function D(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}s(D,"deleteSessionCookie");var Me=require("@better-fetch/fetch"),qe=require("better-call"),q=require("jose");var je=require("@better-auth/utils/hash"),Ne=require("@better-auth/utils/base64");async function $e(e){let t=await(0,je.createHash)("SHA-256").digest(e);return Ne.base64Url.encode(new Uint8Array(t),{padding:!1})}s($e,"generateCodeChallenge");function le(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?M(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}s(le,"getOAuth2Tokens");async function R({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:i,scopes:n,claims:a,redirectURI:c,duration:d}){let l=new URL(r);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",t.clientId),l.searchParams.set("state",o),l.searchParams.set("scope",n.join(" ")),l.searchParams.set("redirect_uri",t.redirectURI||c),i){let p=await $e(i);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",p)}if(a){let p=a.reduce((m,A)=>(m[A]=null,m),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...p}}))}return d&&l.searchParams.set("duration",d),l}s(R,"createAuthorizationURL");var ye=require("@better-fetch/fetch");var Ve=require("jose");async function k({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:i,authentication:n}){let a=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),n==="basic"){let m=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${m}`}else a.set("client_id",o.clientId),a.set("client_secret",o.clientSecret);let{data:d,error:l}=await(0,ye.betterFetch)(i,{method:"POST",body:a,headers:c});if(l)throw l;return le(d)}s(k,"validateAuthorizationCode");async function Be(e,t){let{data:r,error:o}=await(0,ye.betterFetch)(t,{method:"GET",headers:{accept:"application/json","user-agent":"better-auth"}});if(o)throw o;let i=r.keys,n=JSON.parse(atob(e.split(".")[0])),a=i.find(d=>d.kid===n.kid);if(!a)throw new Error("Key not found");return await(0,Ve.jwtVerify)(e,a)}s(Be,"validateToken");var C=require("zod"),ke=require("better-call");var Gt=require("@better-auth/utils/hash"),Wt=require("@noble/ciphers/chacha"),Ae=require("@noble/ciphers/utils"),Qt=require("@noble/ciphers/webcrypto");var qt=require("@noble/hashes/scrypt"),Ft=require("uncrypto"),Ht=require("@better-auth/utils/hex");var ze=require("@better-auth/utils/random"),ne=(0,ze.createRandomStringGenerator)("a-z","0-9","A-Z","-_");async function Z(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?Le(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new ke.APIError("BAD_REQUEST",{message:"callbackURL is required"});let o=ne(128),i=ne(32),n=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:n,identifier:i,expiresAt:a});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new ke.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}s(Z,"generateState");async function pe(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=C.z.object({callbackURL:C.z.string(),codeVerifier:C.z.string(),errorURL:C.z.string().optional(),newUserURL:C.z.string().optional(),expiresAt:C.z.number(),link:C.z.object({email:C.z.string(),userId:C.z.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}s(pe,"parseState");var Fe=s(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:i}){let n=o||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||i}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:i})=>k({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let i=(0,q.decodeProtectedHeader)(r),{kid:n,alg:a}=i;if(!n||!a)return!1;let c=await Zt(n),{payload:d}=await(0,q.jwtVerify)(r,c,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{d[l]!==void 0&&(d[l]=!!d[l])}),o&&d.nonce!==o?!1:!!d},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=(0,q.decodeJwt)(r.idToken);if(!o)return null;let i=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:i,emailVerified:!1,email:o.email,...n},data:o}}}},"apple"),Zt=s(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await(0,Me.betterFetch)(`${t}${r}`);if(!o?.keys)throw new qe.APIError("BAD_REQUEST",{message:"Keys not found"});let i=o.keys.find(n=>n.kid===e);if(!i)throw new Error(`JWK with kid ${e} not found`);return await(0,q.importJWK)(i,i.alg)},"getApplePublicKey");var He=require("@better-fetch/fetch");var Ge=s(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identify","email"];return e.scope&&i.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${i.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,He.betterFetch)("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...i},data:r}}}),"discord");var We=require("@better-fetch/fetch");var Qe=s(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["email","public_profile"];return e.scope&&i.push(...e.scope),await R({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:i,state:t,redirectURI:o})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,We.betterFetch)("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...i},data:r}}}),"facebook");var Re=require("@better-fetch/fetch");var Ze=s(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:i,redirectURI:n}){let a=o||["user:email"];return e.scope&&a.push(...e.scope),R({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:n})},validateAuthorizationCode:s(async({code:r,redirectURI:o})=>k({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await(0,Re.betterFetch)("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=!1,{data:a}=await(0,Re.betterFetch)("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(o.email=(a.find(d=>d.primary)??a[0])?.email,n=a.find(d=>d.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:n,...c},data:o}}}},"github");var Ee=["info","success","warn","error","debug"];function Jt(e,t){return Ee.indexOf(t)<=Ee.indexOf(e)}s(Jt,"shouldPublishLog");var j={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Kt={info:j.fg.blue,success:j.fg.green,warn:j.fg.yellow,error:j.fg.red,debug:j.fg.magenta},Yt=s((e,t)=>{let r=new Date().toISOString();return`${j.dim}${r}${j.reset} ${Kt[e]}${e.toUpperCase()}${j.reset} ${j.bright}Better Auth${j.reset} ${t}`},"formatMessage"),Xt=s(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=s((i,n,a=[])=>{if(!t||!Jt(r,i))return;let c=Yt(i,n);if(!e||typeof e.log!="function"){i==="error"?console.error(c,...a):i==="warn"?console.warn(c,...a):console.log(c,...a);return}e.log(i==="success"?"info":i,c,...a)},"LogFunc");return Object.fromEntries(Ee.map(i=>[i,(...[n,...a])=>o(i,n,a)]))},"createLogger"),x=Xt();var Je=require("@better-fetch/fetch"),Ke=require("jose");var Ye=s(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){if(!e.clientId||!e.clientSecret)throw x.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new z("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new z("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let a=await R({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:o,redirectURI:i});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:i}=await(0,Je.betterFetch)(o);return i?i.aud===e.clientId&&i.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,Ke.decodeJwt)(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");var Xe=require("@better-fetch/fetch");var et=require("jose");var tt=s(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(i){let n=i.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),R({id:"microsoft",options:e,authorizationEndpoint:r,state:i.state,codeVerifier:i.codeVerifier,scopes:n,redirectURI:i.redirectURI})},validateAuthorizationCode({code:i,codeVerifier:n,redirectURI:a}){return k({code:i,codeVerifier:n,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:o})},async getUserInfo(i){if(e.getUserInfo)return e.getUserInfo(i);if(!i.idToken)return null;let n=(0,et.decodeJwt)(i.idToken),a=e.profilePhotoSize||48;await(0,Xe.betterFetch)(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${i.accessToken}`},async onResponse(d){if(!(e.disableProfilePhoto||!d.response.ok))try{let p=await d.response.clone().arrayBuffer(),m=Buffer.from(p).toString("base64");n.picture=`data:image/jpeg;base64, ${m}`}catch(l){x.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let c=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...c},data:n}}}},"microsoft");var rt=require("@better-fetch/fetch");var ot=s(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:i}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),R({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:o,redirectURI:i})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,rt.betterFetch)("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...i},data:r}}}),"spotify");var J={isAction:!1};var it=require("@better-auth/utils/random");var nt=s(e=>(0,it.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32),"generateId");var st=require("jose");var at=s(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["user:read:email","openid"];return e.scope&&i.push(...e.scope),R({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:i,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return x.error("No idToken found in token"),null;let o=(0,st.decodeJwt)(r),i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...i},data:o}}}),"twitch");var dt=require("@better-fetch/fetch");var ct=s(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),R({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,dt.betterFetch)("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...i},data:r}}}),"twitter");var lt=require("@better-fetch/fetch");var pt=s(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:s(async({state:r,scopes:o,codeVerifier:i,redirectURI:n})=>{let a=o||["account_info.read"];return e.scope&&a.push(...e.scope),await R({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:n,codeVerifier:i})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:i})=>await k({code:r,codeVerifier:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:i}=await(0,lt.betterFetch)("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(i)return null;let n=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...n},data:o}}}},"dropbox");var ut=require("@better-fetch/fetch");var mt=s(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:s(async({state:o,scopes:i,redirectURI:n})=>{let a=i||["profile","email","openid"];return e.scope&&a.push(...e.scope),await R({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:o,redirectURI:n})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:o,redirectURI:i})=>await k({code:o,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:i,error:n}=await(0,ut.betterFetch)("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(n)return null;let a=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,emailVerified:i.email_verified||!1,image:i.picture,...a},data:i}}}},"linkedin");var ft=require("@better-fetch/fetch");var _e=s((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),er=s(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:_e(`${t}/oauth/authorize`),tokenEndpoint:_e(`${t}/oauth/token`),userinfoEndpoint:_e(`${t}/api/v4/user`)}},"issuerToEndpoints"),gt=s(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=er(e.issuer),i="gitlab";return{id:i,name:"Gitlab",createAuthorizationURL:s(async({state:a,scopes:c,codeVerifier:d,redirectURI:l})=>{let p=c||["read_user"];return e.scope&&p.push(...e.scope),await R({id:i,options:e,authorizationEndpoint:t,scopes:p,state:a,redirectURI:l,codeVerifier:d})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:a,redirectURI:c,codeVerifier:d})=>k({code:a,redirectURI:e.redirectURI||c,options:e,codeVerifier:d,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:c,error:d}=await(0,ft.betterFetch)(o,{headers:{authorization:`Bearer ${a.accessToken}`}});if(d||c.state!=="active"||c.locked)return null;let l=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...l},data:c}}}},"gitlab");var Ue=require("@better-fetch/fetch");var ht=s(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let i=r||["identity"];return e.scope&&i.push(...e.scope),R({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:i,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),i={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:a}=await(0,Ue.betterFetch)("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:i,body:o.toString()});if(a)throw a;return le(n)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await(0,Ue.betterFetch)("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let i=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...i},data:r}}}),"reddit");var wt=require("zod"),tr={apple:Fe,discord:Ge,facebook:Qe,github:Ze,microsoft:tt,google:Ye,spotify:ot,twitch:at,twitter:ct,dropbox:pt,linkedin:mt,gitlab:gt,reddit:ht},Te=Object.keys(tr),bt=wt.z.enum(Te,{description:"OAuth2 provider to use"});var P=require("zod");var K=require("better-call");var N=require("better-call");var F=require("zod");function yt(e){try{return JSON.parse(e)}catch{return null}}s(yt,"safeJSONParse");var u={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var At=require("@better-auth/utils/hmac"),kt=require("@better-auth/utils/base64"),Rt=require("@better-auth/utils/binary");var Et=s(()=>w("/get-session",{method:"GET",query:F.z.optional(F.z.object({disableCookieCache:F.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(F.z.string().transform(e=>e==="true")).optional(),disableRefresh:F.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?yt(Rt.binary.decode(kt.base64.decode(r))):null;if(o&&!await(0,At.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return D(e),e.json(null);let i=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let p=o.session;if(o.expiresAt<Date.now()||p.session.expiresAt<new Date){let A=e.context.authCookies.sessionData.name;e.setCookie(A,"",{maxAge:0})}else return e.json(p)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return D(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(i||e.query?.disableRefresh)return e.json(n);let a=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-a*1e3+c*1e3<=Date.now()){let p=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:M(e.context.sessionConfig.expiresIn,"sec")});if(!p)return D(e),e.json(null,{status:401});let m=(p.expiresAt.valueOf()-Date.now())/1e3;return await O(e,{session:p,user:n.user},!1,{maxAge:m}),e.json({session:p,user:n.user})}return await be(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new N.APIError("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION})}}),"getSession"),W=s(async(e,t)=>{if(e.context.session)return e.context.session;let r=await Et()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),I=oe(async e=>{let t=await W(e);if(!t?.session)throw new N.APIError("UNAUTHORIZED");return{session:t}}),In=oe(async e=>{let t=await W(e);if(!t?.session)throw new N.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new N.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var rr=w("/revoke-session",{method:"POST",body:F.z.object({token:F.z.string({description:"The token to revoke"})}),use:[I],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new N.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new N.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new N.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),or=w("/revoke-sessions",{method:"POST",use:[I],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new N.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),ir=w("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[I],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new N.APIError("UNAUTHORIZED");let i=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(i.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});var Tt=require("jose");var _t=require("jose");async function Ut(e,t,r=3600){return await new _t.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}s(Ut,"signJWT");async function B(e,t,r){return await Ut({email:t.toLowerCase(),updateTo:r},e)}s(B,"createEmailVerificationToken");async function nr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new K.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await B(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}s(nr,"sendVerificationEmailFn");var sr=w("/send-verification-email",{method:"POST",query:P.z.object({currentURL:P.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:P.z.object({email:P.z.string({description:"The email to send the verification email to"}).email(),callbackURL:P.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new K.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new K.APIError("BAD_REQUEST",{message:u.USER_NOT_FOUND});return await nr(e,r.user),e.json({status:!0})}),ar=w("/verify-email",{method:"GET",query:P.z.object({token:P.z.string({description:"The token to verify the email"}),callbackURL:P.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new K.APIError("UNAUTHORIZED",{message:c})}s(t,"redirectOnError");let{token:r}=e.query,o;try{o=await(0,Tt.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let n=P.z.object({email:P.z.string().email(),updateTo:P.z.string().optional()}).parse(o.payload),a=await e.context.internalAdapter.findUserByEmail(n.email);if(!a)return t("user_not_found");if(n.updateTo){let c=await W(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let d=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),l=await B(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:d,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await W(e)){let d=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!d)throw new K.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await O(e,{session:d,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function Y(e,{userInfo:t,account:r,callbackURL:o}){let i=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(d=>{throw x.error(`Better auth was unable to query your database.
Error: `,d),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=i?.user,a=!n;if(i){let d=i.accounts.find(l=>l.providerId===r.providerId);if(d){let l=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([p,m])=>m!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(d.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return we&&x.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:i.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(m){return x.error("Unable to link account",m),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(d=>d?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let d=await B(e.context.secret,n.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:l,token:d},e.request)}}catch(d){return d instanceof Q.APIError?{error:d.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(n.id,e.request);return c?{data:{session:c,user:n},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}s(Y,"handleOAuthUserInfo");var dr=w("/sign-in/social",{method:"POST",query:E.z.object({currentURL:E.z.string().optional()}).optional(),body:E.z.object({callbackURL:E.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:E.z.string().optional(),errorCallbackURL:E.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:bt,disableRedirect:E.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:E.z.optional(E.z.object({token:E.z.string({description:"ID token from the provider"}),nonce:E.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:E.z.string({description:"Access token from the provider"}).optional(),refreshToken:E.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:E.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new S.APIError("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new S.APIError("NOT_FOUND",{message:u.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(n,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new S.APIError("UNAUTHORIZED",{message:u.INVALID_TOKEN});let d=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!d||!d?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new S.APIError("UNAUTHORIZED",{message:u.FAILED_TO_GET_USER_INFO});if(!d.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new S.APIError("UNAUTHORIZED",{message:u.USER_EMAIL_NOT_FOUND});let l=await Y(e,{userInfo:{email:d.user.email,id:d.user.id,name:d.user.name||"",image:d.user.image,emailVerified:d.user.emailVerified||!1},account:{providerId:t.id,accountId:d.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new S.APIError("UNAUTHORIZED",{message:l.error});return await O(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await Z(e),i=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:i.toString(),redirect:!e.body.disableRedirect})}),cr=w("/sign-in/email",{method:"POST",body:E.z.object({email:E.z.string({description:"Email of the user"}),password:E.z.string({description:"Password of the user"}),callbackURL:E.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:E.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new S.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!E.z.string().email().safeParse(t).success)throw new S.APIError("BAD_REQUEST",{message:u.INVALID_EMAIL});let i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new S.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let n=i.accounts.find(l=>l.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new S.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let a=n?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new S.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new S.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!i.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new S.APIError("UNAUTHORIZED",{message:u.EMAIL_NOT_VERIFIED});let l=await B(e.context.secret,i.user.email),p=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:i.user,url:p,token:l},e.request),e.context.logger.error("Email not verified",{email:t}),new S.APIError("FORBIDDEN",{message:u.EMAIL_NOT_VERIFIED})}let d=await e.context.internalAdapter.createSession(i.user.id,e.headers,e.body.rememberMe===!1);if(!d)throw e.context.logger.error("Failed to create session"),new S.APIError("UNAUTHORIZED",{message:u.FAILED_TO_CREATE_SESSION});return await O(e,{session:d,user:i.user},e.body.rememberMe===!1),e.json({user:{id:i.user.id,email:i.user.email,name:i.user.name,image:i.user.image,emailVerified:i.user.emailVerified,createdAt:i.user.createdAt,updatedAt:i.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var X=require("zod");var ue=X.z.object({code:X.z.string().optional(),error:X.z.string().optional(),error_description:X.z.string().optional(),state:X.z.string().optional()}),lr=w("/callback/:id",{method:["GET","POST"],body:ue.optional(),query:ue.optional(),metadata:J},async e=>{let t;try{if(e.method==="GET")t=ue.parse(e.query);else if(e.method==="POST")t=ue.parse(e.body);else throw new Error("Unsupported method")}catch(y){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",y),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:i,error_description:n}=t;if(!i)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${n}`);let a=e.context.socialProviders.find(y=>y.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:d,link:l,errorURL:p,newUserURL:m}=await pe(e),A;try{A=await a.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(y){throw e.context.logger.error("",y),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let h=await a.getUserInfo(A).then(y=>y?.user);function b(y){let v=p||d||`${e.context.baseURL}/error`;throw v.includes("?")?v=`${v}&error=${y}`:v=`${v}?error=${y}`,e.redirect(v)}if(s(b,"redirectOnError"),!h)return e.context.logger.error("Unable to get user info"),b("unable_to_get_user_info");if(!h.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),b("email_not_found");if(!d)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==h.email.toLowerCase())return b("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:a.id,accountId:h.id}))return b("unable_to_link_account");let v;try{v=d.toString()}catch{v=d}throw e.redirect(v)}let T=await Y(e,{userInfo:{...h,email:h.email,name:h.name||h.email},account:{providerId:a.id,accountId:h.id,...A,scope:A.scopes?.join(",")},callbackURL:d});if(T.error)return e.context.logger.error(T.error.split(" ").join("_")),b(T.error.split(" ").join("_"));let{session:ae,user:$}=T.data;await O(e,{session:ae,user:$});let H;try{H=(T.isRegister&&m||d).toString()}catch{H=T.isRegister&&m||d}throw e.redirect(H)});var ds=require("zod");var vt=require("better-call");var pr=w("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw D(e),new vt.APIError("BAD_REQUEST",{message:u.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),D(e),e.json({success:!0})});var L=require("zod");var ee=require("better-call");function St(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}s(St,"redirectError");function ur(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([i,n])=>o.searchParams.set(i,n)),o.href}s(ur,"redirectCallback");var mr=w("/forget-password",{method:"POST",body:L.z.object({email:L.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:L.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new ee.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let i=60*60*1,n=M(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||i,"sec"),a=nt(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:n});let c=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:a},e.request),e.json({status:!0})}),fr=w("/reset-password/:token",{method:"GET",query:L.z.object({callbackURL:L.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(St(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(St(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(ur(e.context,r,{token:t}))}),gr=w("/reset-password",{query:L.z.optional(L.z.object({token:L.z.string().optional(),currentURL:L.z.string().optional()})),method:"POST",body:L.z.object({newPassword:L.z.string({description:"The new password to set"}),token:L.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new ee.APIError("BAD_REQUEST",{message:u.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,i=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new ee.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});if(r.length>i)throw new ee.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(n);if(!a||a.expiresAt<new Date)throw new ee.APIError("BAD_REQUEST",{message:u.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let c=a.value,d=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(m=>m.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,d),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:d,accountId:c}),e.json({status:!0}))});var U=require("zod");var _=require("better-call");var f=require("zod"),hr=require("better-call");var As=f.z.object({id:f.z.string(),providerId:f.z.string(),accountId:f.z.string(),userId:f.z.string(),accessToken:f.z.string().nullish(),refreshToken:f.z.string().nullish(),idToken:f.z.string().nullish(),accessTokenExpiresAt:f.z.date().nullish(),refreshTokenExpiresAt:f.z.date().nullish(),scope:f.z.string().nullish(),password:f.z.string().nullish(),createdAt:f.z.date().default(()=>new Date),updatedAt:f.z.date().default(()=>new Date)}),ks=f.z.object({id:f.z.string(),email:f.z.string().transform(e=>e.toLowerCase()),emailVerified:f.z.boolean().default(!1),name:f.z.string(),image:f.z.string().nullish(),createdAt:f.z.date().default(()=>new Date),updatedAt:f.z.date().default(()=>new Date)}),Rs=f.z.object({id:f.z.string(),userId:f.z.string(),expiresAt:f.z.date(),createdAt:f.z.date().default(()=>new Date),updatedAt:f.z.date().default(()=>new Date),token:f.z.string(),ipAddress:f.z.string().nullish(),userAgent:f.z.string().nullish()}),Es=f.z.object({id:f.z.string(),value:f.z.string(),createdAt:f.z.date().default(()=>new Date),updatedAt:f.z.date().default(()=>new Date),expiresAt:f.z.date(),identifier:f.z.string()});var br=w("/change-password",{method:"POST",body:U.z.object({newPassword:U.z.string({description:"The new password to set"}),currentPassword:U.z.string({description:"The current password"}),revokeOtherSessions:U.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[I],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,i=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new _.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new _.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let d=(await e.context.internalAdapter.findAccounts(i.user.id)).find(A=>A.providerId==="credential"&&A.password);if(!d||!d.password)throw new _.APIError("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(t);if(!await e.context.password.verify({hash:d.password,password:r}))throw new _.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(d.id,{password:l});let m=null;if(o){await e.context.internalAdapter.deleteSessions(i.user.id);let A=await e.context.internalAdapter.createSession(i.user.id,e.headers);if(!A)throw new _.APIError("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION});await O(e,{session:A,user:i.user}),m=A.token}return e.json({token:m})}),yr=w("/set-password",{method:"POST",body:U.z.object({newPassword:U.z.string()}),metadata:{SERVER_ONLY:!0},use:[I]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new _.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let i=e.context.password.config.maxPasswordLength;if(t.length>i)throw e.context.logger.error("Password is too long"),new _.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(d=>d.providerId==="credential"&&d.password),c=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new _.APIError("BAD_REQUEST",{message:"user already has a password"})}),Ar=w("/delete-user",{method:"POST",use:[I],body:U.z.object({callbackURL:U.z.string().optional(),password:U.z.string().optional(),token:U.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new _.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!n||!n.password)throw new _.APIError("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new _.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let i=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-i>n)throw new _.APIError("BAD_REQUEST",{message:u.SESSION_EXPIRED})}if(e.body.token)return await Ot({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let i=ne(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${i}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${i}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:i},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),D(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Ot=w("/delete-user/callback",{method:"GET",query:U.z.object({token:U.z.string(),callbackURL:U.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new _.APIError("NOT_FOUND");let t=await W(e);if(!t)throw new _.APIError("NOT_FOUND",{message:u.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new _.APIError("NOT_FOUND",{message:u.INVALID_TOKEN});if(r.value!==t.user.id)throw new _.APIError("NOT_FOUND",{message:u.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),D(e);let i=e.context.options.user.deleteUser?.afterDelete;if(i&&await i(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),kr=w("/change-email",{method:"POST",query:U.z.object({currentURL:U.z.string().optional()}).optional(),body:U.z.object({newEmail:U.z.string({description:"The new email to set"}).email(),callbackURL:U.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[I],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new _.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new _.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new _.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let i=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new _.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await B(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var Rr=s((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),Er=w("/error",{method:"GET",metadata:{...J,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Rr(t),{headers:{"Content-Type":"text/html"}})});var _r=w("/ok",{method:"GET",metadata:{...J,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var Ur=require("zod");var Tr=require("better-call");var te=require("zod");var ve=require("better-call");var vr=w("/list-accounts",{method:"GET",use:[I],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),Sr=w("/link-social",{method:"POST",requireHeaders:!0,query:te.z.object({currentURL:te.z.string().optional()}).optional(),body:te.z.object({callbackURL:te.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:te.z.enum(Te,{description:"The OAuth2 provider to use"})}),use:[I],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new ve.APIError("BAD_REQUEST",{message:u.SOCIAL_ACCOUNT_ALREADY_LINKED});let i=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!i)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new ve.APIError("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});let n=await Z(e,{userId:t.user.id,email:t.user.email}),a=await i.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${i.id}`});return e.json({url:a.toString(),redirect:!0})});var za=require("defu");var Q=require("better-call");var se=require("@better-fetch/fetch"),It=require("jose");var Or=s(e=>({id:"sso",endpoints:{createOIDCProvider:w("/sso/register",{method:"POST",body:g.z.object({providerId:g.z.string({description:"The ID of the provider. This is used to identify the provider during login and callback"}),issuer:g.z.string({description:"The issuer url of the provider (e.g. https://idp.example.com)"}),domain:g.z.string({description:"The domain of the provider. This is used for email matching"}),clientId:g.z.string({description:"The client ID"}),clientSecret:g.z.string({description:"The client secret"}),authorizationEndpoint:g.z.string({description:"The authorization endpoint"}).optional(),tokenEndpoint:g.z.string({description:"The token endpoint"}).optional(),userInfoEndpoint:g.z.string({description:"The user info endpoint"}).optional(),tokenEndpointAuthentication:g.z.enum(["client_secret_post","client_secret_basic"]).optional(),jwksEndpoint:g.z.string({description:"The JWKS endpoint"}).optional(),discoveryEndpoint:g.z.string().optional(),scopes:g.z.array(g.z.string(),{description:"The scopes to request. Defaults to ['openid', 'email', 'profile', 'offline_access']"}).optional(),pkce:g.z.boolean({description:"Whether to use PKCE for the authorization flow"}).default(!0).optional(),mapping:g.z.object({id:g.z.string({description:"The field in the user info response that contains the id. Defaults to 'sub'"}),email:g.z.string({description:"The field in the user info response that contains the email. Defaults to 'email'"}),emailVerified:g.z.string({description:"The field in the user info response that contains whether the email is verified. defaults to 'email_verified'"}).optional(),name:g.z.string({description:"The field in the user info response that contains the name. Defaults to 'name'"}),image:g.z.string({description:"The field in the user info response that contains the image. Defaults to 'picture'"}).optional(),extraFields:g.z.record(g.z.string()).optional()}).optional(),organizationId:g.z.string({description:"If organization plugin is enabled, the organization id to link the provider to"}).optional()}),use:[I],metadata:{openapi:{summary:"Register an OIDC provider",description:"This endpoint is used to register an OIDC provider. This is used to configure the provider and link it to an organization",responses:{200:{description:"The created provider"}}}}},async t=>{let r=t.body;if(g.z.string().url().safeParse(r.issuer).error)throw new Q.APIError("BAD_REQUEST",{message:"Invalid issuer. Must be a valid URL"});let i=await t.context.adapter.create({model:"ssoProvider",data:{issuer:r.issuer,domain:r.domain,oidcConfig:JSON.stringify({issuer:r.issuer,clientId:r.clientId,clientSecret:r.clientSecret,authorizationEndpoint:r.authorizationEndpoint,tokenEndpoint:r.tokenEndpoint,tokenEndpointAuthentication:r.tokenEndpointAuthentication,jwksEndpoint:r.jwksEndpoint,pkce:r.pkce,discoveryEndpoint:r.discoveryEndpoint||`${r.issuer}/.well-known/openid-configuration`,mapping:r.mapping,scopes:r.scopes,userinfoEndpoint:r.userInfoEndpoint}),organizationId:r.organizationId,userId:t.context.session.user.id,providerId:r.providerId}});return t.json({...i,oidcConfig:JSON.parse(i.oidcConfig),redirectURI:`${t.context.baseURL}/sso/callback/${i.providerId}`})}),signInSSO:w("/sign-in/sso",{method:"POST",body:g.z.object({email:g.z.string({description:"The email address to sign in with. This is used to identify the issuer to sign in with. It's optional if the issuer is provided"}).optional(),organizationSlug:g.z.string({description:"The slug of the organization to sign in with"}).optional(),domain:g.z.string({description:"The domain of the provider."}).optional(),callbackURL:g.z.string({description:"The URL to redirect to after login"}),errorCallbackURL:g.z.string({description:"The URL to redirect to after login"}).optional(),newUserCallbackURL:g.z.string({description:"The URL to redirect to after login if the user is new"}).optional()}),metadata:{openapi:{summary:"Sign in with SSO provider",description:"This endpoint is used to sign in with an SSO provider. It redirects to the provider's authorization URL",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email address to sign in with. This is used to identify the issuer to sign in with. It's optional if the issuer is provided"},issuer:{type:"string",description:"The issuer identifier, this is the URL of the provider and can be used to verify the provider and identify the provider during login. It's optional if the email is provided"},providerId:{type:"string",description:"The ID of the provider to sign in with. This can be provided instead of email or issuer"},callbackURL:{type:"string",description:"The URL to redirect to after login"},errorCallbackURL:{type:"string",description:"The URL to redirect to after login"},newUserCallbackURL:{type:"string",description:"The URL to redirect to after login if the user is new"}},required:["callbackURL"]}}}}}}},async t=>{let r=t.body,{email:o,organizationSlug:i,domain:n}=r;if(!o&&!i&&!n)throw new Q.APIError("BAD_REQUEST",{message:"email, organizationSlug or domain is required"});n=r.domain||o?.split("@")[1];let a="";i&&(a=await t.context.adapter.findOne({model:"organization",where:[{field:"slug",value:i}]}).then(m=>m?m.id:""));let c=await t.context.adapter.findOne({model:"ssoProvider",where:[{field:a?"organizationId":"domain",value:a||n}]}).then(m=>m?{...m,oidcConfig:JSON.parse(m.oidcConfig)}:null);if(!c)throw new Q.APIError("NOT_FOUND",{message:"No provider found for the issuer"});let d=await Z(t),l=`${t.context.baseURL}/sso/callback/${c.providerId}`,p=await R({id:c.issuer,options:{clientId:c.oidcConfig.clientId,clientSecret:c.oidcConfig.clientSecret},redirectURI:l,state:d.state,codeVerifier:c.oidcConfig.pkce?d.codeVerifier:void 0,scopes:["openid","email","profile","offline_access"],authorizationEndpoint:c.oidcConfig.authorizationEndpoint});return t.json({url:p.toString(),redirect:!0})}),callbackSSO:w("/sso/callback/:providerId",{method:"GET",query:g.z.object({code:g.z.string().optional(),state:g.z.string(),error:g.z.string().optional(),error_description:g.z.string().optional()}),metadata:{isAction:!1,openapi:{summary:"Callback URL for SSO provider",description:"This endpoint is used as the callback URL for SSO providers. It handles the authorization code and exchanges it for an access token",responses:{302:{description:"Redirects to the callback URL"}}}}},async t=>{let{code:r,state:o,error:i,error_description:n}=t.query,a=await pe(t);if(!a)throw t.redirect(`${t.context.baseURL}/error?error=invalid_state`);let{callbackURL:c,errorURL:d,newUserURL:l}=a;if(!r||i)throw t.redirect(`${d||c}?error=${i}&error_description=${n}`);let p=await t.context.adapter.findOne({model:"ssoProvider",where:[{field:"providerId",value:t.params.providerId}]}).then(y=>y?{...y,oidcConfig:JSON.parse(y.oidcConfig)}:null);if(!p)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=provider not found`);let m=p.oidcConfig,A=await(0,se.betterFetch)(p.oidcConfig.discoveryEndpoint);if(A.data&&(m={tokenEndpoint:A.data.token_endpoint,tokenEndpointAuthentication:A.data.token_endpoint_auth_method,userInfoEndpoint:A.data.userinfo_endpoint,scopes:["openid","email","profile","offline_access"],...p.oidcConfig}),!m.tokenEndpoint)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=token_endpoint_not_found`);let h=await k({code:r,codeVerifier:p.oidcConfig.pkce?a.codeVerifier:void 0,redirectURI:`${t.context.baseURL}/sso/callback/${p.providerId}`,options:{clientId:p.oidcConfig.clientId,clientSecret:p.oidcConfig.clientSecret},tokenEndpoint:m.tokenEndpoint,authentication:m.tokenEndpointAuthentication==="client_secret_post"?"post":"basic"}).catch(y=>{if(y instanceof se.BetterFetchError)throw t.redirect(`${d||c}?error=invalid_provider&error_description=${y.message}`);return null});if(!h)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=token_response_not_found`);let b=null;if(h.idToken){let y=(0,It.decodeJwt)(h.idToken);if(!m.jwksEndpoint)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=jwks_endpoint_not_found`);let v=await Be(h.idToken,m.jwksEndpoint).catch(me=>(t.context.logger.error(me),null));if(!v)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=token_not_verified`);if(v.payload.iss!==p.issuer)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=issuer_mismatch`);let V=m.mapping||{};b={...Object.fromEntries(Object.entries(V.extraFields||{}).map(([me,Lt])=>[me,v.payload[Lt]])),id:y[V.id||"sub"],email:y[V.email||"email"],emailVerified:y[V.emailVerified||"email_verified"],name:y[V.name||"name"],image:y[V.image||"picture"]}}if(!b){if(!m.userInfoEndpoint)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=user_info_endpoint_not_found`);let y=await(0,se.betterFetch)(m.userInfoEndpoint,{headers:{Authorization:`Bearer ${h.accessToken}`}});if(y.error)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=${y.error.message}`);b=y.data}if(!b.email||!b.id)throw t.redirect(`${d||c}/error?error=invalid_provider&error_description=missing_user_info`);let T=await Y(t,{userInfo:{email:b.email,name:b.name||b.email,id:b.id,image:b.image,emailVerified:b.emailVerified||!1},account:{idToken:h.idToken,accessToken:h.accessToken,refreshToken:h.refreshToken,accountId:b.id,providerId:p.providerId,accessTokenExpiresAt:h.accessTokenExpiresAt,refreshTokenExpiresAt:h.refreshTokenExpiresAt,scope:h.scopes?.join(",")}});if(T.error)throw t.redirect(`${d||c}/error?error=${T.error}`);let{session:ae,user:$}=T.data;if(e?.provisionUser&&await e.provisionUser({user:$,userInfo:b,token:h,provider:p}),p.organizationId&&!e?.organizationProvisioning?.disabled&&t.context.options.plugins?.find(v=>v.id==="organization")&&!await t.context.adapter.findOne({model:"member",where:[{field:"organizationId",value:p.organizationId},{field:"userId",value:$.id}]})){let V=e?.organizationProvisioning?.getRole?await e.organizationProvisioning.getRole({user:$,userInfo:b,token:h,provider:p}):e?.organizationProvisioning?.defaultRole||"member";await t.context.adapter.create({model:"member",data:{organizationId:p.organizationId,userId:$.id,role:V,createdAt:new Date,updatedAt:new Date}})}await O(t,{session:ae,user:$});let H;try{H=new URL(c).toString()}catch{H=c}throw t.redirect(H)})},schema:{ssoProvider:{fields:{issuer:{type:"string",required:!0},oidcConfig:{type:"string",required:!1},samlConfig:{type:"string",required:!1},userId:{type:"string",references:{model:"user",field:"id"}},providerId:{type:"string",required:!0,unique:!0},organizationId:{type:"string",required:!1},domain:{type:"string",required:!0}}}}}),"sso");0&&(module.exports={sso});
