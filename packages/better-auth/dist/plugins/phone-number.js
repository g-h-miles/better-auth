var Qe=Object.defineProperty;var s=(e,t)=>Qe(e,"name",{value:t,configurable:!0});import{z as x}from"zod";import{createEndpointCreator as Ze,createMiddleware as fe,createMiddlewareCreator as Ke}from"better-call";var ge=fe(async()=>({})),G=Ke({use:[ge,fe(async()=>({}))]}),f=Ze({use:[ge]});import{APIError as T}from"better-call";import{z as m}from"zod";import{APIError as Rr}from"better-call";var Er=m.object({id:m.string(),providerId:m.string(),accountId:m.string(),userId:m.string(),accessToken:m.string().nullish(),refreshToken:m.string().nullish(),idToken:m.string().nullish(),accessTokenExpiresAt:m.date().nullish(),refreshTokenExpiresAt:m.date().nullish(),scope:m.string().nullish(),password:m.string().nullish(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date)}),Ur=m.object({id:m.string(),email:m.string().transform(e=>e.toLowerCase()),emailVerified:m.boolean().default(!1),name:m.string(),image:m.string().nullish(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date)}),kr=m.object({id:m.string(),userId:m.string(),expiresAt:m.date(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date),token:m.string(),ipAddress:m.string().nullish(),userAgent:m.string().nullish()}),_r=m.object({id:m.string(),value:m.string(),createdAt:m.date().default(()=>new Date),updatedAt:m.date().default(()=>new Date),expiresAt:m.date(),identifier:m.string()});function he(e,t){if(!t)return e;for(let r in t){let o=t[r]?.modelName;o&&(e[r].modelName=o);for(let n in e[r].fields){let i=t[r]?.fields?.[n];i&&(e[r].fields[n].fieldName=i)}}return e}s(he,"mergeSchema");import{createRandomStringGenerator as Je}from"@better-auth/utils/random";var q=Je("a-z","0-9","A-Z","-_");import{APIError as Vd,createRouter as Bd,getCookie as $d,getSignedCookie as Md,setCookie as zd,setSignedCookie as qd}from"better-call";import{APIError as rt}from"better-call";function ie(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}s(ie,"escapeRegExpChar");function Ye(e){let t="";for(let r=0;r<e.length;r++)t+=ie(e[r]);return t}s(Ye,"escapeRegExpString");function we(e,t=!0){if(Array.isArray(e))return`(?:${e.map(p=>`^${we(p,t)}$`).join("|")})`;let r="",o="",n=".";t===!0?(r="/",o="[/\\\\]",n="[^/\\\\]"):t&&(r=t,o=Ye(r),o.length>1?(o=`(?:${o})`,n=`((?!${o}).)`):n=`[^${o}]`);let i=t?`${o}+?`:"",a=t?`${o}*?`:"",c=t?e.split(r):[e],d="";for(let u=0;u<c.length;u++){let p=c[u],g=c[u+1],h="";if(!(!p&&u>0)){if(t&&(u===c.length-1?h=a:g!=="**"?h=i:h=""),t&&p==="**"){h&&(d+=u===0?"":h,d+=`(?:${n}*?${h})*?`);continue}for(let b=0;b<p.length;b++){let A=p[b];A==="\\"?b<p.length-1&&(d+=ie(p[b+1]),b++):A==="?"?d+=n:A==="*"?d+=`${n}*?`:d+=ie(A)}d+=h}}return d}s(we,"transform");function Xe(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}s(Xe,"isMatch");function se(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=we(e,t.separator),o=new RegExp(`^${r}$`,t.flags),n=Xe.bind(null,o);return n.options=t,n.pattern=e,n.regexp=o,n}s(se,"wildcardMatch");var Y=Object.create(null),W=s(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?Y:globalThis),"_getEnv"),be=new Proxy(Y,{get(e,t){return W()[t]??Y[t]},has(e,t){let r=W();return t in r||t in Y},set(e,t,r){let o=W(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=W(!0);return delete r[t],!0},ownKeys(){let e=W(!0);return Object.keys(e)}});function et(e){return e?e!=="false":!1}s(et,"toBoolean");var ae=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var de=ae==="dev"||ae==="development",tt=ae==="test"||et(be.TEST);var z=class extends Error{static{s(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function ye(e){try{return new URL(e).origin}catch{return null}}s(ye,"getOrigin");function Ae(e){return e.includes("://")?new URL(e).host:e}s(Ae,"getHost");var ot=G(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,n=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,c=r?.currentURL,d=t?.errorCallbackURL,u=t?.newUserCallbackURL,p=o.trustedOrigins,g=e.headers?.has("cookie"),h=s((A,O)=>A.startsWith("/")?!1:O.includes("*")?se(O)(Ae(A)):A.startsWith(O),"matchesPattern"),b=s((A,O)=>{if(!A)return;if(!p.some(oe=>h(A,oe)||A?.startsWith("/")&&O!=="origin"&&!A.includes(":")))throw e.context.logger.error(`Invalid ${O}: ${A}`),e.context.logger.info(`If it's a valid URL, please add ${A} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${p}`),new rt("FORBIDDEN",{message:`Invalid ${O}`})},"validateURL");g&&!e.context.options.advanced?.disableCSRFCheck&&b(n,"origin"),i&&b(i,"callbackURL"),a&&b(a,"redirectURL"),c&&b(c,"currentURL"),d&&b(d,"errorCallbackURL"),u&&b(a,"newUserCallbackURL")});import{APIError as _}from"better-call";import{z as R}from"zod";var N=s((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");import{base64Url as nt}from"@better-auth/utils/base64";import{createHMAC as it}from"@better-auth/utils/hmac";async function ce(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=nt.encode(JSON.stringify({session:t,expiresAt:N(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await it("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new z("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}s(ce,"setCookieCache");async function k(e,t,r,o){let n=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...n,maxAge:i,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await ce(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}s(k,"setSessionCookie");function C(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}s(C,"deleteSessionCookie");import{betterFetch as ct}from"@better-fetch/fetch";import{APIError as ut}from"better-call";import{decodeJwt as lt,decodeProtectedHeader as pt,importJWK as mt,jwtVerify as ft}from"jose";import{createHash as st}from"@better-auth/utils/hash";import{base64Url as at}from"@better-auth/utils/base64";async function Re(e){let t=await st("SHA-256").digest(e);return at.encode(new Uint8Array(t),{padding:!1})}s(Re,"generateCodeChallenge");function X(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?N(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}s(X,"getOAuth2Tokens");async function y({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:n,scopes:i,claims:a,redirectURI:c,duration:d}){let u=new URL(r);if(u.searchParams.set("response_type","code"),u.searchParams.set("client_id",t.clientId),u.searchParams.set("state",o),u.searchParams.set("scope",i.join(" ")),u.searchParams.set("redirect_uri",t.redirectURI||c),n){let p=await Re(n);u.searchParams.set("code_challenge_method","S256"),u.searchParams.set("code_challenge",p)}if(a){let p=a.reduce((g,h)=>(g[h]=null,g),{});u.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...p}}))}return d&&u.searchParams.set("duration",d),u}s(y,"createAuthorizationURL");import{betterFetch as dt}from"@better-fetch/fetch";import{jwtVerify as Eo}from"jose";async function w({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:n,authentication:i}){let a=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),i==="basic"){let g=btoa(`${o.clientId}:${o.clientSecret}`);c.authorization=`Basic ${g}`}else a.set("client_id",o.clientId),a.set("client_secret",o.clientSecret);let{data:d,error:u}=await dt(n,{method:"POST",body:a,headers:c});if(u)throw u;return X(d)}s(w,"validateAuthorizationCode");import{z as V}from"zod";import{APIError as Ee}from"better-call";import{createHash as Vo}from"@better-auth/utils/hash";import{xchacha20poly1305 as $o}from"@noble/ciphers/chacha";import{bytesToHex as zo,hexToBytes as qo,utf8ToBytes as Fo}from"@noble/ciphers/utils";import{managedNonce as Go}from"@noble/ciphers/webcrypto";import{scryptAsync as vo}from"@noble/hashes/scrypt";import{getRandomValues as Lo}from"uncrypto";import{hex as Do}from"@better-auth/utils/hex";async function ee(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?ye(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new Ee("BAD_REQUEST",{message:"callbackURL is required"});let o=q(128),n=q(32),i=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:i,identifier:n,expiresAt:a});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new Ee("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:o}}s(ee,"generateState");async function Ue(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=V.object({callbackURL:V.string(),codeVerifier:V.string(),errorURL:V.string().optional(),newUserURL:V.string().optional(),expiresAt:V.number(),link:V.object({email:V.string(),userId:V.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}s(Ue,"parseState");var ke=s(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:n}){let i=o||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||n}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:n})=>w({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let n=pt(r),{kid:i,alg:a}=n;if(!i||!a)return!1;let c=await gt(i),{payload:d}=await ft(r,c,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(u=>{d[u]!==void 0&&(d[u]=!!d[u])}),o&&d.nonce!==o?!1:!!d},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=lt(r.idToken);if(!o)return null;let n=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:n,emailVerified:!1,email:o.email,...i},data:o}}}},"apple"),gt=s(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await ct(`${t}${r}`);if(!o?.keys)throw new ut("BAD_REQUEST",{message:"Keys not found"});let n=o.keys.find(i=>i.kid===e);if(!n)throw new Error(`JWK with kid ${e} not found`);return await mt(n,n.alg)},"getApplePublicKey");import{betterFetch as ht}from"@better-fetch/fetch";var _e=s(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identify","email"];return e.scope&&n.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await ht("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...n},data:r}}}),"discord");import{betterFetch as wt}from"@better-fetch/fetch";var Te=s(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["email","public_profile"];return e.scope&&n.push(...e.scope),await y({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:n,state:t,redirectURI:o})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await wt("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...n},data:r}}}),"facebook");import{betterFetch as Oe}from"@better-fetch/fetch";var Se=s(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:n,redirectURI:i}){let a=o||["user:email"];return e.scope&&a.push(...e.scope),y({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:i})},validateAuthorizationCode:s(async({code:r,redirectURI:o})=>w({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await Oe("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=!1,{data:a}=await Oe("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(o.email=(a.find(d=>d.primary)??a[0])?.email,i=a.find(d=>d.email===o.email)?.verified??!1);let c=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:i,...c},data:o}}}},"github");var ue=["info","success","warn","error","debug"];function bt(e,t){return ue.indexOf(t)<=ue.indexOf(e)}s(bt,"shouldPublishLog");var j={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},yt={info:j.fg.blue,success:j.fg.green,warn:j.fg.yellow,error:j.fg.red,debug:j.fg.magenta},At=s((e,t)=>{let r=new Date().toISOString();return`${j.dim}${r}${j.reset} ${yt[e]}${e.toUpperCase()}${j.reset} ${j.bright}Better Auth${j.reset} ${t}`},"formatMessage"),Rt=s(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=s((n,i,a=[])=>{if(!t||!bt(r,n))return;let c=At(n,i);if(!e||typeof e.log!="function"){n==="error"?console.error(c,...a):n==="warn"?console.warn(c,...a):console.log(c,...a);return}e.log(n==="success"?"info":n,c,...a)},"LogFunc");return Object.fromEntries(ue.map(n=>[n,(...[i,...a])=>o(n,i,a)]))},"createLogger"),v=Rt();import{betterFetch as Et}from"@better-fetch/fetch";import{decodeJwt as Ut}from"jose";var Ie=s(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){if(!e.clientId||!e.clientSecret)throw v.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new z("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new z("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let a=await y({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:o,redirectURI:n});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:n}=await Et(o);return n?n.aud===e.clientId&&n.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=Ut(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");import{betterFetch as kt}from"@better-fetch/fetch";import{decodeJwt as _t}from"jose";var ve=s(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(n){let i=n.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),y({id:"microsoft",options:e,authorizationEndpoint:r,state:n.state,codeVerifier:n.codeVerifier,scopes:i,redirectURI:n.redirectURI})},validateAuthorizationCode({code:n,codeVerifier:i,redirectURI:a}){return w({code:n,codeVerifier:i,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:o})},async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);if(!n.idToken)return null;let i=_t(n.idToken),a=e.profilePhotoSize||48;await kt(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${n.accessToken}`},async onResponse(d){if(!(e.disableProfilePhoto||!d.response.ok))try{let p=await d.response.clone().arrayBuffer(),g=Buffer.from(p).toString("base64");i.picture=`data:image/jpeg;base64, ${g}`}catch(u){v.error(u&&typeof u=="object"&&"name"in u?u.name:"",u)}}});let c=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...c},data:i}}}},"microsoft");import{betterFetch as Tt}from"@better-fetch/fetch";var Pe=s(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),y({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:o,redirectURI:n})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Tt("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...n},data:r}}}),"spotify");var H={isAction:!1};import{createRandomStringGenerator as Ot}from"@better-auth/utils/random";var Le=s(e=>Ot("a-z","A-Z","0-9")(e||32),"generateId");import{decodeJwt as St}from"jose";var xe=s(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["user:read:email","openid"];return e.scope&&n.push(...e.scope),y({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:n,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>w({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return v.error("No idToken found in token"),null;let o=St(r),n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...n},data:o}}}),"twitch");import{betterFetch as It}from"@better-fetch/fetch";var De=s(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),y({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>w({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await It("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...n},data:r}}}),"twitter");import{betterFetch as vt}from"@better-fetch/fetch";var Ne=s(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:s(async({state:r,scopes:o,codeVerifier:n,redirectURI:i})=>{let a=o||["account_info.read"];return e.scope&&a.push(...e.scope),await y({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:i,codeVerifier:n})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:n})=>await w({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await vt("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...i},data:o}}}},"dropbox");import{betterFetch as Pt}from"@better-fetch/fetch";var Ce=s(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:s(async({state:o,scopes:n,redirectURI:i})=>{let a=n||["profile","email","openid"];return e.scope&&a.push(...e.scope),await y({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:o,redirectURI:i})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:o,redirectURI:n})=>await w({code:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:n,error:i}=await Pt("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let a=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,emailVerified:n.email_verified||!1,image:n.picture,...a},data:n}}}},"linkedin");import{betterFetch as Lt}from"@better-fetch/fetch";var le=s((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),xt=s(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:le(`${t}/oauth/authorize`),tokenEndpoint:le(`${t}/oauth/token`),userinfoEndpoint:le(`${t}/api/v4/user`)}},"issuerToEndpoints"),je=s(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=xt(e.issuer),n="gitlab";return{id:n,name:"Gitlab",createAuthorizationURL:s(async({state:a,scopes:c,codeVerifier:d,redirectURI:u})=>{let p=c||["read_user"];return e.scope&&p.push(...e.scope),await y({id:n,options:e,authorizationEndpoint:t,scopes:p,state:a,redirectURI:u,codeVerifier:d})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:a,redirectURI:c,codeVerifier:d})=>w({code:a,redirectURI:e.redirectURI||c,options:e,codeVerifier:d,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:c,error:d}=await Lt(o,{headers:{authorization:`Bearer ${a.accessToken}`}});if(d||c.state!=="active"||c.locked)return null;let u=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...u},data:c}}}},"gitlab");import{betterFetch as Ve}from"@better-fetch/fetch";var Be=s(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identity"];return e.scope&&n.push(...e.scope),y({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:n,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),n={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:a}=await Ve("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:n,body:o.toString()});if(a)throw a;return X(i)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Ve("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...n},data:r}}}),"reddit");import{z as Dt}from"zod";var Nt={apple:ke,discord:_e,facebook:Te,github:Se,microsoft:ve,google:Ie,spotify:Pe,twitch:xe,twitter:De,dropbox:Ne,linkedin:Ce,gitlab:je,reddit:Be},pe=Object.keys(Nt),$e=Dt.enum(pe,{description:"OAuth2 provider to use"});import{z as L}from"zod";import{APIError as Q}from"better-call";import{APIError as B}from"better-call";import{z as F}from"zod";function Me(e){try{return JSON.parse(e)}catch{return null}}s(Me,"safeJSONParse");var l={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as Ct}from"@better-auth/utils/hmac";import{base64 as jt}from"@better-auth/utils/base64";import{binary as Vt}from"@better-auth/utils/binary";var ze=s(()=>f("/get-session",{method:"GET",query:F.optional(F.object({disableCookieCache:F.boolean({description:"Disable cookie cache and fetch session from database"}).or(F.string().transform(e=>e==="true")).optional(),disableRefresh:F.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Me(Vt.decode(jt.decode(r))):null;if(o&&!await Ct("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return C(e),e.json(null);let n=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let p=o.session;if(o.expiresAt<Date.now()||p.session.expiresAt<new Date){let h=e.context.authCookies.sessionData.name;e.setCookie(h,"",{maxAge:0})}else return e.json(p)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return C(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(n||e.query?.disableRefresh)return e.json(i);let a=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-a*1e3+c*1e3<=Date.now()){let p=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:N(e.context.sessionConfig.expiresIn,"sec")});if(!p)return C(e),e.json(null,{status:401});let g=(p.expiresAt.valueOf()-Date.now())/1e3;return await k(e,{session:p,user:i.user},!1,{maxAge:g}),e.json({session:p,user:i.user})}return await ce(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new B("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_GET_SESSION})}}),"getSession"),$=s(async(e,t)=>{if(e.context.session)return e.context.session;let r=await ze()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),P=G(async e=>{let t=await $(e);if(!t?.session)throw new B("UNAUTHORIZED");return{session:t}}),Rs=G(async e=>{let t=await $(e);if(!t?.session)throw new B("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new B("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var Bt=f("/revoke-session",{method:"POST",body:F.object({token:F.string({description:"The token to revoke"})}),use:[P],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new B("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new B("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new B("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),$t=f("/revoke-sessions",{method:"POST",use:[P],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new B("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Mt=f("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[P],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new B("UNAUTHORIZED");let n=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(n.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});import{jwtVerify as qt}from"jose";import{SignJWT as zt}from"jose";async function qe(e,t,r=3600){return await new zt(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}s(qe,"signJWT");async function M(e,t,r){return await qe({email:t.toLowerCase(),updateTo:r},e)}s(M,"createEmailVerificationToken");async function Ft(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Q("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await M(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}s(Ft,"sendVerificationEmailFn");var Ht=f("/send-verification-email",{method:"POST",query:L.object({currentURL:L.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:L.object({email:L.string({description:"The email to send the verification email to"}).email(),callbackURL:L.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new Q("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new Q("BAD_REQUEST",{message:l.USER_NOT_FOUND});return await Ft(e,r.user),e.json({status:!0})}),Gt=f("/verify-email",{method:"GET",query:L.object({token:L.string({description:"The token to verify the email"}),callbackURL:L.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new Q("UNAUTHORIZED",{message:c})}s(t,"redirectOnError");let{token:r}=e.query,o;try{o=await qt(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let i=L.object({email:L.string().email(),updateTo:L.string().optional()}).parse(o.payload),a=await e.context.internalAdapter.findUserByEmail(i.email);if(!a)return t("user_not_found");if(i.updateTo){let c=await $(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let d=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),u=await M(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:d,url:`${e.context.baseURL}/verify-email?token=${u}`,token:u},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await $(e)){let d=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!d)throw new Q("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await k(e,{session:d,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function te(e,{userInfo:t,account:r,callbackURL:o}){let n=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(d=>{throw v.error(`Better auth was unable to query your database.
Error: `,d),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=n?.user,a=!i;if(n){let d=n.accounts.find(u=>u.providerId===r.providerId);if(d){let u=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([p,g])=>g!==void 0));Object.keys(u).length>0&&await e.context.internalAdapter.updateAccount(d.id,u)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return de&&v.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:n.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(g){return v.error("Unable to link account",g),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(d=>d?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let d=await M(e.context.secret,i.email),u=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:u,token:d},e.request)}}catch(d){return d instanceof Fe?{error:d.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(i.id,e.request);return c?{data:{session:c,user:i},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}s(te,"handleOAuthUserInfo");var Wt=f("/sign-in/social",{method:"POST",query:R.object({currentURL:R.string().optional()}).optional(),body:R.object({callbackURL:R.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:R.string().optional(),errorCallbackURL:R.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:$e,disableRedirect:R.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:R.optional(R.object({token:R.string({description:"ID token from the provider"}),nonce:R.string({description:"Nonce used to generate the token"}).optional(),accessToken:R.string({description:"Access token from the provider"}).optional(),refreshToken:R.string({description:"Refresh token from the provider"}).optional(),expiresAt:R.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new _("NOT_FOUND",{message:l.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new _("NOT_FOUND",{message:l.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(i,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:l.INVALID_TOKEN});let d=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!d||!d?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:l.FAILED_TO_GET_USER_INFO});if(!d.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new _("UNAUTHORIZED",{message:l.USER_EMAIL_NOT_FOUND});let u=await te(e,{userInfo:{email:d.user.email,id:d.user.id,name:d.user.name||"",image:d.user.image,emailVerified:d.user.emailVerified||!1},account:{providerId:t.id,accountId:d.user.id,accessToken:e.body.idToken.accessToken}});if(u.error)throw new _("UNAUTHORIZED",{message:u.error});return await k(e,u.data),e.json({token:u.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await ee(e),n=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:n.toString(),redirect:!e.body.disableRedirect})}),Qt=f("/sign-in/email",{method:"POST",body:R.object({email:R.string({description:"Email of the user"}),password:R.string({description:"Password of the user"}),callbackURL:R.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:R.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new _("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!R.string().email().safeParse(t).success)throw new _("BAD_REQUEST",{message:l.INVALID_EMAIL});let n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new _("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});let i=n.accounts.find(u=>u.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new _("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});let a=i?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new _("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new _("UNAUTHORIZED",{message:l.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!n.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new _("UNAUTHORIZED",{message:l.EMAIL_NOT_VERIFIED});let u=await M(e.context.secret,n.user.email),p=`${e.context.baseURL}/verify-email?token=${u}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:n.user,url:p,token:u},e.request),e.context.logger.error("Email not verified",{email:t}),new _("FORBIDDEN",{message:l.EMAIL_NOT_VERIFIED})}let d=await e.context.internalAdapter.createSession(n.user.id,e.headers,e.body.rememberMe===!1);if(!d)throw e.context.logger.error("Failed to create session"),new _("UNAUTHORIZED",{message:l.FAILED_TO_CREATE_SESSION});return await k(e,{session:d,user:n.user},e.body.rememberMe===!1),e.json({user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as Z}from"zod";var re=Z.object({code:Z.string().optional(),error:Z.string().optional(),error_description:Z.string().optional(),state:Z.string().optional()}),Zt=f("/callback/:id",{method:["GET","POST"],body:re.optional(),query:re.optional(),metadata:H},async e=>{let t;try{if(e.method==="GET")t=re.parse(e.query);else if(e.method==="POST")t=re.parse(e.body);else throw new Error("Unsupported method")}catch(S){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",S),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:n,error_description:i}=t;if(!n)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${i}`);let a=e.context.socialProviders.find(S=>S.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:d,link:u,errorURL:p,newUserURL:g}=await Ue(e),h;try{h=await a.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(S){throw e.context.logger.error("",S),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let b=await a.getUserInfo(h).then(S=>S?.user);function A(S){let D=p||d||`${e.context.baseURL}/error`;throw D.includes("?")?D=`${D}&error=${S}`:D=`${D}?error=${S}`,e.redirect(D)}if(s(A,"redirectOnError"),!b)return e.context.logger.error("Unable to get user info"),A("unable_to_get_user_info");if(!b.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),A("email_not_found");if(!d)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(u){if(u.email!==b.email.toLowerCase())return A("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:u.userId,providerId:a.id,accountId:b.id}))return A("unable_to_link_account");let D;try{D=d.toString()}catch{D=d}throw e.redirect(D)}let O=await te(e,{userInfo:{...b,email:b.email,name:b.name||b.email},account:{providerId:a.id,accountId:b.id,...h,scope:h.scopes?.join(",")},callbackURL:d});if(O.error)return e.context.logger.error(O.error.split(" ").join("_")),A(O.error.split(" ").join("_"));let{session:me,user:oe}=O.data;await k(e,{session:me,user:oe});let ne;try{ne=(O.isRegister&&g||d).toString()}catch{ne=O.isRegister&&g||d}throw e.redirect(ne)});import"zod";import{APIError as Kt}from"better-call";var Jt=f("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw C(e),new Kt("BAD_REQUEST",{message:l.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),C(e),e.json({success:!0})});import{z as I}from"zod";import{APIError as K}from"better-call";function He(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}s(He,"redirectError");function Yt(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}s(Yt,"redirectCallback");var Xt=f("/forget-password",{method:"POST",body:I.object({email:I.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:I.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new K("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let n=60*60*1,i=N(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||n,"sec"),a=Le(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:i});let c=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:c,token:a},e.request),e.json({status:!0})}),er=f("/reset-password/:token",{method:"GET",query:I.object({callbackURL:I.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(He(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(He(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(Yt(e.context,r,{token:t}))}),tr=f("/reset-password",{query:I.optional(I.object({token:I.string().optional(),currentURL:I.string().optional()})),method:"POST",body:I.object({newPassword:I.string({description:"The new password to set"}),token:I.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new K("BAD_REQUEST",{message:l.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,n=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new K("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});if(r.length>n)throw new K("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(i);if(!a||a.expiresAt<new Date)throw new K("BAD_REQUEST",{message:l.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let c=a.value,d=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(g=>g.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,d),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:d,accountId:c}),e.json({status:!0}))});import{z as U}from"zod";import{APIError as E}from"better-call";var or=f("/change-password",{method:"POST",body:U.object({newPassword:U.string({description:"The new password to set"}),currentPassword:U.string({description:"The current password"}),revokeOtherSessions:U.boolean({description:"Revoke all other sessions"}).optional()}),use:[P],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,n=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new E("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new E("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let d=(await e.context.internalAdapter.findAccounts(n.user.id)).find(h=>h.providerId==="credential"&&h.password);if(!d||!d.password)throw new E("BAD_REQUEST",{message:l.CREDENTIAL_ACCOUNT_NOT_FOUND});let u=await e.context.password.hash(t);if(!await e.context.password.verify({hash:d.password,password:r}))throw new E("BAD_REQUEST",{message:l.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(d.id,{password:u});let g=null;if(o){await e.context.internalAdapter.deleteSessions(n.user.id);let h=await e.context.internalAdapter.createSession(n.user.id,e.headers);if(!h)throw new E("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_GET_SESSION});await k(e,{session:h,user:n.user}),g=h.token}return e.json({token:g})}),nr=f("/set-password",{method:"POST",body:U.object({newPassword:U.string()}),metadata:{SERVER_ONLY:!0},use:[P]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new E("BAD_REQUEST",{message:l.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new E("BAD_REQUEST",{message:l.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(d=>d.providerId==="credential"&&d.password),c=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new E("BAD_REQUEST",{message:"user already has a password"})}),ir=f("/delete-user",{method:"POST",use:[P],body:U.object({callbackURL:U.string().optional(),password:U.string().optional(),token:U.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new E("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!i||!i.password)throw new E("BAD_REQUEST",{message:l.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new E("BAD_REQUEST",{message:l.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let n=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-n>i)throw new E("BAD_REQUEST",{message:l.SESSION_EXPIRED})}if(e.body.token)return await Ge({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let n=q(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${n}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${n}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:n},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),C(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Ge=f("/delete-user/callback",{method:"GET",query:U.object({token:U.string(),callbackURL:U.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new E("NOT_FOUND");let t=await $(e);if(!t)throw new E("NOT_FOUND",{message:l.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new E("NOT_FOUND",{message:l.INVALID_TOKEN});if(r.value!==t.user.id)throw new E("NOT_FOUND",{message:l.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),C(e);let n=e.context.options.user.deleteUser?.afterDelete;if(n&&await n(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),sr=f("/change-email",{method:"POST",query:U.object({currentURL:U.string().optional()}).optional(),body:U.object({newEmail:U.string({description:"The new email to set"}).email(),callbackURL:U.string({description:"The URL to redirect to after email verification"}).optional()}),use:[P],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new E("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new E("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new E("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let n=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new E("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await M(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var ar=s((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),dr=f("/error",{method:"GET",metadata:{...H,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(ar(t),{headers:{"Content-Type":"text/html"}})});var cr=f("/ok",{method:"GET",metadata:{...H,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as Fa}from"zod";import{APIError as Ja}from"better-call";import{z as J}from"zod";import{APIError as We}from"better-call";var ur=f("/list-accounts",{method:"GET",use:[P],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),lr=f("/link-social",{method:"POST",requireHeaders:!0,query:J.object({currentURL:J.string().optional()}).optional(),body:J.object({callbackURL:J.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:J.enum(pe,{description:"The OAuth2 provider to use"})}),use:[P],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new We("BAD_REQUEST",{message:l.SOCIAL_ACCOUNT_ALREADY_LINKED});let n=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!n)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new We("NOT_FOUND",{message:l.PROVIDER_NOT_FOUND});let i=await ee(e,{userId:t.user.id,email:t.user.email}),a=await n.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${n.id}`});return e.json({url:a.toString(),redirect:!0})});import"defu";import{APIError as Fe}from"better-call";function pr(e){return q(e,"0-9")}s(pr,"generateOTP");var fc=s(e=>{let t={expiresIn:e?.expiresIn||300,otpLength:e?.otpLength||6,...e,phoneNumber:"phoneNumber",phoneNumberVerified:"phoneNumberVerified",code:"code",createdAt:"createdAt"},r={INVALID_PHONE_NUMBER:"Invalid phone number",INVALID_PHONE_NUMBER_OR_PASSWORD:"Invalid phone number or password",UNEXPECTED_ERROR:"Unexpected error",OTP_NOT_FOUND:"OTP not found"};return{id:"phone-number",endpoints:{signInPhoneNumber:f("/sign-in/phone-number",{method:"POST",body:x.object({phoneNumber:x.string({description:"Phone number to sign in"}),password:x.string({description:"Password to use for sign in"}),rememberMe:x.boolean({description:"Remember the session"}).optional()}),metadata:{openapi:{summary:"Sign in with phone number",description:"Use this endpoint to sign in with phone number",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"},session:{$ref:"#/components/schemas/Session"}}}}}},400:{description:"Invalid phone number or password"}}}}},async o=>{let{password:n,phoneNumber:i}=o.body;if(t.phoneNumberValidator&&!await t.phoneNumberValidator(o.body.phoneNumber))throw new T("BAD_REQUEST",{message:r.INVALID_PHONE_NUMBER});let a=await o.context.adapter.findOne({model:"user",where:[{field:"phoneNumber",value:i}]});if(!a)throw new T("UNAUTHORIZED",{message:r.INVALID_PHONE_NUMBER_OR_PASSWORD});let d=(await o.context.internalAdapter.findAccountByUserId(a.id)).find(h=>h.providerId==="credential");if(!d)throw o.context.logger.error("Credential account not found",{phoneNumber:i}),new T("UNAUTHORIZED",{message:r.INVALID_PHONE_NUMBER_OR_PASSWORD});let u=d?.password;if(!u)throw o.context.logger.error("Password not found",{phoneNumber:i}),new T("UNAUTHORIZED",{message:r.UNEXPECTED_ERROR});if(!await o.context.password.verify({hash:u,password:n}))throw o.context.logger.error("Invalid password"),new T("UNAUTHORIZED",{message:r.INVALID_PHONE_NUMBER_OR_PASSWORD});let g=await o.context.internalAdapter.createSession(a.id,o.headers,o.body.rememberMe===!1);if(!g)throw o.context.logger.error("Failed to create session"),new T("UNAUTHORIZED",{message:l.FAILED_TO_CREATE_SESSION});return await k(o,{session:g,user:a},o.body.rememberMe===!1),o.json({token:g.token})}),sendPhoneNumberOTP:f("/phone-number/send-otp",{method:"POST",body:x.object({phoneNumber:x.string({description:"Phone number to send OTP"})}),metadata:{openapi:{summary:"Send OTP to phone number",description:"Use this endpoint to send OTP to phone number",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{message:{type:"string"}}}}}}}}}},async o=>{if(!e?.sendOTP)throw o.context.logger.warn("sendOTP not implemented"),new T("NOT_IMPLEMENTED",{message:"sendOTP not implemented"});if(t.phoneNumberValidator&&!await t.phoneNumberValidator(o.body.phoneNumber))throw new T("BAD_REQUEST",{message:r.INVALID_PHONE_NUMBER});let n=pr(t.otpLength);return await o.context.internalAdapter.createVerificationValue({value:n,identifier:o.body.phoneNumber,expiresAt:N(t.expiresIn,"sec")}),await e.sendOTP({phoneNumber:o.body.phoneNumber,code:n},o.request),o.json({code:n},{body:{message:"Code sent"}})}),verifyPhoneNumber:f("/phone-number/verify",{method:"POST",body:x.object({phoneNumber:x.string({description:"Phone number to verify"}),code:x.string({description:"OTP code"}),disableSession:x.boolean({description:"Disable session creation after verification"}).optional(),updatePhoneNumber:x.boolean({description:"Check if there is a session and update the phone number"}).optional()}),metadata:{openapi:{summary:"Verify phone number",description:"Use this endpoint to verify phone number",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{$ref:"#/components/schemas/User"},session:{$ref:"#/components/schemas/Session"}}}}}},400:{description:"Invalid OTP"}}}}},async o=>{let n=await o.context.internalAdapter.findVerificationValue(o.body.phoneNumber);if(!n||n.expiresAt<new Date)throw n&&n.expiresAt<new Date?(await o.context.internalAdapter.deleteVerificationValue(n.id),new T("BAD_REQUEST",{message:"OTP expired"})):new T("BAD_REQUEST",{message:r.OTP_NOT_FOUND});if(n.value!==o.body.code)throw new T("BAD_REQUEST",{message:"Invalid OTP"});if(await o.context.internalAdapter.deleteVerificationValue(n.id),o.body.updatePhoneNumber){let a=await $(o);if(!a)throw new T("UNAUTHORIZED",{message:l.USER_NOT_FOUND});return await o.context.internalAdapter.updateUser(a.user.id,{[t.phoneNumber]:o.body.phoneNumber,[t.phoneNumberVerified]:!0}),o.json({token:a.session.token,status:!0})}let i=await o.context.adapter.findOne({model:"user",where:[{value:o.body.phoneNumber,field:t.phoneNumber}]});if(await e?.callbackOnVerification?.({phoneNumber:o.body.phoneNumber,user:i},o.request),i)i=await o.context.internalAdapter.updateUser(i.id,{[t.phoneNumberVerified]:!0});else if(e?.signUpOnVerification){if(i=await o.context.internalAdapter.createUser({email:e.signUpOnVerification.getTempEmail(o.body.phoneNumber),name:e.signUpOnVerification.getTempName?e.signUpOnVerification.getTempName(o.body.phoneNumber):o.body.phoneNumber,[t.phoneNumber]:o.body.phoneNumber,[t.phoneNumberVerified]:!0}),!i)throw new T("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_CREATE_USER})}else return o.json(null);if(!i)throw new T("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_UPDATE_USER});if(!o.body.disableSession){let a=await o.context.internalAdapter.createSession(i.id,o.request);if(!a)throw new T("INTERNAL_SERVER_ERROR",{message:l.FAILED_TO_CREATE_SESSION});return await k(o,{session:a,user:i}),o.json({token:a.token,status:!0})}return o.json({token:null,status:!0})})},schema:he(mr,e?.schema),$ERROR_CODES:r}},"phoneNumber"),mr={user:{fields:{phoneNumber:{type:"string",required:!1,unique:!0,returned:!0},phoneNumberVerified:{type:"boolean",required:!1,returned:!0,input:!1}}}};export{fc as phoneNumber};
