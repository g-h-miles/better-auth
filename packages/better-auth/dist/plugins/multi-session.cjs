"use strict";var ce=Object.defineProperty;var _t=Object.getOwnPropertyDescriptor;var St=Object.getOwnPropertyNames;var Ot=Object.prototype.hasOwnProperty;var vt=(e,t)=>{for(var r in t)ce(e,r,{get:t[r],enumerable:!0})},It=(e,t,r,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of St(t))!Ot.call(e,o)&&o!==r&&ce(e,o,{get:()=>t[o],enumerable:!(i=_t(t,o))||i.enumerable});return e};var Lt=e=>It(ce({},"__esModule",{value:!0}),e);var Tr={};vt(Tr,{multiSession:()=>Ur});module.exports=Lt(Tr);var ee=require("zod");var K=require("better-call");var Oe=require("better-call");var z=require("better-call"),Ee=(0,z.createMiddleware)(async()=>({})),j=(0,z.createMiddlewareCreator)({use:[Ee,(0,z.createMiddleware)(async()=>({}))]}),f=(0,z.createEndpointCreator)({use:[Ee]});function de(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}function Pt(e){let t="";for(let r=0;r<e.length;r++)t+=de(e[r]);return t}function Ue(e,t=!0){if(Array.isArray(e))return`(?:${e.map(l=>`^${Ue(l,t)}$`).join("|")})`;let r="",i="",o=".";t===!0?(r="/",i="[/\\\\]",o="[^/\\\\]"):t&&(r=t,i=Pt(r),i.length>1?(i=`(?:${i})`,o=`((?!${i}).)`):o=`[^${i}]`);let n=t?`${i}+?`:"",s=t?`${i}*?`:"",c=t?e.split(r):[e],a="";for(let d=0;d<c.length;d++){let l=c[d],g=c[d+1],w="";if(!(!l&&d>0)){if(t&&(d===c.length-1?w=s:g!=="**"?w=n:w=""),t&&l==="**"){w&&(a+=d===0?"":w,a+=`(?:${o}*?${w})*?`);continue}for(let h=0;h<l.length;h++){let m=l[h];m==="\\"?h<l.length-1&&(a+=de(l[h+1]),h++):m==="?"?a+=o:m==="*"?a+=`${o}*?`:a+=de(m)}a+=w}}return a}function xt(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}function le(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Ue(e,t.separator),i=new RegExp(`^${r}$`,t.flags),o=xt.bind(null,i);return o.options=t,o.pattern=e,o.regexp=i,o}var te=Object.create(null),J=e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?te:globalThis),Te=new Proxy(te,{get(e,t){return J()[t]??te[t]},has(e,t){let r=J();return t in r||t in te},set(e,t,r){let i=J(!0);return i[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=J(!0);return delete r[t],!0},ownKeys(){let e=J(!0);return Object.keys(e)}});function Dt(e){return e?e!=="false":!1}var ue=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var pe=ue==="dev"||ue==="development",Ct=ue==="test"||Dt(Te.TEST);var $=class extends Error{constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function _e(e){try{return new URL(e).origin}catch{return null}}function Se(e){return e.includes("://")?new URL(e).host:e}var Nt=j(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:i}=e,o=e.headers?.get("origin")||e.headers?.get("referer")||"",n=t?.callbackURL||r?.callbackURL,s=t?.redirectTo,c=r?.currentURL,a=t?.errorCallbackURL,d=t?.newUserCallbackURL,l=i.trustedOrigins,g=e.headers?.has("cookie"),w=(m,y)=>m.startsWith("/")?!1:y.includes("*")?le(y)(Se(m)):m.startsWith(y),h=(m,y)=>{if(!m)return;if(!l.some(se=>w(m,se)||m?.startsWith("/")&&y!=="origin"&&!m.includes(":")))throw e.context.logger.error(`Invalid ${y}: ${m}`),e.context.logger.info(`If it's a valid URL, please add ${m} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${l}`),new Oe.APIError("FORBIDDEN",{message:`Invalid ${y}`})};g&&!e.context.options.advanced?.disableCSRFCheck&&h(o,"origin"),n&&h(n,"callbackURL"),s&&h(s,"redirectURL"),c&&h(c,"currentURL"),a&&h(a,"errorCallbackURL"),d&&h(s,"newUserCallbackURL")});var U=require("better-call"),k=require("zod");var V=(e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e));var Ie=require("@better-auth/utils/base64");var Le=require("@better-auth/utils/hmac");function ve(e){let t=new Map;return e.split(", ").forEach(i=>{let o=i.split(";").map(g=>g.trim()),[n,...s]=o,[c,...a]=n.split("="),d=a.join("=");if(!c||d===void 0)return;let l={value:d};s.forEach(g=>{let[w,...h]=g.split("="),m=h.join("="),y=w.trim().toLowerCase();switch(y){case"max-age":l["max-age"]=m?parseInt(m.trim(),10):void 0;break;case"expires":l.expires=m?new Date(m.trim()):void 0;break;case"domain":l.domain=m?m.trim():void 0;break;case"path":l.path=m?m.trim():void 0;break;case"secure":l.secure=!0;break;case"httponly":l.httponly=!0;break;case"samesite":l.samesite=m?m.trim().toLowerCase():void 0;break;default:l[y]=m?m.trim():!0;break}}),t.set(c,l)}),t}async function me(e,t){if(e.context.options.session?.cookieCache?.enabled){let i=Ie.base64Url.encode(JSON.stringify({session:t,expiresAt:V(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await(0,Le.createHMAC)("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(i.length>4093)throw new $("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,i,e.context.authCookies.sessionData.options)}}async function T(e,t,r,i){let o=e.context.authCookies.sessionToken.options,n=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...o,maxAge:n,...i}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await me(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}function _(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}function Y(e){let t=e.split("; "),r=new Map;return t.forEach(i=>{let[o,n]=i.split("=");r.set(o,n)}),r}var $e=require("@better-fetch/fetch"),Ve=require("better-call"),B=require("jose");var Pe=require("@better-auth/utils/hash"),xe=require("@better-auth/utils/base64");async function De(e){let t=await(0,Pe.createHash)("SHA-256").digest(e);return xe.base64Url.encode(new Uint8Array(t),{padding:!1})}function re(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?V(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}async function A({id:e,options:t,authorizationEndpoint:r,state:i,codeVerifier:o,scopes:n,claims:s,redirectURI:c,duration:a}){let d=new URL(r);if(d.searchParams.set("response_type","code"),d.searchParams.set("client_id",t.clientId),d.searchParams.set("state",i),d.searchParams.set("scope",n.join(" ")),d.searchParams.set("redirect_uri",t.redirectURI||c),o){let l=await De(o);d.searchParams.set("code_challenge_method","S256"),d.searchParams.set("code_challenge",l)}if(s){let l=s.reduce((g,w)=>(g[w]=null,g),{});d.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...l}}))}return a&&d.searchParams.set("duration",a),d}var Ce=require("@better-fetch/fetch");var jt=require("jose");async function b({code:e,codeVerifier:t,redirectURI:r,options:i,tokenEndpoint:o,authentication:n}){let s=new URLSearchParams,c={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(s.set("grant_type","authorization_code"),s.set("code",e),t&&s.set("code_verifier",t),s.set("redirect_uri",r),n==="basic"){let g=btoa(`${i.clientId}:${i.clientSecret}`);c.authorization=`Basic ${g}`}else s.set("client_id",i.clientId),s.set("client_secret",i.clientSecret);let{data:a,error:d}=await(0,Ce.betterFetch)(o,{method:"POST",body:s,headers:c});if(d)throw d;return re(a)}var x=require("zod"),ge=require("better-call");var Mt=require("@better-auth/utils/hash"),zt=require("@noble/ciphers/chacha"),fe=require("@noble/ciphers/utils"),qt=require("@noble/ciphers/webcrypto");var $t=require("@noble/hashes/scrypt"),Vt=require("uncrypto"),Bt=require("@better-auth/utils/hex");var Ne=require("@better-auth/utils/random"),X=(0,Ne.createRandomStringGenerator)("a-z","0-9","A-Z","-_");async function oe(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?_e(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new ge.APIError("BAD_REQUEST",{message:"callbackURL is required"});let i=X(128),o=X(32),n=JSON.stringify({callbackURL:r,codeVerifier:i,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),s=new Date;s.setMinutes(s.getMinutes()+10);let c=await e.context.internalAdapter.createVerificationValue({value:n,identifier:o,expiresAt:s});if(!c)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new ge.APIError("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:c.identifier,codeVerifier:i}}async function je(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let i=x.z.object({callbackURL:x.z.string(),codeVerifier:x.z.string(),errorURL:x.z.string().optional(),newUserURL:x.z.string().optional(),expiresAt:x.z.number(),link:x.z.object({email:x.z.string(),userId:x.z.string()}).optional()}).parse(JSON.parse(r.value));if(i.errorURL||(i.errorURL=`${e.context.baseURL}/error`),i.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),i}var Be=e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:i,redirectURI:o}){let n=i||["email","name"];return e.scope&&n.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||o}&scope=${n.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:async({code:r,codeVerifier:i,redirectURI:o})=>b({code:r,codeVerifier:i,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async verifyIdToken(r,i){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,i);let o=(0,B.decodeProtectedHeader)(r),{kid:n,alg:s}=o;if(!n||!s)return!1;let c=await Ft(n),{payload:a}=await(0,B.jwtVerify)(r,c,{algorithms:[s],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(d=>{a[d]!==void 0&&(a[d]=!!a[d])}),i&&a.nonce!==i?!1:!!a},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let i=(0,B.decodeJwt)(r.idToken);if(!i)return null;let o=i.user?`${i.user.name.firstName} ${i.user.name.lastName}`:i.email,n=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:o,emailVerified:!1,email:i.email,...n},data:i}}}},Ft=async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:i}=await(0,$e.betterFetch)(`${t}${r}`);if(!i?.keys)throw new Ve.APIError("BAD_REQUEST",{message:"Keys not found"});let o=i.keys.find(n=>n.kid===e);if(!o)throw new Error(`JWK with kid ${e} not found`);return await(0,B.importJWK)(o,o.alg)};var Me=require("@better-fetch/fetch");var ze=e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:i}){let o=r||["identify","email"];return e.scope&&o.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${o.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||i)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await(0,Me.betterFetch)("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(i)return null;if(r.avatar===null){let n=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${n}.png`}else{let n=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${n}`}let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...o},data:r}}});var qe=require("@better-fetch/fetch");var Fe=e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:i}){let o=r||["email","public_profile"];return e.scope&&o.push(...e.scope),await A({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:o,state:t,redirectURI:i})},validateAuthorizationCode:async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await(0,qe.betterFetch)("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(i)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...o},data:r}}});var he=require("@better-fetch/fetch");var He=e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:i,codeVerifier:o,redirectURI:n}){let s=i||["user:email"];return e.scope&&s.push(...e.scope),A({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:s,state:r,redirectURI:n})},validateAuthorizationCode:async({code:r,redirectURI:i})=>b({code:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:i,error:o}=await(0,he.betterFetch)("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(o)return null;let n=!1,{data:s}=await(0,he.betterFetch)("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});s&&(i.email=(s.find(a=>a.primary)??s[0])?.email,n=s.find(a=>a.email===i.email)?.verified??!1);let c=await e.mapProfileToUser?.(i);return{user:{id:i.id.toString(),name:i.name||i.login,email:i.email,image:i.avatar_url,emailVerified:n,...c},data:i}}}};var we=["info","success","warn","error","debug"];function Ht(e,t){return we.indexOf(t)<=we.indexOf(e)}var D={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Gt={info:D.fg.blue,success:D.fg.green,warn:D.fg.yellow,error:D.fg.red,debug:D.fg.magenta},Wt=(e,t)=>{let r=new Date().toISOString();return`${D.dim}${r}${D.reset} ${Gt[e]}${e.toUpperCase()}${D.reset} ${D.bright}Better Auth${D.reset} ${t}`},Zt=e=>{let t=e?.disabled!==!0,r=e?.level??"error",i=(o,n,s=[])=>{if(!t||!Ht(r,o))return;let c=Wt(o,n);if(!e||typeof e.log!="function"){o==="error"?console.error(c,...s):o==="warn"?console.warn(c,...s):console.log(c,...s);return}e.log(o==="success"?"info":o,c,...s)};return Object.fromEntries(we.map(o=>[o,(...[n,...s])=>i(o,n,s)]))},L=Zt();var Ge=require("@better-fetch/fetch"),We=require("jose"),Ze=e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:i,redirectURI:o}){if(!e.clientId||!e.clientSecret)throw L.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new $("CLIENT_ID_AND_SECRET_REQUIRED");if(!i)throw new $("codeVerifier is required for Google");let n=r||["email","profile","openid"];e.scope&&n.push(...e.scope);let s=await A({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:n,state:t,codeVerifier:i,redirectURI:o});return e.accessType&&s.searchParams.set("access_type",e.accessType),e.prompt&&s.searchParams.set("prompt",e.prompt),s},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:i})=>b({code:t,codeVerifier:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let i=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:o}=await(0,Ge.betterFetch)(i);return o?o.aud===e.clientId&&o.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=(0,We.decodeJwt)(t.idToken),i=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...i},data:r}}});var Qe=require("@better-fetch/fetch");var Ke=require("jose"),Je=e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,i=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(o){let n=o.scopes||["openid","profile","email","User.Read"];return e.scope&&n.push(...e.scope),A({id:"microsoft",options:e,authorizationEndpoint:r,state:o.state,codeVerifier:o.codeVerifier,scopes:n,redirectURI:o.redirectURI})},validateAuthorizationCode({code:o,codeVerifier:n,redirectURI:s}){return b({code:o,codeVerifier:n,redirectURI:e.redirectURI||s,options:e,tokenEndpoint:i})},async getUserInfo(o){if(e.getUserInfo)return e.getUserInfo(o);if(!o.idToken)return null;let n=(0,Ke.decodeJwt)(o.idToken),s=e.profilePhotoSize||48;await(0,Qe.betterFetch)(`https://graph.microsoft.com/v1.0/me/photos/${s}x${s}/$value`,{headers:{Authorization:`Bearer ${o.accessToken}`},async onResponse(a){if(!(e.disableProfilePhoto||!a.response.ok))try{let l=await a.response.clone().arrayBuffer(),g=Buffer.from(l).toString("base64");n.picture=`data:image/jpeg;base64, ${g}`}catch(d){L.error(d&&typeof d=="object"&&"name"in d?d.name:"",d)}}});let c=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,image:n.picture,emailVerified:!0,...c},data:n}}}};var Ye=require("@better-fetch/fetch");var Xe=e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:i,redirectURI:o}){let n=r||["user-read-email"];return e.scope&&n.push(...e.scope),A({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:n,state:t,codeVerifier:i,redirectURI:o})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:i})=>b({code:t,codeVerifier:r,redirectURI:e.redirectURI||i,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await(0,Ye.betterFetch)("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(i)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...o},data:r}}});var H={isAction:!1};var et=require("@better-auth/utils/random"),tt=e=>(0,et.createRandomStringGenerator)("a-z","A-Z","0-9")(e||32);var rt=require("jose"),ot=e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:i}){let o=r||["user:read:email","openid"];return e.scope&&o.push(...e.scope),A({id:"twitch",redirectURI:i,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:o,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:async({code:t,redirectURI:r})=>b({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return L.error("No idToken found in token"),null;let i=(0,rt.decodeJwt)(r),o=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.preferred_username,email:i.email,image:i.picture,emailVerified:!1,...o},data:i}}});var it=require("@better-fetch/fetch");var nt=e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),A({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:async({code:t,codeVerifier:r,redirectURI:i})=>b({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||i,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await(0,it.betterFetch)("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(i)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...o},data:r}}});var st=require("@better-fetch/fetch");var at=e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:async({state:r,scopes:i,codeVerifier:o,redirectURI:n})=>{let s=i||["account_info.read"];return e.scope&&s.push(...e.scope),await A({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:s,state:r,redirectURI:n,codeVerifier:o})},validateAuthorizationCode:async({code:r,codeVerifier:i,redirectURI:o})=>await b({code:r,codeVerifier:i,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:i,error:o}=await(0,st.betterFetch)("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(i);return{user:{id:i.account_id,name:i.name?.display_name,email:i.email,emailVerified:i.email_verified||!1,image:i.profile_photo_url,...n},data:i}}}};var ct=require("@better-fetch/fetch");var dt=e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:async({state:i,scopes:o,redirectURI:n})=>{let s=o||["profile","email","openid"];return e.scope&&s.push(...e.scope),await A({id:"linkedin",options:e,authorizationEndpoint:t,scopes:s,state:i,redirectURI:n})},validateAuthorizationCode:async({code:i,redirectURI:o})=>await b({code:i,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:r}),async getUserInfo(i){let{data:o,error:n}=await(0,ct.betterFetch)("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${i.accessToken}`}});if(n)return null;let s=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.name,email:o.email,emailVerified:o.email_verified||!1,image:o.picture,...s},data:o}}}};var lt=require("@better-fetch/fetch");var be=(e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),Qt=e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:be(`${t}/oauth/authorize`),tokenEndpoint:be(`${t}/oauth/token`),userinfoEndpoint:be(`${t}/api/v4/user`)}},ut=e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:i}=Qt(e.issuer),o="gitlab";return{id:o,name:"Gitlab",createAuthorizationURL:async({state:s,scopes:c,codeVerifier:a,redirectURI:d})=>{let l=c||["read_user"];return e.scope&&l.push(...e.scope),await A({id:o,options:e,authorizationEndpoint:t,scopes:l,state:s,redirectURI:d,codeVerifier:a})},validateAuthorizationCode:async({code:s,redirectURI:c,codeVerifier:a})=>b({code:s,redirectURI:e.redirectURI||c,options:e,codeVerifier:a,tokenEndpoint:r}),async getUserInfo(s){if(e.getUserInfo)return e.getUserInfo(s);let{data:c,error:a}=await(0,lt.betterFetch)(i,{headers:{authorization:`Bearer ${s.accessToken}`}});if(a||c.state!=="active"||c.locked)return null;let d=await e.mapProfileToUser?.(c);return{user:{id:c.id.toString(),name:c.name??c.username,email:c.email,image:c.avatar_url,emailVerified:!0,...d},data:c}}}};var ye=require("@better-fetch/fetch");var pt=e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:i}){let o=r||["identity"];return e.scope&&o.push(...e.scope),A({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:o,state:t,redirectURI:i,duration:e.duration})},validateAuthorizationCode:async({code:t,redirectURI:r})=>{let i=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),o={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:n,error:s}=await(0,ye.betterFetch)("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:o,body:i.toString()});if(s)throw s;return re(n)},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:i}=await(0,ye.betterFetch)("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(i)return null;let o=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...o},data:r}}});var mt=require("zod"),Kt={apple:Be,discord:ze,facebook:Fe,github:He,microsoft:Je,google:Ze,spotify:Xe,twitch:ot,twitter:nt,dropbox:at,linkedin:dt,gitlab:ut,reddit:pt},Ae=Object.keys(Kt),ft=mt.z.enum(Ae,{description:"OAuth2 provider to use"});var I=require("zod");var G=require("better-call");var C=require("better-call");var M=require("zod");function gt(e){try{return JSON.parse(e)}catch{return null}}var u={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};var ht=require("@better-auth/utils/hmac"),wt=require("@better-auth/utils/base64"),bt=require("@better-auth/utils/binary"),yt=()=>f("/get-session",{method:"GET",query:M.z.optional(M.z.object({disableCookieCache:M.z.boolean({description:"Disable cookie cache and fetch session from database"}).or(M.z.string().transform(e=>e==="true")).optional(),disableRefresh:M.z.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),i=r?gt(bt.binary.decode(wt.base64.decode(r))):null;if(i&&!await(0,ht.createHMAC)("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(i.session),i.signature))return _(e),e.json(null);let o=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(i?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let l=i.session;if(i.expiresAt<Date.now()||l.session.expiresAt<new Date){let w=e.context.authCookies.sessionData.name;e.setCookie(w,"",{maxAge:0})}else return e.json(l)}let n=await e.context.internalAdapter.findSession(t);if(e.context.session=n,!n||n.session.expiresAt<new Date)return _(e),n&&await e.context.internalAdapter.deleteSession(n.session.token),e.json(null);if(o||e.query?.disableRefresh)return e.json(n);let s=e.context.sessionConfig.expiresIn,c=e.context.sessionConfig.updateAge;if(n.session.expiresAt.valueOf()-s*1e3+c*1e3<=Date.now()){let l=await e.context.internalAdapter.updateSession(n.session.token,{expiresAt:V(e.context.sessionConfig.expiresIn,"sec")});if(!l)return _(e),e.json(null,{status:401});let g=(l.expiresAt.valueOf()-Date.now())/1e3;return await T(e,{session:l,user:n.user},!1,{maxAge:g}),e.json({session:l,user:n.user})}return await me(e,n),e.json(n)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new C.APIError("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION})}}),q=async(e,t)=>{if(e.context.session)return e.context.session;let r=await yt()({...e,_flag:"json",headers:e.headers,query:t}).catch(i=>null);return e.context.session=r,r},S=j(async e=>{let t=await q(e);if(!t?.session)throw new C.APIError("UNAUTHORIZED");return{session:t}}),Gi=j(async e=>{let t=await q(e);if(!t?.session)throw new C.APIError("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,i=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-i<r*1e3))throw new C.APIError("FORBIDDEN",{message:"Session is not fresh"});return{session:t}});var Jt=f("/revoke-session",{method:"POST",body:M.z.object({token:M.z.string({description:"The token to revoke"})}),use:[S],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new C.APIError("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new C.APIError("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(i){throw e.context.logger.error(i&&typeof i=="object"&&"name"in i?i.name:"",i),new C.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Yt=f("/revoke-sessions",{method:"POST",use:[S],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new C.APIError("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Xt=f("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[S],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new C.APIError("UNAUTHORIZED");let o=(await e.context.internalAdapter.listSessions(t.user.id)).filter(n=>n.expiresAt>new Date).filter(n=>n.token!==e.context.session.session.token);return await Promise.all(o.map(n=>e.context.internalAdapter.deleteSession(n.token))),e.json({status:!0})});var Rt=require("jose");var At=require("jose");async function kt(e,t,r=3600){return await new At.SignJWT(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}async function N(e,t,r){return await kt({email:t.toLowerCase(),updateTo:r},e)}async function er(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new G.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await N(e.context.secret,t.email),i=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:i,token:r},e.request)}var tr=f("/send-verification-email",{method:"POST",query:I.z.object({currentURL:I.z.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:I.z.object({email:I.z.string({description:"The email to send the verification email to"}).email(),callbackURL:I.z.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new G.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new G.APIError("BAD_REQUEST",{message:u.USER_NOT_FOUND});return await er(e,r.user),e.json({status:!0})}),rr=f("/verify-email",{method:"GET",query:I.z.object({token:I.z.string({description:"The token to verify the email"}),callbackURL:I.z.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(c){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${c}`):e.redirect(`${e.query.callbackURL}?error=${c}`):new G.APIError("UNAUTHORIZED",{message:c})}let{token:r}=e.query,i;try{i=await(0,Rt.jwtVerify)(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(c){return e.context.logger.error("Failed to verify email",c),t("invalid_token")}let n=I.z.object({email:I.z.string().email(),updateTo:I.z.string().optional()}).parse(i.payload),s=await e.context.internalAdapter.findUserByEmail(n.email);if(!s)return t("user_not_found");if(n.updateTo){let c=await q(e);if(!c){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(c.user.email!==n.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let a=await e.context.internalAdapter.updateUserByEmail(n.email,{email:n.updateTo,emailVerified:!1}),d=await N(e.context.secret,n.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:a,url:`${e.context.baseURL}/verify-email?token=${d}`,token:d},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(n.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await q(e)){let a=await e.context.internalAdapter.createSession(s.user.id,e.request);if(!a)throw new G.APIError("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await T(e,{session:a,user:s.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function ie(e,{userInfo:t,account:r,callbackURL:i}){let o=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(a=>{throw L.error(`Better auth was unable to query your database.
Error: `,a),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),n=o?.user,s=!n;if(o){let a=o.accounts.find(d=>d.providerId===r.providerId);if(a){let d=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([l,g])=>g!==void 0));Object.keys(d).length>0&&await e.context.internalAdapter.updateAccount(a.id,d)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return pe&&L.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:o.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(g){return L.error("Unable to link account",g),{error:"unable to link account",data:null}}}}else try{if(n=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(a=>a?.user),!t.emailVerified&&n&&e.context.options.emailVerification?.sendOnSignUp){let a=await N(e.context.secret,n.email),d=`${e.context.baseURL}/verify-email?token=${a}&callbackURL=${i}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:n,url:d,token:a},e.request)}}catch(a){return a instanceof F.APIError?{error:a.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!n)return{error:"unable to create user",data:null,isRegister:!1};let c=await e.context.internalAdapter.createSession(n.id,e.request);return c?{data:{session:c,user:n},error:null,isRegister:s}:{error:"unable to create session",data:null,isRegister:!1}}var or=f("/sign-in/social",{method:"POST",query:k.z.object({currentURL:k.z.string().optional()}).optional(),body:k.z.object({callbackURL:k.z.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:k.z.string().optional(),errorCallbackURL:k.z.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:ft,disableRedirect:k.z.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:k.z.optional(k.z.object({token:k.z.string({description:"ID token from the provider"}),nonce:k.z.string({description:"Nonce used to generate the token"}).optional(),accessToken:k.z.string({description:"Access token from the provider"}).optional(),refreshToken:k.z.string({description:"Refresh token from the provider"}).optional(),expiresAt:k.z.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(n=>n.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new U.APIError("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new U.APIError("NOT_FOUND",{message:u.ID_TOKEN_NOT_SUPPORTED});let{token:n,nonce:s}=e.body.idToken;if(!await t.verifyIdToken(n,s))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:u.INVALID_TOKEN});let a=await t.getUserInfo({idToken:n,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!a||!a?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:u.FAILED_TO_GET_USER_INFO});if(!a.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new U.APIError("UNAUTHORIZED",{message:u.USER_EMAIL_NOT_FOUND});let d=await ie(e,{userInfo:{email:a.user.email,id:a.user.id,name:a.user.name||"",image:a.user.image,emailVerified:a.user.emailVerified||!1},account:{providerId:t.id,accountId:a.user.id,accessToken:e.body.idToken.accessToken}});if(d.error)throw new U.APIError("UNAUTHORIZED",{message:d.error});return await T(e,d.data),e.json({token:d.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:i}=await oe(e),o=await t.createAuthorizationURL({state:i,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:o.toString(),redirect:!e.body.disableRedirect})}),ir=f("/sign-in/email",{method:"POST",body:k.z.object({email:k.z.string({description:"Email of the user"}),password:k.z.string({description:"Password of the user"}),callbackURL:k.z.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:k.z.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new U.APIError("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!k.z.string().email().safeParse(t).success)throw new U.APIError("BAD_REQUEST",{message:u.INVALID_EMAIL});let o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let n=o.accounts.find(d=>d.providerId==="credential");if(!n)throw e.context.logger.error("Credential account not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});let s=n?.password;if(!s)throw e.context.logger.error("Password not found",{email:t}),new U.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:s,password:r}))throw e.context.logger.error("Invalid password"),new U.APIError("UNAUTHORIZED",{message:u.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!o.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new U.APIError("UNAUTHORIZED",{message:u.EMAIL_NOT_VERIFIED});let d=await N(e.context.secret,o.user.email),l=`${e.context.baseURL}/verify-email?token=${d}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:o.user,url:l,token:d},e.request),e.context.logger.error("Email not verified",{email:t}),new U.APIError("FORBIDDEN",{message:u.EMAIL_NOT_VERIFIED})}let a=await e.context.internalAdapter.createSession(o.user.id,e.headers,e.body.rememberMe===!1);if(!a)throw e.context.logger.error("Failed to create session"),new U.APIError("UNAUTHORIZED",{message:u.FAILED_TO_CREATE_SESSION});return await T(e,{session:a,user:o.user},e.body.rememberMe===!1),e.json({user:{id:o.user.id,email:o.user.email,name:o.user.name,image:o.user.image,emailVerified:o.user.emailVerified,createdAt:o.user.createdAt,updatedAt:o.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});var W=require("zod");var ne=W.z.object({code:W.z.string().optional(),error:W.z.string().optional(),error_description:W.z.string().optional(),state:W.z.string().optional()}),nr=f("/callback/:id",{method:["GET","POST"],body:ne.optional(),query:ne.optional(),metadata:H},async e=>{let t;try{if(e.method==="GET")t=ne.parse(e.query);else if(e.method==="POST")t=ne.parse(e.body);else throw new Error("Unsupported method")}catch(v){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",v),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:i,state:o,error_description:n}=t;if(!o)throw e.context.logger.error("State not found",i),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${i||"no_code"}&error_description=${n}`);let s=e.context.socialProviders.find(v=>v.id===e.params.id);if(!s)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:c,callbackURL:a,link:d,errorURL:l,newUserURL:g}=await je(e),w;try{w=await s.validateAuthorizationCode({code:r,codeVerifier:c,redirectURI:`${e.context.baseURL}/callback/${s.id}`})}catch(v){throw e.context.logger.error("",v),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let h=await s.getUserInfo(w).then(v=>v?.user);function m(v){let P=l||a||`${e.context.baseURL}/error`;throw P.includes("?")?P=`${P}&error=${v}`:P=`${P}?error=${v}`,e.redirect(P)}if(!h)return e.context.logger.error("Unable to get user info"),m("unable_to_get_user_info");if(!h.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),m("email_not_found");if(!a)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(d){if(d.email!==h.email.toLowerCase())return m("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:d.userId,providerId:s.id,accountId:h.id}))return m("unable_to_link_account");let P;try{P=a.toString()}catch{P=a}throw e.redirect(P)}let y=await ie(e,{userInfo:{...h,email:h.email,name:h.name||h.email},account:{providerId:s.id,accountId:h.id,...w,scope:w.scopes?.join(",")},callbackURL:a});if(y.error)return e.context.logger.error(y.error.split(" ").join("_")),m(y.error.split(" ").join("_"));let{session:Re,user:se}=y.data;await T(e,{session:Re,user:se});let ae;try{ae=(y.isRegister&&g||a).toString()}catch{ae=y.isRegister&&g||a}throw e.redirect(ae)});var An=require("zod");var Et=require("better-call");var sr=f("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw _(e),new Et.APIError("BAD_REQUEST",{message:u.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),_(e),e.json({success:!0})});var O=require("zod");var Z=require("better-call");function Ut(e,t,r){let i=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([o,n])=>i.searchParams.set(o,n)),i.href}function ar(e,t,r){let i=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([o,n])=>i.searchParams.set(o,n)),i.href}var cr=f("/forget-password",{method:"POST",body:O.z.object({email:O.z.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:O.z.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new Z.APIError("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,i=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!i)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let o=60*60*1,n=V(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||o,"sec"),s=tt(24);await e.context.internalAdapter.createVerificationValue({value:i.user.id.toString(),identifier:`reset-password:${s}`,expiresAt:n});let c=`${e.context.baseURL}/reset-password/${s}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:i.user,url:c,token:s},e.request),e.json({status:!0})}),dr=f("/reset-password/:token",{method:"GET",query:O.z.object({callbackURL:O.z.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(Ut(e.context,r,{error:"INVALID_TOKEN"}));let i=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!i||i.expiresAt<new Date?e.redirect(Ut(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(ar(e.context,r,{token:t}))}),lr=f("/reset-password",{query:O.z.optional(O.z.object({token:O.z.string().optional(),currentURL:O.z.string().optional()})),method:"POST",body:O.z.object({newPassword:O.z.string({description:"The new password to set"}),token:O.z.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new Z.APIError("BAD_REQUEST",{message:u.INVALID_TOKEN});let{newPassword:r}=e.body,i=e.context.password?.config.minPasswordLength,o=e.context.password?.config.maxPasswordLength;if(r.length<i)throw new Z.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});if(r.length>o)throw new Z.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let n=`reset-password:${t}`,s=await e.context.internalAdapter.findVerificationValue(n);if(!s||s.expiresAt<new Date)throw new Z.APIError("BAD_REQUEST",{message:u.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(s.id);let c=s.value,a=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(c)).find(g=>g.providerId==="credential")?(await e.context.internalAdapter.updatePassword(c,a),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:c,providerId:"credential",password:a,accountId:c}),e.json({status:!0}))});var E=require("zod");var R=require("better-call");var p=require("zod"),ur=require("better-call"),Ln=p.z.object({id:p.z.string(),providerId:p.z.string(),accountId:p.z.string(),userId:p.z.string(),accessToken:p.z.string().nullish(),refreshToken:p.z.string().nullish(),idToken:p.z.string().nullish(),accessTokenExpiresAt:p.z.date().nullish(),refreshTokenExpiresAt:p.z.date().nullish(),scope:p.z.string().nullish(),password:p.z.string().nullish(),createdAt:p.z.date().default(()=>new Date),updatedAt:p.z.date().default(()=>new Date)}),Pn=p.z.object({id:p.z.string(),email:p.z.string().transform(e=>e.toLowerCase()),emailVerified:p.z.boolean().default(!1),name:p.z.string(),image:p.z.string().nullish(),createdAt:p.z.date().default(()=>new Date),updatedAt:p.z.date().default(()=>new Date)}),xn=p.z.object({id:p.z.string(),userId:p.z.string(),expiresAt:p.z.date(),createdAt:p.z.date().default(()=>new Date),updatedAt:p.z.date().default(()=>new Date),token:p.z.string(),ipAddress:p.z.string().nullish(),userAgent:p.z.string().nullish()}),Dn=p.z.object({id:p.z.string(),value:p.z.string(),createdAt:p.z.date().default(()=>new Date),updatedAt:p.z.date().default(()=>new Date),expiresAt:p.z.date(),identifier:p.z.string()});var mr=f("/change-password",{method:"POST",body:E.z.object({newPassword:E.z.string({description:"The new password to set"}),currentPassword:E.z.string({description:"The current password"}),revokeOtherSessions:E.z.boolean({description:"Revoke all other sessions"}).optional()}),use:[S],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:i}=e.body,o=e.context.session,n=e.context.password.config.minPasswordLength;if(t.length<n)throw e.context.logger.error("Password is too short"),new R.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let s=e.context.password.config.maxPasswordLength;if(t.length>s)throw e.context.logger.error("Password is too long"),new R.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(o.user.id)).find(w=>w.providerId==="credential"&&w.password);if(!a||!a.password)throw new R.APIError("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});let d=await e.context.password.hash(t);if(!await e.context.password.verify({hash:a.password,password:r}))throw new R.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(a.id,{password:d});let g=null;if(i){await e.context.internalAdapter.deleteSessions(o.user.id);let w=await e.context.internalAdapter.createSession(o.user.id,e.headers);if(!w)throw new R.APIError("INTERNAL_SERVER_ERROR",{message:u.FAILED_TO_GET_SESSION});await T(e,{session:w,user:o.user}),g=w.token}return e.json({token:g})}),fr=f("/set-password",{method:"POST",body:E.z.object({newPassword:E.z.string()}),metadata:{SERVER_ONLY:!0},use:[S]},async e=>{let{newPassword:t}=e.body,r=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new R.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_SHORT});let o=e.context.password.config.maxPasswordLength;if(t.length>o)throw e.context.logger.error("Password is too long"),new R.APIError("BAD_REQUEST",{message:u.PASSWORD_TOO_LONG});let s=(await e.context.internalAdapter.findAccounts(r.user.id)).find(a=>a.providerId==="credential"&&a.password),c=await e.context.password.hash(t);if(!s)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:c}),e.json({status:!0});throw new R.APIError("BAD_REQUEST",{message:"user already has a password"})}),gr=f("/delete-user",{method:"POST",use:[S],body:E.z.object({callbackURL:E.z.string().optional(),password:E.z.string().optional(),token:E.z.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new R.APIError("NOT_FOUND");let t=e.context.session;if(e.body.password){let n=(await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId==="credential"&&c.password);if(!n||!n.password)throw new R.APIError("BAD_REQUEST",{message:u.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:n.password,password:e.body.password}))throw new R.APIError("BAD_REQUEST",{message:u.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let o=t.session.createdAt.getTime(),n=e.context.options.session.freshAge;if(Date.now()-o>n)throw new R.APIError("BAD_REQUEST",{message:u.SESSION_EXPIRED})}if(e.body.token)return await Tt({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let o=X(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${o}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let n=`${e.context.baseURL}/delete-user/callback?token=${o}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:n,token:o},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),_(e);let i=e.context.options.user.deleteUser?.afterDelete;return i&&await i(t.user,e.request),e.json({success:!0,message:"User deleted"})}),Tt=f("/delete-user/callback",{method:"GET",query:E.z.object({token:E.z.string(),callbackURL:E.z.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new R.APIError("NOT_FOUND");let t=await q(e);if(!t)throw new R.APIError("NOT_FOUND",{message:u.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new R.APIError("NOT_FOUND",{message:u.INVALID_TOKEN});if(r.value!==t.user.id)throw new R.APIError("NOT_FOUND",{message:u.INVALID_TOKEN});let i=e.context.options.user.deleteUser?.beforeDelete;i&&await i(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),_(e);let o=e.context.options.user.deleteUser?.afterDelete;if(o&&await o(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),hr=f("/change-email",{method:"POST",query:E.z.object({currentURL:E.z.string().optional()}).optional(),body:E.z.object({newEmail:E.z.string({description:"The new email to set"}).email(),callbackURL:E.z.string({description:"The URL to redirect to after email verification"}).optional()}),use:[S],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new R.APIError("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new R.APIError("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new R.APIError("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let o=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new R.APIError("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await N(e.context.secret,e.context.session.user.email,e.body.newEmail),i=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:i,token:r},e.request),e.json({status:!0})});var wr=(e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,br=f("/error",{method:"GET",metadata:{...H,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(wr(t),{headers:{"Content-Type":"text/html"}})});var yr=f("/ok",{method:"GET",metadata:{...H,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));var Ar=require("zod");var kr=require("better-call");var Q=require("zod");var ke=require("better-call");var Rr=f("/list-accounts",{method:"GET",use:[S],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(i=>({id:i.id,provider:i.providerId})))}),Er=f("/link-social",{method:"POST",requireHeaders:!0,query:Q.z.object({currentURL:Q.z.string().optional()}).optional(),body:Q.z.object({callbackURL:Q.z.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:Q.z.enum(Ae,{description:"The OAuth2 provider to use"})}),use:[S],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(c=>c.providerId===e.body.provider))throw new ke.APIError("BAD_REQUEST",{message:u.SOCIAL_ACCOUNT_ALREADY_LINKED});let o=e.context.socialProviders.find(c=>c.id===e.body.provider);if(!o)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new ke.APIError("NOT_FOUND",{message:u.PROVIDER_NOT_FOUND});let n=await oe(e,{userId:t.user.id,email:t.user.email}),s=await o.createAuthorizationURL({state:n.state,codeVerifier:n.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${o.id}`});return e.json({url:s.toString(),redirect:!0})});var Gs=require("defu");var F=require("better-call");var Ur=e=>{let t={maximumSessions:5,...e},r=o=>o.includes("_multi-"),i={INVALID_SESSION_TOKEN:"Invalid session token"};return{id:"multi-session",endpoints:{listDeviceSessions:f("/multi-session/list-device-sessions",{method:"GET",requireHeaders:!0},async o=>{let n=o.headers?.get("cookie");if(!n)return o.json([]);let s=Object.fromEntries(Y(n)),c=(await Promise.all(Object.entries(s).filter(([l])=>r(l)).map(async([l])=>await o.getSignedCookie(l,o.context.secret)))).filter(l=>l!==void 0);if(!c.length)return o.json([]);let d=(await o.context.internalAdapter.findSessions(c)).filter(l=>l&&l.session.expiresAt>new Date);return o.json(d)}),setActiveSession:f("/multi-session/set-active",{method:"POST",body:ee.z.object({sessionToken:ee.z.string({description:"The session token to set as active"})}),requireHeaders:!0,use:[S],metadata:{openapi:{description:"Set the active session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{$ref:"#/components/schemas/Session"}}}}}}}}}},async o=>{let n=o.body.sessionToken,s=`${o.context.authCookies.sessionToken.name}_multi-${n}`;if(!await o.getSignedCookie(s,o.context.secret))throw new F.APIError("UNAUTHORIZED",{message:i.INVALID_SESSION_TOKEN});let a=await o.context.internalAdapter.findSession(n);if(!a||a.session.expiresAt<new Date)throw o.setCookie(s,"",{...o.context.authCookies.sessionToken.options,maxAge:0}),new F.APIError("UNAUTHORIZED",{message:i.INVALID_SESSION_TOKEN});return await T(o,a),o.json(a)}),revokeDeviceSession:f("/multi-session/revoke",{method:"POST",body:ee.z.object({sessionToken:ee.z.string({description:"The session token to revoke"})}),requireHeaders:!0,use:[S],metadata:{openapi:{description:"Revoke a device session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async o=>{let n=o.body.sessionToken,s=`${o.context.authCookies.sessionToken.name}_multi-${n}`;if(!await o.getSignedCookie(s,o.context.secret))throw new F.APIError("UNAUTHORIZED",{message:i.INVALID_SESSION_TOKEN});if(await o.context.internalAdapter.deleteSession(n),o.setCookie(s,"",{...o.context.authCookies.sessionToken.options,maxAge:0}),!(o.context.session?.session.token===n))return o.json({status:!0});let d=o.headers?.get("cookie");if(d){let l=Object.fromEntries(Y(d)),g=(await Promise.all(Object.entries(l).filter(([h])=>r(h)).map(async([h])=>await o.getSignedCookie(h,o.context.secret)))).filter(h=>h!==void 0),w=o.context.internalAdapter;if(g.length>0){let m=(await w.findSessions(g)).filter(y=>y&&y.session.expiresAt>new Date);if(m.length>0){let y=m[0];await T(o,y)}else _(o)}else _(o)}else _(o);return o.json({status:!0})})},hooks:{after:[{matcher:()=>!0,handler:j(async o=>{let n=o.responseHeader.get("set-cookie");if(!n)return;let s=ve(n),c=o.context.authCookies.sessionToken,a=s.get(c.name)?.value;if(!a)return;let d=Y(o.headers?.get("cookie")||""),l=a.split(".")[0];if(!l)return;let g=`${c.name}_multi-${l}`;s.get(g)||d.get(g)||Object.keys(Object.fromEntries(d)).filter(r).length+(n.includes("session_token")?1:0)>t.maximumSessions||await o.setSignedCookie(g,l,o.context.secret,c.options)})},{matcher:o=>o.path==="/sign-out",handler:j(async o=>{let n=o.headers?.get("cookie");if(!n)return;let s=Object.fromEntries(Y(n)),c=Object.keys(s).map(a=>r(a)?(o.setCookie(a,"",{maxAge:0}),a.split("_multi-")[1]):null).filter(a=>a!==null);await o.context.internalAdapter.deleteSessions(c)})}]},$ERROR_CODES:i}};0&&(module.exports={multiSession});
