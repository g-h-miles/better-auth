var Tt=Object.defineProperty;var s=(e,t)=>Tt(e,"name",{value:t,configurable:!0});import{APIError as G,createRouter as Ir,getCookie as Lr,getSignedCookie as xr,setCookie as Pr,setSignedCookie as Dr}from"better-call";import{APIError as xt}from"better-call";import{createEndpointCreator as Ot,createMiddleware as Ae,createMiddlewareCreator as St}from"better-call";var ke=Ae(async()=>({})),J=St({use:[ke,Ae(async()=>({}))]}),w=Ot({use:[ke]});function pe(e){return e==="-"||e==="^"||e==="$"||e==="+"||e==="."||e==="("||e===")"||e==="|"||e==="["||e==="]"||e==="{"||e==="}"||e==="*"||e==="?"||e==="\\"?`\\${e}`:e}s(pe,"escapeRegExpChar");function vt(e){let t="";for(let r=0;r<e.length;r++)t+=pe(e[r]);return t}s(vt,"escapeRegExpString");function Re(e,t=!0){if(Array.isArray(e))return`(?:${e.map(p=>`^${Re(p,t)}$`).join("|")})`;let r="",o="",n=".";t===!0?(r="/",o="[/\\\\]",n="[^/\\\\]"):t&&(r=t,o=vt(r),o.length>1?(o=`(?:${o})`,n=`((?!${o}).)`):n=`[^${o}]`);let i=t?`${o}+?`:"",a=t?`${o}*?`:"",d=t?e.split(r):[e],c="";for(let l=0;l<d.length;l++){let p=d[l],y=d[l+1],g="";if(!(!p&&l>0)){if(t&&(l===d.length-1?g=a:y!=="**"?g=i:g=""),t&&p==="**"){g&&(c+=l===0?"":g,c+=`(?:${n}*?${g})*?`);continue}for(let u=0;u<p.length;u++){let A=p[u];A==="\\"?u<p.length-1&&(c+=pe(p[u+1]),u++):A==="?"?c+=n:A==="*"?c+=`${n}*?`:c+=pe(A)}c+=g}}return c}s(Re,"transform");function It(e,t){if(typeof t!="string")throw new TypeError(`Sample must be a string, but ${typeof t} given`);return e.test(t)}s(It,"isMatch");function ie(e,t){if(typeof e!="string"&&!Array.isArray(e))throw new TypeError(`The first argument must be a single pattern string or an array of patterns, but ${typeof e} given`);if((typeof t=="string"||typeof t=="boolean")&&(t={separator:t}),arguments.length===2&&!(typeof t>"u"||typeof t=="object"&&t!==null&&!Array.isArray(t)))throw new TypeError(`The second argument must be an options object or a string/boolean separator, but ${typeof t} given`);if(t=t||{},t.separator==="\\")throw new Error("\\ is not a valid separator because it is used for escaping. Try setting the separator to `true` instead");let r=Re(e,t.separator),o=new RegExp(`^${r}$`,t.flags),n=It.bind(null,o);return n.options=t,n.pattern=e,n.regexp=o,n}s(ie,"wildcardMatch");var ne=Object.create(null),Y=s(e=>globalThis.process?.env||globalThis.Deno?.env.toObject()||globalThis.__env__||(e?ne:globalThis),"_getEnv"),Ee=new Proxy(ne,{get(e,t){return Y()[t]??ne[t]},has(e,t){let r=Y();return t in r||t in ne},set(e,t,r){let o=Y(!0);return o[t]=r,!0},deleteProperty(e,t){if(!t)return!1;let r=Y(!0);return delete r[t],!0},ownKeys(){let e=Y(!0);return Object.keys(e)}});function Lt(e){return e?e!=="false":!1}s(Lt,"toBoolean");var me=typeof process<"u"&&process.env&&process.env.NODE_ENV||"";var se=me==="dev"||me==="development",Ue=me==="test"||Lt(Ee.TEST);var F=class extends Error{static{s(this,"BetterAuthError")}constructor(t,r){super(t),this.name="BetterAuthError",this.message=t,this.cause=r,this.stack=""}};function _e(e){try{return new URL(e).origin}catch{return null}}s(_e,"getOrigin");function Te(e){return e.includes("://")?new URL(e).host:e}s(Te,"getHost");var Oe=J(async e=>{if(e.request?.method!=="POST")return;let{body:t,query:r,context:o}=e,n=e.headers?.get("origin")||e.headers?.get("referer")||"",i=t?.callbackURL||r?.callbackURL,a=t?.redirectTo,d=r?.currentURL,c=t?.errorCallbackURL,l=t?.newUserCallbackURL,p=o.trustedOrigins,y=e.headers?.has("cookie"),g=s((A,E)=>A.startsWith("/")?!1:E.includes("*")?ie(E)(Te(A)):A.startsWith(E),"matchesPattern"),u=s((A,E)=>{if(!A)return;if(!p.some(q=>g(A,q)||A?.startsWith("/")&&E!=="origin"&&!A.includes(":")))throw e.context.logger.error(`Invalid ${E}: ${A}`),e.context.logger.info(`If it's a valid URL, please add ${A} to trustedOrigins in your auth config
`,`Current list of trustedOrigins: ${p}`),new xt("FORBIDDEN",{message:`Invalid ${E}`})},"validateURL");y&&!e.context.options.advanced?.disableCSRFCheck&&u(n,"origin"),i&&u(i,"callbackURL"),a&&u(a,"redirectURL"),d&&u(d,"currentURL"),c&&u(c,"errorCallbackURL"),l&&u(a,"newUserCallbackURL")});import{APIError as v}from"better-call";import{z as T}from"zod";var H=s((e,t="ms")=>new Date(Date.now()+(t==="sec"?e*1e3:e)),"getDate");import{base64Url as Pt}from"@better-auth/utils/base64";import{createHMAC as Dt}from"@better-auth/utils/hmac";async function fe(e,t){if(e.context.options.session?.cookieCache?.enabled){let o=Pt.encode(JSON.stringify({session:t,expiresAt:H(e.context.authCookies.sessionData.options.maxAge||60,"sec").getTime(),signature:await Dt("SHA-256","base64urlnopad").sign(e.context.secret,JSON.stringify(t))}),{padding:!1});if(o.length>4093)throw new F("Session data is too large to store in the cookie. Please disable session cookie caching or reduce the size of the session data");e.setCookie(e.context.authCookies.sessionData.name,o,e.context.authCookies.sessionData.options)}}s(fe,"setCookieCache");async function I(e,t,r,o){let n=e.context.authCookies.sessionToken.options,i=r?void 0:e.context.sessionConfig.expiresIn;await e.setSignedCookie(e.context.authCookies.sessionToken.name,t.session.token,e.context.secret,{...n,maxAge:i,...o}),r&&await e.setSignedCookie(e.context.authCookies.dontRememberToken.name,"true",e.context.secret,e.context.authCookies.dontRememberToken.options),await fe(e,t),e.context.setNewSession(t),e.context.options.secondaryStorage&&await e.context.secondaryStorage?.set(t.session.token,JSON.stringify({user:t.user,session:t.session}),Math.floor((new Date(t.session.expiresAt).getTime()-Date.now())/1e3))}s(I,"setSessionCookie");function j(e){e.setCookie(e.context.authCookies.sessionToken.name,"",{...e.context.authCookies.sessionToken.options,maxAge:0}),e.setCookie(e.context.authCookies.sessionData.name,"",{...e.context.authCookies.sessionData.options,maxAge:0}),e.setCookie(e.context.authCookies.dontRememberToken.name,"",{...e.context.authCookies.dontRememberToken.options,maxAge:0})}s(j,"deleteSessionCookie");import{betterFetch as Vt}from"@better-fetch/fetch";import{APIError as Bt}from"better-call";import{decodeJwt as Mt,decodeProtectedHeader as zt,importJWK as qt,jwtVerify as Ft}from"jose";import{createHash as Ct}from"@better-auth/utils/hash";import{base64Url as Nt}from"@better-auth/utils/base64";async function Se(e){let t=await Ct("SHA-256").digest(e);return Nt.encode(new Uint8Array(t),{padding:!1})}s(Se,"generateCodeChallenge");function ae(e){return{tokenType:e.token_type,accessToken:e.access_token,refreshToken:e.refresh_token,accessTokenExpiresAt:e.expires_in?H(e.expires_in,"sec"):void 0,scopes:e?.scope?typeof e.scope=="string"?e.scope.split(" "):e.scope:[],idToken:e.id_token}}s(ae,"getOAuth2Tokens");async function R({id:e,options:t,authorizationEndpoint:r,state:o,codeVerifier:n,scopes:i,claims:a,redirectURI:d,duration:c}){let l=new URL(r);if(l.searchParams.set("response_type","code"),l.searchParams.set("client_id",t.clientId),l.searchParams.set("state",o),l.searchParams.set("scope",i.join(" ")),l.searchParams.set("redirect_uri",t.redirectURI||d),n){let p=await Se(n);l.searchParams.set("code_challenge_method","S256"),l.searchParams.set("code_challenge",p)}if(a){let p=a.reduce((y,g)=>(y[g]=null,y),{});l.searchParams.set("claims",JSON.stringify({id_token:{email:null,email_verified:null,...p}}))}return c&&l.searchParams.set("duration",c),l}s(R,"createAuthorizationURL");import{betterFetch as jt}from"@better-fetch/fetch";import{jwtVerify as xo}from"jose";async function k({code:e,codeVerifier:t,redirectURI:r,options:o,tokenEndpoint:n,authentication:i}){let a=new URLSearchParams,d={"content-type":"application/x-www-form-urlencoded",accept:"application/json","user-agent":"better-auth"};if(a.set("grant_type","authorization_code"),a.set("code",e),t&&a.set("code_verifier",t),a.set("redirect_uri",r),i==="basic"){let y=btoa(`${o.clientId}:${o.clientSecret}`);d.authorization=`Basic ${y}`}else a.set("client_id",o.clientId),a.set("client_secret",o.clientSecret);let{data:c,error:l}=await jt(n,{method:"POST",body:a,headers:d});if(l)throw l;return ae(c)}s(k,"validateAuthorizationCode");import{z as B}from"zod";import{APIError as ve}from"better-call";import{createHash as Ko}from"@better-auth/utils/hash";import{xchacha20poly1305 as Yo}from"@noble/ciphers/chacha";import{bytesToHex as ei,hexToBytes as ti,utf8ToBytes as ri}from"@noble/ciphers/utils";import{managedNonce as ii}from"@noble/ciphers/webcrypto";import{scryptAsync as Bo}from"@noble/hashes/scrypt";import{getRandomValues as zo}from"uncrypto";import{hex as Fo}from"@better-auth/utils/hex";import{createRandomStringGenerator as $t}from"@better-auth/utils/random";var X=$t("a-z","0-9","A-Z","-_");async function ce(e,t){let r=e.body?.callbackURL||(e.query?.currentURL?_e(e.query?.currentURL):"")||e.context.options.baseURL;if(!r)throw new ve("BAD_REQUEST",{message:"callbackURL is required"});let o=X(128),n=X(32),i=JSON.stringify({callbackURL:r,codeVerifier:o,errorURL:e.body?.errorCallbackURL||e.query?.currentURL,newUserURL:e.body?.newUserCallbackURL,link:t,expiresAt:Date.now()+10*60*1e3}),a=new Date;a.setMinutes(a.getMinutes()+10);let d=await e.context.internalAdapter.createVerificationValue({value:i,identifier:n,expiresAt:a});if(!d)throw e.context.logger.error("Unable to create verification. Make sure the database adapter is properly working and there is a verification table in the database"),new ve("INTERNAL_SERVER_ERROR",{message:"Unable to create verification"});return{state:d.identifier,codeVerifier:o}}s(ce,"generateState");async function Ie(e){let t=e.query.state||e.body.state,r=await e.context.internalAdapter.findVerificationValue(t);if(!r)throw e.context.logger.error("State Mismatch. Verification not found",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);let o=B.object({callbackURL:B.string(),codeVerifier:B.string(),errorURL:B.string().optional(),newUserURL:B.string().optional(),expiresAt:B.number(),link:B.object({email:B.string(),userId:B.string()}).optional()}).parse(JSON.parse(r.value));if(o.errorURL||(o.errorURL=`${e.context.baseURL}/error`),o.expiresAt<Date.now())throw await e.context.internalAdapter.deleteVerificationValue(r.id),e.context.logger.error("State expired.",{state:t}),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);return await e.context.internalAdapter.deleteVerificationValue(r.id),o}s(Ie,"parseState");var Le=s(e=>{let t="https://appleid.apple.com/auth/token";return{id:"apple",name:"Apple",createAuthorizationURL({state:r,scopes:o,redirectURI:n}){let i=o||["email","name"];return e.scope&&i.push(...e.scope),new URL(`https://appleid.apple.com/auth/authorize?client_id=${e.clientId}&response_type=code&redirect_uri=${e.redirectURI||n}&scope=${i.join(" ")}&state=${r}&response_mode=form_post`)},validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:n})=>k({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async verifyIdToken(r,o){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(r,o);let n=zt(r),{kid:i,alg:a}=n;if(!i||!a)return!1;let d=await Ht(i),{payload:c}=await Ft(r,d,{algorithms:[a],issuer:"https://appleid.apple.com",audience:e.appBundleIdentifier||e.clientId,maxTokenAge:"1h"});return["email_verified","is_private_email"].forEach(l=>{c[l]!==void 0&&(c[l]=!!c[l])}),o&&c.nonce!==o?!1:!!c},async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);if(!r.idToken)return null;let o=Mt(r.idToken);if(!o)return null;let n=o.user?`${o.user.name.firstName} ${o.user.name.lastName}`:o.email,i=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:n,emailVerified:!1,email:o.email,...i},data:o}}}},"apple"),Ht=s(async e=>{let t="https://appleid.apple.com",r="/auth/keys",{data:o}=await Vt(`${t}${r}`);if(!o?.keys)throw new Bt("BAD_REQUEST",{message:"Keys not found"});let n=o.keys.find(i=>i.kid===e);if(!n)throw new Error(`JWK with kid ${e} not found`);return await qt(n,n.alg)},"getApplePublicKey");import{betterFetch as Gt}from"@better-fetch/fetch";var xe=s(e=>({id:"discord",name:"Discord",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identify","email"];return e.scope&&n.push(...e.scope),new URL(`https://discord.com/api/oauth2/authorize?scope=${n.join("+")}&response_type=code&client_id=${e.clientId}&redirect_uri=${encodeURIComponent(e.redirectURI||o)}&state=${t}&prompt=${e.prompt||"none"}`)},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://discord.com/api/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Gt("https://discord.com/api/users/@me",{headers:{authorization:`Bearer ${t.accessToken}`}});if(o)return null;if(r.avatar===null){let i=r.discriminator==="0"?Number(BigInt(r.id)>>BigInt(22))%6:parseInt(r.discriminator)%5;r.image_url=`https://cdn.discordapp.com/embed/avatars/${i}.png`}else{let i=r.avatar.startsWith("a_")?"gif":"png";r.image_url=`https://cdn.discordapp.com/avatars/${r.id}/${r.avatar}.${i}`}let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name||r.username||"",email:r.email,emailVerified:r.verified,image:r.image_url,...n},data:r}}}),"discord");import{betterFetch as Wt}from"@better-fetch/fetch";var Pe=s(e=>({id:"facebook",name:"Facebook",async createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["email","public_profile"];return e.scope&&n.push(...e.scope),await R({id:"facebook",options:e,authorizationEndpoint:"https://www.facebook.com/v21.0/dialog/oauth",scopes:n,state:t,redirectURI:o})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://graph.facebook.com/oauth/access_token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await Wt("https://graph.facebook.com/me?fields=id,name,email,picture",{auth:{type:"Bearer",token:t.accessToken}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.email,image:r.picture.data.url,emailVerified:r.email_verified,...n},data:r}}}),"facebook");import{betterFetch as De}from"@better-fetch/fetch";var Ce=s(e=>{let t="https://github.com/login/oauth/access_token";return{id:"github",name:"GitHub",createAuthorizationURL({state:r,scopes:o,codeVerifier:n,redirectURI:i}){let a=o||["user:email"];return e.scope&&a.push(...e.scope),R({id:"github",options:e,authorizationEndpoint:"https://github.com/login/oauth/authorize",scopes:a,state:r,redirectURI:i})},validateAuthorizationCode:s(async({code:r,redirectURI:o})=>k({code:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await De("https://api.github.com/user",{headers:{"User-Agent":"better-auth",authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=!1,{data:a}=await De("https://api.github.com/user/emails",{headers:{authorization:`Bearer ${r.accessToken}`,"User-Agent":"better-auth"}});a&&(o.email=(a.find(c=>c.primary)??a[0])?.email,i=a.find(c=>c.email===o.email)?.verified??!1);let d=await e.mapProfileToUser?.(o);return{user:{id:o.id.toString(),name:o.name||o.login,email:o.email,image:o.avatar_url,emailVerified:i,...d},data:o}}}},"github");var ge=["info","success","warn","error","debug"];function Qt(e,t){return ge.indexOf(t)<=ge.indexOf(e)}s(Qt,"shouldPublishLog");var $={reset:"\x1B[0m",bright:"\x1B[1m",dim:"\x1B[2m",underscore:"\x1B[4m",blink:"\x1B[5m",reverse:"\x1B[7m",hidden:"\x1B[8m",fg:{black:"\x1B[30m",red:"\x1B[31m",green:"\x1B[32m",yellow:"\x1B[33m",blue:"\x1B[34m",magenta:"\x1B[35m",cyan:"\x1B[36m",white:"\x1B[37m"},bg:{black:"\x1B[40m",red:"\x1B[41m",green:"\x1B[42m",yellow:"\x1B[43m",blue:"\x1B[44m",magenta:"\x1B[45m",cyan:"\x1B[46m",white:"\x1B[47m"}},Zt={info:$.fg.blue,success:$.fg.green,warn:$.fg.yellow,error:$.fg.red,debug:$.fg.magenta},Kt=s((e,t)=>{let r=new Date().toISOString();return`${$.dim}${r}${$.reset} ${Zt[e]}${e.toUpperCase()}${$.reset} ${$.bright}Better Auth${$.reset} ${t}`},"formatMessage"),Jt=s(e=>{let t=e?.disabled!==!0,r=e?.level??"error",o=s((n,i,a=[])=>{if(!t||!Qt(r,n))return;let d=Kt(n,i);if(!e||typeof e.log!="function"){n==="error"?console.error(d,...a):n==="warn"?console.warn(d,...a):console.log(d,...a);return}e.log(n==="success"?"info":n,d,...a)},"LogFunc");return Object.fromEntries(ge.map(n=>[n,(...[i,...a])=>o(n,i,a)]))},"createLogger"),P=Jt();import{betterFetch as Yt}from"@better-fetch/fetch";import{decodeJwt as Xt}from"jose";var Ne=s(e=>({id:"google",name:"Google",async createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){if(!e.clientId||!e.clientSecret)throw P.error("Client Id and Client Secret is required for Google. Make sure to provide them in the options."),new F("CLIENT_ID_AND_SECRET_REQUIRED");if(!o)throw new F("codeVerifier is required for Google");let i=r||["email","profile","openid"];e.scope&&i.push(...e.scope);let a=await R({id:"google",options:e,authorizationEndpoint:"https://accounts.google.com/o/oauth2/auth",scopes:i,state:t,codeVerifier:o,redirectURI:n});return e.accessType&&a.searchParams.set("access_type",e.accessType),e.prompt&&a.searchParams.set("prompt",e.prompt),a},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://oauth2.googleapis.com/token"}),"validateAuthorizationCode"),async verifyIdToken(t,r){if(e.disableIdTokenSignIn)return!1;if(e.verifyIdToken)return e.verifyIdToken(t,r);let o=`https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=${t}`,{data:n}=await Yt(o);return n?n.aud===e.clientId&&n.iss==="https://accounts.google.com":!1},async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);if(!t.idToken)return null;let r=Xt(t.idToken),o=await e.mapProfileToUser?.(r);return{user:{id:r.sub,name:r.name,email:r.email,image:r.picture,emailVerified:r.email_verified,...o},data:r}}}),"google");import{betterFetch as er}from"@better-fetch/fetch";import{decodeJwt as tr}from"jose";var je=s(e=>{let t=e.tenantId||"common",r=`https://login.microsoftonline.com/${t}/oauth2/v2.0/authorize`,o=`https://login.microsoftonline.com/${t}/oauth2/v2.0/token`;return{id:"microsoft",name:"Microsoft EntraID",createAuthorizationURL(n){let i=n.scopes||["openid","profile","email","User.Read"];return e.scope&&i.push(...e.scope),R({id:"microsoft",options:e,authorizationEndpoint:r,state:n.state,codeVerifier:n.codeVerifier,scopes:i,redirectURI:n.redirectURI})},validateAuthorizationCode({code:n,codeVerifier:i,redirectURI:a}){return k({code:n,codeVerifier:i,redirectURI:e.redirectURI||a,options:e,tokenEndpoint:o})},async getUserInfo(n){if(e.getUserInfo)return e.getUserInfo(n);if(!n.idToken)return null;let i=tr(n.idToken),a=e.profilePhotoSize||48;await er(`https://graph.microsoft.com/v1.0/me/photos/${a}x${a}/$value`,{headers:{Authorization:`Bearer ${n.accessToken}`},async onResponse(c){if(!(e.disableProfilePhoto||!c.response.ok))try{let p=await c.response.clone().arrayBuffer(),y=Buffer.from(p).toString("base64");i.picture=`data:image/jpeg;base64, ${y}`}catch(l){P.error(l&&typeof l=="object"&&"name"in l?l.name:"",l)}}});let d=await e.mapProfileToUser?.(i);return{user:{id:i.sub,name:i.name,email:i.email,image:i.picture,emailVerified:!0,...d},data:i}}}},"microsoft");import{betterFetch as rr}from"@better-fetch/fetch";var $e=s(e=>({id:"spotify",name:"Spotify",createAuthorizationURL({state:t,scopes:r,codeVerifier:o,redirectURI:n}){let i=r||["user-read-email"];return e.scope&&i.push(...e.scope),R({id:"spotify",options:e,authorizationEndpoint:"https://accounts.spotify.com/authorize",scopes:i,state:t,codeVerifier:o,redirectURI:n})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://accounts.spotify.com/api/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await rr("https://api.spotify.com/v1/me",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.display_name,email:r.email,image:r.images[0]?.url,emailVerified:!1,...n},data:r}}}),"spotify");var Z={isAction:!1};import{createRandomStringGenerator as or}from"@better-auth/utils/random";var Ve=s(e=>or("a-z","A-Z","0-9")(e||32),"generateId");import{decodeJwt as ir}from"jose";var Be=s(e=>({id:"twitch",name:"Twitch",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["user:read:email","openid"];return e.scope&&n.push(...e.scope),R({id:"twitch",redirectURI:o,options:e,authorizationEndpoint:"https://id.twitch.tv/oauth2/authorize",scopes:n,state:t,claims:e.claims||["email","email_verified","preferred_username","picture"]})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>k({code:t,redirectURI:e.redirectURI||r,options:e,tokenEndpoint:"https://id.twitch.tv/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let r=t.idToken;if(!r)return P.error("No idToken found in token"),null;let o=ir(r),n=await e.mapProfileToUser?.(o);return{user:{id:o.sub,name:o.preferred_username,email:o.email,image:o.picture,emailVerified:!1,...n},data:o}}}),"twitch");import{betterFetch as nr}from"@better-fetch/fetch";var Me=s(e=>({id:"twitter",name:"Twitter",createAuthorizationURL(t){let r=t.scopes||["users.read","tweet.read","offline.access"];return e.scope&&r.push(...e.scope),R({id:"twitter",options:e,authorizationEndpoint:"https://x.com/i/oauth2/authorize",scopes:r,state:t.state,codeVerifier:t.codeVerifier,redirectURI:t.redirectURI})},validateAuthorizationCode:s(async({code:t,codeVerifier:r,redirectURI:o})=>k({code:t,codeVerifier:r,authentication:"basic",redirectURI:e.redirectURI||o,options:e,tokenEndpoint:"https://api.x.com/2/oauth2/token"}),"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await nr("https://api.x.com/2/users/me?user.fields=profile_image_url",{method:"GET",headers:{Authorization:`Bearer ${t.accessToken}`}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.data.id,name:r.data.name,email:r.data.username||null,image:r.data.profile_image_url,emailVerified:r.data.verified||!1,...n},data:r}}}),"twitter");import{betterFetch as sr}from"@better-fetch/fetch";var ze=s(e=>{let t="https://api.dropboxapi.com/oauth2/token";return{id:"dropbox",name:"Dropbox",createAuthorizationURL:s(async({state:r,scopes:o,codeVerifier:n,redirectURI:i})=>{let a=o||["account_info.read"];return e.scope&&a.push(...e.scope),await R({id:"dropbox",options:e,authorizationEndpoint:"https://www.dropbox.com/oauth2/authorize",scopes:a,state:r,redirectURI:i,codeVerifier:n})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:r,codeVerifier:o,redirectURI:n})=>await k({code:r,codeVerifier:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:t}),"validateAuthorizationCode"),async getUserInfo(r){if(e.getUserInfo)return e.getUserInfo(r);let{data:o,error:n}=await sr("https://api.dropboxapi.com/2/users/get_current_account",{method:"POST",headers:{Authorization:`Bearer ${r.accessToken}`}});if(n)return null;let i=await e.mapProfileToUser?.(o);return{user:{id:o.account_id,name:o.name?.display_name,email:o.email,emailVerified:o.email_verified||!1,image:o.profile_photo_url,...i},data:o}}}},"dropbox");import{betterFetch as ar}from"@better-fetch/fetch";var qe=s(e=>{let t="https://www.linkedin.com/oauth/v2/authorization",r="https://www.linkedin.com/oauth/v2/accessToken";return{id:"linkedin",name:"Linkedin",createAuthorizationURL:s(async({state:o,scopes:n,redirectURI:i})=>{let a=n||["profile","email","openid"];return e.scope&&a.push(...e.scope),await R({id:"linkedin",options:e,authorizationEndpoint:t,scopes:a,state:o,redirectURI:i})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:o,redirectURI:n})=>await k({code:o,redirectURI:e.redirectURI||n,options:e,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(o){let{data:n,error:i}=await ar("https://api.linkedin.com/v2/userinfo",{method:"GET",headers:{Authorization:`Bearer ${o.accessToken}`}});if(i)return null;let a=await e.mapProfileToUser?.(n);return{user:{id:n.sub,name:n.name,email:n.email,emailVerified:n.email_verified||!1,image:n.picture,...a},data:n}}}},"linkedin");import{betterFetch as cr}from"@better-fetch/fetch";var he=s((e="")=>e.split("://").map(t=>t.replace(/\/{2,}/g,"/")).join("://"),"cleanDoubleSlashes"),dr=s(e=>{let t=e||"https://gitlab.com";return{authorizationEndpoint:he(`${t}/oauth/authorize`),tokenEndpoint:he(`${t}/oauth/token`),userinfoEndpoint:he(`${t}/api/v4/user`)}},"issuerToEndpoints"),Fe=s(e=>{let{authorizationEndpoint:t,tokenEndpoint:r,userinfoEndpoint:o}=dr(e.issuer),n="gitlab";return{id:n,name:"Gitlab",createAuthorizationURL:s(async({state:a,scopes:d,codeVerifier:c,redirectURI:l})=>{let p=d||["read_user"];return e.scope&&p.push(...e.scope),await R({id:n,options:e,authorizationEndpoint:t,scopes:p,state:a,redirectURI:l,codeVerifier:c})},"createAuthorizationURL"),validateAuthorizationCode:s(async({code:a,redirectURI:d,codeVerifier:c})=>k({code:a,redirectURI:e.redirectURI||d,options:e,codeVerifier:c,tokenEndpoint:r}),"validateAuthorizationCode"),async getUserInfo(a){if(e.getUserInfo)return e.getUserInfo(a);let{data:d,error:c}=await cr(o,{headers:{authorization:`Bearer ${a.accessToken}`}});if(c||d.state!=="active"||d.locked)return null;let l=await e.mapProfileToUser?.(d);return{user:{id:d.id.toString(),name:d.name??d.username,email:d.email,image:d.avatar_url,emailVerified:!0,...l},data:d}}}},"gitlab");import{betterFetch as He}from"@better-fetch/fetch";var Ge=s(e=>({id:"reddit",name:"Reddit",createAuthorizationURL({state:t,scopes:r,redirectURI:o}){let n=r||["identity"];return e.scope&&n.push(...e.scope),R({id:"reddit",options:e,authorizationEndpoint:"https://www.reddit.com/api/v1/authorize",scopes:n,state:t,redirectURI:o,duration:e.duration})},validateAuthorizationCode:s(async({code:t,redirectURI:r})=>{let o=new URLSearchParams({grant_type:"authorization_code",code:t,redirect_uri:e.redirectURI||r}),n={"content-type":"application/x-www-form-urlencoded",accept:"text/plain","user-agent":"better-auth",Authorization:`Basic ${Buffer.from(`${e.clientId}:${e.clientSecret}`).toString("base64")}`},{data:i,error:a}=await He("https://www.reddit.com/api/v1/access_token",{method:"POST",headers:n,body:o.toString()});if(a)throw a;return ae(i)},"validateAuthorizationCode"),async getUserInfo(t){if(e.getUserInfo)return e.getUserInfo(t);let{data:r,error:o}=await He("https://oauth.reddit.com/api/v1/me",{headers:{Authorization:`Bearer ${t.accessToken}`,"User-Agent":"better-auth"}});if(o)return null;let n=await e.mapProfileToUser?.(r);return{user:{id:r.id,name:r.name,email:r.oauth_client_id,emailVerified:r.has_verified_email,image:r.icon_img?.split("?")[0],...n},data:r}}}),"reddit");import{z as lr}from"zod";var ur={apple:Le,discord:xe,facebook:Pe,github:Ce,microsoft:je,google:Ne,spotify:$e,twitch:Be,twitter:Me,dropbox:ze,linkedin:qe,gitlab:Fe,reddit:Ge},we=Object.keys(ur),We=lr.enum(we,{description:"OAuth2 provider to use"});import{z as N}from"zod";import{APIError as ee}from"better-call";import{APIError as M}from"better-call";import{z as W}from"zod";function Qe(e){try{return JSON.parse(e)}catch{return null}}s(Qe,"safeJSONParse");var f={USER_NOT_FOUND:"User not found",FAILED_TO_CREATE_USER:"Failed to create user",FAILED_TO_CREATE_SESSION:"Failed to create session",FAILED_TO_UPDATE_USER:"Failed to update user",FAILED_TO_GET_SESSION:"Failed to get session",INVALID_PASSWORD:"Invalid password",INVALID_EMAIL:"Invalid email",INVALID_EMAIL_OR_PASSWORD:"Invalid email or password",SOCIAL_ACCOUNT_ALREADY_LINKED:"Social account already linked",PROVIDER_NOT_FOUND:"Provider not found",INVALID_TOKEN:"invalid token",ID_TOKEN_NOT_SUPPORTED:"id_token not supported",FAILED_TO_GET_USER_INFO:"Failed to get user info",USER_EMAIL_NOT_FOUND:"User email not found",EMAIL_NOT_VERIFIED:"Email not verified",PASSWORD_TOO_SHORT:"Password too short",PASSWORD_TOO_LONG:"Password too long",USER_ALREADY_EXISTS:"User already exists",EMAIL_CAN_NOT_BE_UPDATED:"Email can not be updated",CREDENTIAL_ACCOUNT_NOT_FOUND:"Credential account not found",SESSION_EXPIRED:"Session expired. Re-authenticate to perform this action."};import{createHMAC as pr}from"@better-auth/utils/hmac";import{base64 as mr}from"@better-auth/utils/base64";import{binary as fr}from"@better-auth/utils/binary";var be=s(()=>w("/get-session",{method:"GET",query:W.optional(W.object({disableCookieCache:W.boolean({description:"Disable cookie cache and fetch session from database"}).or(W.string().transform(e=>e==="true")).optional(),disableRefresh:W.boolean({description:"Disable session refresh. Useful for checking session status, without updating the session"}).optional()})),requireHeaders:!0,metadata:{openapi:{description:"Get the current session",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}},user:{type:"object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{try{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)return e.json(null);let r=e.getCookie(e.context.authCookies.sessionData.name),o=r?Qe(fr.decode(mr.decode(r))):null;if(o&&!await pr("SHA-256","base64urlnopad").verify(e.context.secret,JSON.stringify(o.session),o.signature))return j(e),e.json(null);let n=await e.getSignedCookie(e.context.authCookies.dontRememberToken.name,e.context.secret);if(o?.session&&e.context.options.session?.cookieCache?.enabled&&!e.query?.disableCookieCache){let p=o.session;if(o.expiresAt<Date.now()||p.session.expiresAt<new Date){let g=e.context.authCookies.sessionData.name;e.setCookie(g,"",{maxAge:0})}else return e.json(p)}let i=await e.context.internalAdapter.findSession(t);if(e.context.session=i,!i||i.session.expiresAt<new Date)return j(e),i&&await e.context.internalAdapter.deleteSession(i.session.token),e.json(null);if(n||e.query?.disableRefresh)return e.json(i);let a=e.context.sessionConfig.expiresIn,d=e.context.sessionConfig.updateAge;if(i.session.expiresAt.valueOf()-a*1e3+d*1e3<=Date.now()){let p=await e.context.internalAdapter.updateSession(i.session.token,{expiresAt:H(e.context.sessionConfig.expiresIn,"sec")});if(!p)return j(e),e.json(null,{status:401});let y=(p.expiresAt.valueOf()-Date.now())/1e3;return await I(e,{session:p,user:i.user},!1,{maxAge:y}),e.json({session:p,user:i.user})}return await fe(e,i),e.json(i)}catch(t){throw e.context.logger.error("INTERNAL_SERVER_ERROR",t),new M("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION})}}),"getSession"),Q=s(async(e,t)=>{if(e.context.session)return e.context.session;let r=await be()({...e,_flag:"json",headers:e.headers,query:t}).catch(o=>null);return e.context.session=r,r},"getSessionFromCtx"),x=J(async e=>{let t=await Q(e);if(!t?.session)throw new M("UNAUTHORIZED");return{session:t}}),Ps=J(async e=>{let t=await Q(e);if(!t?.session)throw new M("UNAUTHORIZED");if(e.context.sessionConfig.freshAge===0)return{session:t};let r=e.context.sessionConfig.freshAge,o=t.session.updatedAt?.valueOf()||t.session.createdAt.valueOf();if(!(Date.now()-o<r*1e3))throw new M("FORBIDDEN",{message:"Session is not fresh"});return{session:t}}),Ze=s(()=>w("/list-sessions",{method:"GET",use:[x],requireHeaders:!0,metadata:{openapi:{description:"List all active sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{token:{type:"string"},userId:{type:"string"},expiresAt:{type:"string"}}}}}}}}}}},async e=>{let r=(await e.context.internalAdapter.listSessions(e.context.session.user.id)).filter(o=>o.expiresAt>new Date);return e.json(r)}),"listSessions"),Ke=w("/revoke-session",{method:"POST",body:W.object({token:W.string({description:"The token to revoke"})}),use:[x],requireHeaders:!0,metadata:{openapi:{description:"Revoke a single session",requestBody:{content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}},required:["token"]}}}}}}},async e=>{let t=e.body.token,r=await e.context.internalAdapter.findSession(t);if(!r)throw new M("BAD_REQUEST",{message:"Session not found"});if(r.session.userId!==e.context.session.user.id)throw new M("UNAUTHORIZED");try{await e.context.internalAdapter.deleteSession(t)}catch(o){throw e.context.logger.error(o&&typeof o=="object"&&"name"in o?o.name:"",o),new M("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Je=w("/revoke-sessions",{method:"POST",use:[x],requireHeaders:!0,metadata:{openapi:{description:"Revoke all sessions for the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}},required:["status"]}}}}}}}},async e=>{try{await e.context.internalAdapter.deleteSessions(e.context.session.user.id)}catch(t){throw e.context.logger.error(t&&typeof t=="object"&&"name"in t?t.name:"",t),new M("INTERNAL_SERVER_ERROR")}return e.json({status:!0})}),Ye=w("/revoke-other-sessions",{method:"POST",requireHeaders:!0,use:[x],metadata:{openapi:{description:"Revoke all other sessions for the user except the current one",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.context.session;if(!t.user)throw new M("UNAUTHORIZED");let n=(await e.context.internalAdapter.listSessions(t.user.id)).filter(i=>i.expiresAt>new Date).filter(i=>i.token!==e.context.session.session.token);return await Promise.all(n.map(i=>e.context.internalAdapter.deleteSession(i.token))),e.json({status:!0})});import{jwtVerify as hr}from"jose";import{SignJWT as gr}from"jose";async function Xe(e,t,r=3600){return await new gr(e).setProtectedHeader({alg:"HS256"}).setIssuedAt().setExpirationTime(Math.floor(Date.now()/1e3)+r).sign(new TextEncoder().encode(t))}s(Xe,"signJWT");async function V(e,t,r){return await Xe({email:t.toLowerCase(),updateTo:r},e)}s(V,"createEmailVerificationToken");async function wr(e,t){if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ee("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await V(e.context.secret,t.email),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification.sendVerificationEmail({user:t,url:o,token:r},e.request)}s(wr,"sendVerificationEmailFn");var et=w("/send-verification-email",{method:"POST",query:N.object({currentURL:N.string({description:"The URL to use for email verification callback"}).optional()}).optional(),body:N.object({email:N.string({description:"The email to send the verification email to"}).email(),callbackURL:N.string({description:"The URL to use for email verification callback"}).optional()}),metadata:{openapi:{description:"Send a verification email to the user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{email:{type:"string",description:"The email to send the verification email to"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["email"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailVerification?.sendVerificationEmail)throw e.context.logger.error("Verification email isn't enabled."),new ee("BAD_REQUEST",{message:"Verification email isn't enabled"});let{email:t}=e.body,r=await e.context.internalAdapter.findUserByEmail(t);if(!r)throw new ee("BAD_REQUEST",{message:f.USER_NOT_FOUND});return await wr(e,r.user),e.json({status:!0})}),tt=w("/verify-email",{method:"GET",query:N.object({token:N.string({description:"The token to verify the email"}),callbackURL:N.string({description:"The URL to redirect to after email verification"}).optional()}),metadata:{openapi:{description:"Verify the email of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}},required:["user","status"]}}}}}}}},async e=>{function t(d){throw e.query.callbackURL?e.query.callbackURL.includes("?")?e.redirect(`${e.query.callbackURL}&error=${d}`):e.redirect(`${e.query.callbackURL}?error=${d}`):new ee("UNAUTHORIZED",{message:d})}s(t,"redirectOnError");let{token:r}=e.query,o;try{o=await hr(r,new TextEncoder().encode(e.context.secret),{algorithms:["HS256"]})}catch(d){return e.context.logger.error("Failed to verify email",d),t("invalid_token")}let i=N.object({email:N.string().email(),updateTo:N.string().optional()}).parse(o.payload),a=await e.context.internalAdapter.findUserByEmail(i.email);if(!a)return t("user_not_found");if(i.updateTo){let d=await Q(e);if(!d){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}if(d.user.email!==i.email){if(e.query.callbackURL)throw e.redirect(`${e.query.callbackURL}?error=unauthorized`);return t("unauthorized")}let c=await e.context.internalAdapter.updateUserByEmail(i.email,{email:i.updateTo,emailVerified:!1}),l=await V(e.context.secret,i.updateTo);if(await e.context.options.emailVerification?.sendVerificationEmail?.({user:c,url:`${e.context.baseURL}/verify-email?token=${l}`,token:l},e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})}if(await e.context.internalAdapter.updateUserByEmail(i.email,{emailVerified:!0}),e.context.options.emailVerification?.autoSignInAfterVerification&&!await Q(e)){let c=await e.context.internalAdapter.createSession(a.user.id,e.request);if(!c)throw new ee("INTERNAL_SERVER_ERROR",{message:"Failed to create session"});await I(e,{session:c,user:a.user})}if(e.query.callbackURL)throw e.redirect(e.query.callbackURL);return e.json({status:!0})});async function de(e,{userInfo:t,account:r,callbackURL:o}){let n=await e.context.internalAdapter.findOAuthUser(t.email.toLowerCase(),r.accountId,r.providerId).catch(c=>{throw P.error(`Better auth was unable to query your database.
Error: `,c),e.redirect(`${e.context.baseURL}/error?error=internal_server_error`)}),i=n?.user,a=!i;if(n){let c=n.accounts.find(l=>l.providerId===r.providerId);if(c){let l=Object.fromEntries(Object.entries({accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}).filter(([p,y])=>y!==void 0));Object.keys(l).length>0&&await e.context.internalAdapter.updateAccount(c.id,l)}else{if(!e.context.options.account?.accountLinking?.trustedProviders?.includes(r.providerId)&&!t.emailVerified||e.context.options.account?.accountLinking?.enabled===!1)return se&&P.warn(`User already exist but account isn't linked to ${r.providerId}. To read more about how account linking works in Better Auth see https://www.better-auth.com/docs/concepts/users-accounts#account-linking.`),{error:"account not linked",data:null};try{await e.context.internalAdapter.linkAccount({providerId:r.providerId,accountId:t.id.toString(),userId:n.user.id,accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope})}catch(y){return P.error("Unable to link account",y),{error:"unable to link account",data:null}}}}else try{if(i=await e.context.internalAdapter.createOAuthUser({...t,email:t.email.toLowerCase(),id:void 0},{accessToken:r.accessToken,idToken:r.idToken,refreshToken:r.refreshToken,accessTokenExpiresAt:r.accessTokenExpiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt,scope:r.scope,providerId:r.providerId,accountId:t.id.toString()}).then(c=>c?.user),!t.emailVerified&&i&&e.context.options.emailVerification?.sendOnSignUp){let c=await V(e.context.secret,i.email),l=`${e.context.baseURL}/verify-email?token=${c}&callbackURL=${o}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:i,url:l,token:c},e.request)}}catch(c){return c instanceof rt?{error:c.message,data:null,isRegister:!1}:{error:"unable to create user",data:null,isRegister:!1}}if(!i)return{error:"unable to create user",data:null,isRegister:!1};let d=await e.context.internalAdapter.createSession(i.id,e.request);return d?{data:{session:d,user:i},error:null,isRegister:a}:{error:"unable to create session",data:null,isRegister:!1}}s(de,"handleOAuthUserInfo");var ot=w("/sign-in/social",{method:"POST",query:T.object({currentURL:T.string().optional()}).optional(),body:T.object({callbackURL:T.string({description:"Callback URL to redirect to after the user has signed in"}).optional(),newUserCallbackURL:T.string().optional(),errorCallbackURL:T.string({description:"Callback URL to redirect to if an error happens"}).optional(),provider:We,disableRedirect:T.boolean({description:"Disable automatic redirection to the provider. Useful for handling the redirection yourself"}).optional(),idToken:T.optional(T.object({token:T.string({description:"ID token from the provider"}),nonce:T.string({description:"Nonce used to generate the token"}).optional(),accessToken:T.string({description:"Access token from the provider"}).optional(),refreshToken:T.string({description:"Refresh token from the provider"}).optional(),expiresAt:T.number({description:"Expiry date of the token"}).optional()}),{description:"ID token from the provider to sign in the user with id token"})}),metadata:{openapi:{description:"Sign in with a social provider",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{session:{type:"string"},user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{let t=e.context.socialProviders.find(i=>i.id===e.body.provider);if(!t)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new v("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});if(e.body.idToken){if(!t.verifyIdToken)throw e.context.logger.error("Provider does not support id token verification",{provider:e.body.provider}),new v("NOT_FOUND",{message:f.ID_TOKEN_NOT_SUPPORTED});let{token:i,nonce:a}=e.body.idToken;if(!await t.verifyIdToken(i,a))throw e.context.logger.error("Invalid id token",{provider:e.body.provider}),new v("UNAUTHORIZED",{message:f.INVALID_TOKEN});let c=await t.getUserInfo({idToken:i,accessToken:e.body.idToken.accessToken,refreshToken:e.body.idToken.refreshToken});if(!c||!c?.user)throw e.context.logger.error("Failed to get user info",{provider:e.body.provider}),new v("UNAUTHORIZED",{message:f.FAILED_TO_GET_USER_INFO});if(!c.user.email)throw e.context.logger.error("User email not found",{provider:e.body.provider}),new v("UNAUTHORIZED",{message:f.USER_EMAIL_NOT_FOUND});let l=await de(e,{userInfo:{email:c.user.email,id:c.user.id,name:c.user.name||"",image:c.user.image,emailVerified:c.user.emailVerified||!1},account:{providerId:t.id,accountId:c.user.id,accessToken:e.body.idToken.accessToken}});if(l.error)throw new v("UNAUTHORIZED",{message:l.error});return await I(e,l.data),e.json({token:l.data.session.token,url:void 0,redirect:!1})}let{codeVerifier:r,state:o}=await ce(e),n=await t.createAuthorizationURL({state:o,codeVerifier:r,redirectURI:`${e.context.baseURL}/callback/${t.id}`});return e.json({url:n.toString(),redirect:!e.body.disableRedirect})}),it=w("/sign-in/email",{method:"POST",body:T.object({email:T.string({description:"Email of the user"}),password:T.string({description:"Password of the user"}),callbackURL:T.string({description:"Callback URL to use as a redirect for email verification"}).optional(),rememberMe:T.boolean({description:"If this is false, the session will not be remembered. Default is `true`."}).default(!0).optional()}),metadata:{openapi:{description:"Sign in with email and password",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},url:{type:"string"},redirect:{type:"boolean"}},required:["session","user","url","redirect"]}}}}}}}},async e=>{if(!e.context.options?.emailAndPassword?.enabled)throw e.context.logger.error("Email and password is not enabled. Make sure to enable it in the options on you `auth.ts` file. Check `https://better-auth.com/docs/authentication/email-password` for more!"),new v("BAD_REQUEST",{message:"Email and password is not enabled"});let{email:t,password:r}=e.body;if(!T.string().email().safeParse(t).success)throw new v("BAD_REQUEST",{message:f.INVALID_EMAIL});let n=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!n)throw await e.context.password.hash(r),e.context.logger.error("User not found",{email:t}),new v("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let i=n.accounts.find(l=>l.providerId==="credential");if(!i)throw e.context.logger.error("Credential account not found",{email:t}),new v("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});let a=i?.password;if(!a)throw e.context.logger.error("Password not found",{email:t}),new v("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(!await e.context.password.verify({hash:a,password:r}))throw e.context.logger.error("Invalid password"),new v("UNAUTHORIZED",{message:f.INVALID_EMAIL_OR_PASSWORD});if(e.context.options?.emailAndPassword?.requireEmailVerification&&!n.user.emailVerified){if(!e.context.options?.emailVerification?.sendVerificationEmail)throw new v("UNAUTHORIZED",{message:f.EMAIL_NOT_VERIFIED});let l=await V(e.context.secret,n.user.email),p=`${e.context.baseURL}/verify-email?token=${l}&callbackURL=${e.body.callbackURL||"/"}`;throw await e.context.options.emailVerification.sendVerificationEmail({user:n.user,url:p,token:l},e.request),e.context.logger.error("Email not verified",{email:t}),new v("FORBIDDEN",{message:f.EMAIL_NOT_VERIFIED})}let c=await e.context.internalAdapter.createSession(n.user.id,e.headers,e.body.rememberMe===!1);if(!c)throw e.context.logger.error("Failed to create session"),new v("UNAUTHORIZED",{message:f.FAILED_TO_CREATE_SESSION});return await I(e,{session:c,user:n.user},e.body.rememberMe===!1),e.json({user:{id:n.user.id,email:n.user.email,name:n.user.name,image:n.user.image,emailVerified:n.user.emailVerified,createdAt:n.user.createdAt,updatedAt:n.user.updatedAt},redirect:!!e.body.callbackURL,url:e.body.callbackURL})});import{z as te}from"zod";var le=te.object({code:te.string().optional(),error:te.string().optional(),error_description:te.string().optional(),state:te.string().optional()}),nt=w("/callback/:id",{method:["GET","POST"],body:le.optional(),query:le.optional(),metadata:Z},async e=>{let t;try{if(e.method==="GET")t=le.parse(e.query);else if(e.method==="POST")t=le.parse(e.body);else throw new Error("Unsupported method")}catch(m){throw e.context.logger.error("INVALID_CALLBACK_REQUEST",m),e.redirect(`${e.context.baseURL}/error?error=invalid_callback_request`)}let{code:r,error:o,state:n,error_description:i}=t;if(!n)throw e.context.logger.error("State not found",o),e.redirect(`${e.context.baseURL}/error?error=state_not_found`);if(!r)throw e.context.logger.error("Code not found"),e.redirect(`${e.context.baseURL}/error?error=${o||"no_code"}&error_description=${i}`);let a=e.context.socialProviders.find(m=>m.id===e.params.id);if(!a)throw e.context.logger.error("Oauth provider with id",e.params.id,"not found"),e.redirect(`${e.context.baseURL}/error?error=oauth_provider_not_found`);let{codeVerifier:d,callbackURL:c,link:l,errorURL:p,newUserURL:y}=await Ie(e),g;try{g=await a.validateAuthorizationCode({code:r,codeVerifier:d,redirectURI:`${e.context.baseURL}/callback/${a.id}`})}catch(m){throw e.context.logger.error("",m),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`)}let u=await a.getUserInfo(g).then(m=>m?.user);function A(m){let b=p||c||`${e.context.baseURL}/error`;throw b.includes("?")?b=`${b}&error=${m}`:b=`${b}?error=${m}`,e.redirect(b)}if(s(A,"redirectOnError"),!u)return e.context.logger.error("Unable to get user info"),A("unable_to_get_user_info");if(!u.email)return e.context.logger.error("Provider did not return email. This could be due to misconfiguration in the provider settings."),A("email_not_found");if(!c)throw e.context.logger.error("No callback URL found"),e.redirect(`${e.context.baseURL}/error?error=please_restart_the_process`);if(l){if(l.email!==u.email.toLowerCase())return A("email_doesn't_match");if(!await e.context.internalAdapter.createAccount({userId:l.userId,providerId:a.id,accountId:u.id}))return A("unable_to_link_account");let b;try{b=c.toString()}catch{b=c}throw e.redirect(b)}let E=await de(e,{userInfo:{...u,email:u.email,name:u.name||u.email},account:{providerId:a.id,accountId:u.id,...g,scope:g.scopes?.join(",")},callbackURL:c});if(E.error)return e.context.logger.error(E.error.split(" ").join("_")),A(E.error.split(" ").join("_"));let{session:L,user:q}=E.data;await I(e,{session:L,user:q});let C;try{C=(E.isRegister&&y||c).toString()}catch{C=E.isRegister&&y||c}throw e.redirect(C)});import"zod";import{APIError as br}from"better-call";var st=w("/sign-out",{method:"POST",requireHeaders:!0,metadata:{openapi:{description:"Sign out the current user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{success:{type:"boolean"}}}}}}}}}},async e=>{let t=await e.getSignedCookie(e.context.authCookies.sessionToken.name,e.context.secret);if(!t)throw j(e),new br("BAD_REQUEST",{message:f.FAILED_TO_GET_SESSION});return await e.context.internalAdapter.deleteSession(t),j(e),e.json({success:!0})});import{z as D}from"zod";import{APIError as re}from"better-call";function at(e,t,r){let o=t?new URL(t,e.baseURL):new URL(`${e.baseURL}/error`);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}s(at,"redirectError");function yr(e,t,r){let o=new URL(t,e.baseURL);return r&&Object.entries(r).forEach(([n,i])=>o.searchParams.set(n,i)),o.href}s(yr,"redirectCallback");var ct=w("/forget-password",{method:"POST",body:D.object({email:D.string({description:"The email address of the user to send a password reset email to"}).email(),redirectTo:D.string({description:"The URL to redirect the user to reset their password. If the token isn't valid or expired, it'll be redirected with a query parameter `?error=INVALID_TOKEN`. If the token is valid, it'll be redirected with a query parameter `?token=VALID_TOKEN"}).optional()}),metadata:{openapi:{description:"Send a password reset email to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.sendResetPassword)throw e.context.logger.error("Reset password isn't enabled.Please pass an emailAndPassword.sendResetPasswordToken function in your auth config!"),new re("BAD_REQUEST",{message:"Reset password isn't enabled"});let{email:t,redirectTo:r}=e.body,o=await e.context.internalAdapter.findUserByEmail(t,{includeAccounts:!0});if(!o)return e.context.logger.error("Reset Password: User not found",{email:t}),e.json({status:!1},{body:{status:!0}});let n=60*60*1,i=H(e.context.options.emailAndPassword.resetPasswordTokenExpiresIn||n,"sec"),a=Ve(24);await e.context.internalAdapter.createVerificationValue({value:o.user.id.toString(),identifier:`reset-password:${a}`,expiresAt:i});let d=`${e.context.baseURL}/reset-password/${a}?callbackURL=${r}`;return await e.context.options.emailAndPassword.sendResetPassword({user:o.user,url:d,token:a},e.request),e.json({status:!0})}),dt=w("/reset-password/:token",{method:"GET",query:D.object({callbackURL:D.string({description:"The URL to redirect the user to reset their password"})}),metadata:{openapi:{description:"Redirects the user to the callback URL with the token",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{token:{type:"string"}}}}}}}}}},async e=>{let{token:t}=e.params,{callbackURL:r}=e.query;if(!t||!r)throw e.redirect(at(e.context,r,{error:"INVALID_TOKEN"}));let o=await e.context.internalAdapter.findVerificationValue(`reset-password:${t}`);throw!o||o.expiresAt<new Date?e.redirect(at(e.context,r,{error:"INVALID_TOKEN"})):e.redirect(yr(e.context,r,{token:t}))}),lt=w("/reset-password",{query:D.optional(D.object({token:D.string().optional(),currentURL:D.string().optional()})),method:"POST",body:D.object({newPassword:D.string({description:"The new password to set"}),token:D.string({description:"The token to reset the password"}).optional()}),metadata:{openapi:{description:"Reset the password for a user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{status:{type:"boolean"}}}}}}}}}},async e=>{let t=e.body.token||e.query?.token||(e.query?.currentURL?new URL(e.query.currentURL).searchParams.get("token"):"");if(!t)throw new re("BAD_REQUEST",{message:f.INVALID_TOKEN});let{newPassword:r}=e.body,o=e.context.password?.config.minPasswordLength,n=e.context.password?.config.maxPasswordLength;if(r.length<o)throw new re("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});if(r.length>n)throw new re("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let i=`reset-password:${t}`,a=await e.context.internalAdapter.findVerificationValue(i);if(!a||a.expiresAt<new Date)throw new re("BAD_REQUEST",{message:f.INVALID_TOKEN});await e.context.internalAdapter.deleteVerificationValue(a.id);let d=a.value,c=await e.context.password.hash(r);return(await e.context.internalAdapter.findAccounts(d)).find(y=>y.providerId==="credential")?(await e.context.internalAdapter.updatePassword(d,c),e.json({status:!0})):(await e.context.internalAdapter.createAccount({userId:d,providerId:"credential",password:c,accountId:d}),e.json({status:!0}))});import{z as U}from"zod";import{APIError as _}from"better-call";import{z as h}from"zod";import{APIError as Ar}from"better-call";var Ca=h.object({id:h.string(),providerId:h.string(),accountId:h.string(),userId:h.string(),accessToken:h.string().nullish(),refreshToken:h.string().nullish(),idToken:h.string().nullish(),accessTokenExpiresAt:h.date().nullish(),refreshTokenExpiresAt:h.date().nullish(),scope:h.string().nullish(),password:h.string().nullish(),createdAt:h.date().default(()=>new Date),updatedAt:h.date().default(()=>new Date)}),Na=h.object({id:h.string(),email:h.string().transform(e=>e.toLowerCase()),emailVerified:h.boolean().default(!1),name:h.string(),image:h.string().nullish(),createdAt:h.date().default(()=>new Date),updatedAt:h.date().default(()=>new Date)}),ja=h.object({id:h.string(),userId:h.string(),expiresAt:h.date(),createdAt:h.date().default(()=>new Date),updatedAt:h.date().default(()=>new Date),token:h.string(),ipAddress:h.string().nullish(),userAgent:h.string().nullish()}),$a=h.object({id:h.string(),value:h.string(),createdAt:h.date().default(()=>new Date),updatedAt:h.date().default(()=>new Date),expiresAt:h.date(),identifier:h.string()});function kr(e,t){let r={...t==="user"?e.user?.additionalFields:{},...t==="session"?e.session?.additionalFields:{}};for(let o of e.plugins||[])o.schema&&o.schema[t]&&(r={...r,...o.schema[t].fields});return r}s(kr,"getAllFields");function Rr(e,t){let r=t.action||"create",o=t.fields,n={};for(let i in o){if(i in e){if(o[i].input===!1){if(o[i].defaultValue){n[i]=o[i].defaultValue;continue}continue}if(o[i].validator?.input&&e[i]!==void 0){n[i]=o[i].validator.input.parse(e[i]);continue}if(o[i].transform?.input&&e[i]!==void 0){n[i]=o[i].transform?.input(e[i]);continue}n[i]=e[i];continue}if(o[i].defaultValue&&r==="create"){n[i]=o[i].defaultValue;continue}if(o[i].required&&r==="create")throw new Ar("BAD_REQUEST",{message:`${i} is required`})}return n}s(Rr,"parseInputData");function ue(e,t,r){let o=kr(e,"user");return Rr(t||{},{fields:o,action:r})}s(ue,"parseUserInput");var ut=s(()=>w("/update-user",{method:"POST",body:U.record(U.string(),U.any()),use:[x],metadata:{openapi:{description:"Update the current user",requestBody:{content:{"application/json":{schema:{type:"object",properties:{name:{type:"string",description:"The name of the user"},image:{type:"string",description:"The image of the user"}}}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"}}}}}}}}}},async e=>{let t=e.body;if(t.email)throw new _("BAD_REQUEST",{message:f.EMAIL_CAN_NOT_BE_UPDATED});let{name:r,image:o,...n}=t,i=e.context.session;if(o===void 0&&r===void 0&&Object.keys(n).length===0)return e.json({status:!0});let a=ue(e.context.options,n,"update"),d=await e.context.internalAdapter.updateUserByEmail(i.user.email,{name:r,image:o,...a});return await I(e,{session:i.session,user:d}),e.json({status:!0})}),"updateUser"),pt=w("/change-password",{method:"POST",body:U.object({newPassword:U.string({description:"The new password to set"}),currentPassword:U.string({description:"The current password"}),revokeOtherSessions:U.boolean({description:"Revoke all other sessions"}).optional()}),use:[x],metadata:{openapi:{description:"Change the password of the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{description:"The user object",$ref:"#/components/schemas/User"}}}}}}}}}},async e=>{let{newPassword:t,currentPassword:r,revokeOtherSessions:o}=e.body,n=e.context.session,i=e.context.password.config.minPasswordLength;if(t.length<i)throw e.context.logger.error("Password is too short"),new _("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let a=e.context.password.config.maxPasswordLength;if(t.length>a)throw e.context.logger.error("Password is too long"),new _("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let c=(await e.context.internalAdapter.findAccounts(n.user.id)).find(g=>g.providerId==="credential"&&g.password);if(!c||!c.password)throw new _("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});let l=await e.context.password.hash(t);if(!await e.context.password.verify({hash:c.password,password:r}))throw new _("BAD_REQUEST",{message:f.INVALID_PASSWORD});await e.context.internalAdapter.updateAccount(c.id,{password:l});let y=null;if(o){await e.context.internalAdapter.deleteSessions(n.user.id);let g=await e.context.internalAdapter.createSession(n.user.id,e.headers);if(!g)throw new _("INTERNAL_SERVER_ERROR",{message:f.FAILED_TO_GET_SESSION});await I(e,{session:g,user:n.user}),y=g.token}return e.json({token:y})}),mt=w("/set-password",{method:"POST",body:U.object({newPassword:U.string()}),metadata:{SERVER_ONLY:!0},use:[x]},async e=>{let{newPassword:t}=e.body,r=e.context.session,o=e.context.password.config.minPasswordLength;if(t.length<o)throw e.context.logger.error("Password is too short"),new _("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let n=e.context.password.config.maxPasswordLength;if(t.length>n)throw e.context.logger.error("Password is too long"),new _("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});let a=(await e.context.internalAdapter.findAccounts(r.user.id)).find(c=>c.providerId==="credential"&&c.password),d=await e.context.password.hash(t);if(!a)return await e.context.internalAdapter.linkAccount({userId:r.user.id,providerId:"credential",accountId:r.user.id,password:d}),e.json({status:!0});throw new _("BAD_REQUEST",{message:"user already has a password"})}),ft=w("/delete-user",{method:"POST",use:[x],body:U.object({callbackURL:U.string().optional(),password:U.string().optional(),token:U.string().optional()}),metadata:{openapi:{description:"Delete the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object"}}}}}}}},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options",{session:e.context.session}),new _("NOT_FOUND");let t=e.context.session;if(e.body.password){let i=(await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId==="credential"&&d.password);if(!i||!i.password)throw new _("BAD_REQUEST",{message:f.CREDENTIAL_ACCOUNT_NOT_FOUND});if(!await e.context.password.verify({hash:i.password,password:e.body.password}))throw new _("BAD_REQUEST",{message:f.INVALID_PASSWORD})}else if(e.context.options.session?.freshAge){let n=t.session.createdAt.getTime(),i=e.context.options.session.freshAge;if(Date.now()-n>i)throw new _("BAD_REQUEST",{message:f.SESSION_EXPIRED})}if(e.body.token)return await ye({query:{token:e.body.token},...e}),e.json({success:!0,message:"User deleted"});if(e.context.options.user.deleteUser?.sendDeleteAccountVerification){let n=X(32,"0-9","a-z");await e.context.internalAdapter.createVerificationValue({value:t.user.id,identifier:`delete-account-${n}`,expiresAt:new Date(Date.now()+1e3*60*60*24)});let i=`${e.context.baseURL}/delete-user/callback?token=${n}&callbackURL=${e.body.callbackURL||"/"}`;return await e.context.options.user.deleteUser.sendDeleteAccountVerification({user:t.user,url:i,token:n},e.request),e.json({success:!0,message:"Verification email sent"})}let r=e.context.options.user.deleteUser?.beforeDelete;r&&await r(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),j(e);let o=e.context.options.user.deleteUser?.afterDelete;return o&&await o(t.user,e.request),e.json({success:!0,message:"User deleted"})}),ye=w("/delete-user/callback",{method:"GET",query:U.object({token:U.string(),callbackURL:U.string().optional()})},async e=>{if(!e.context.options.user?.deleteUser?.enabled)throw e.context.logger.error("Delete user is disabled. Enable it in the options"),new _("NOT_FOUND");let t=await Q(e);if(!t)throw new _("NOT_FOUND",{message:f.FAILED_TO_GET_USER_INFO});let r=await e.context.internalAdapter.findVerificationValue(`delete-account-${e.query.token}`);if(!r||r.expiresAt<new Date)throw r&&await e.context.internalAdapter.deleteVerificationValue(r.id),new _("NOT_FOUND",{message:f.INVALID_TOKEN});if(r.value!==t.user.id)throw new _("NOT_FOUND",{message:f.INVALID_TOKEN});let o=e.context.options.user.deleteUser?.beforeDelete;o&&await o(t.user,e.request),await e.context.internalAdapter.deleteUser(t.user.id),await e.context.internalAdapter.deleteSessions(t.user.id),await e.context.internalAdapter.deleteAccounts(t.user.id),await e.context.internalAdapter.deleteVerificationValue(r.id),j(e);let n=e.context.options.user.deleteUser?.afterDelete;if(n&&await n(t.user,e.request),e.query.callbackURL)throw e.redirect(e.query.callbackURL||"/");return e.json({success:!0,message:"User deleted"})}),gt=w("/change-email",{method:"POST",query:U.object({currentURL:U.string().optional()}).optional(),body:U.object({newEmail:U.string({description:"The new email to set"}).email(),callbackURL:U.string({description:"The URL to redirect to after email verification"}).optional()}),use:[x],metadata:{openapi:{responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{user:{type:"object"},status:{type:"boolean"}}}}}}}}}},async e=>{if(!e.context.options.user?.changeEmail?.enabled)throw e.context.logger.error("Change email is disabled."),new _("BAD_REQUEST",{message:"Change email is disabled"});if(e.body.newEmail===e.context.session.user.email)throw e.context.logger.error("Email is the same"),new _("BAD_REQUEST",{message:"Email is the same"});if(await e.context.internalAdapter.findUserByEmail(e.body.newEmail))throw e.context.logger.error("Email already exists"),new _("BAD_REQUEST",{message:"Couldn't update your email"});if(e.context.session.user.emailVerified!==!0){let n=await e.context.internalAdapter.updateUserByEmail(e.context.session.user.email,{email:e.body.newEmail});return e.json({status:!0})}if(!e.context.options.user.changeEmail.sendChangeEmailVerification)throw e.context.logger.error("Verification email isn't enabled."),new _("BAD_REQUEST",{message:"Verification email isn't enabled"});let r=await V(e.context.secret,e.context.session.user.email,e.body.newEmail),o=`${e.context.baseURL}/verify-email?token=${r}&callbackURL=${e.body.callbackURL||e.query?.currentURL||"/"}`;return await e.context.options.user.changeEmail.sendChangeEmailVerification({user:e.context.session.user,newEmail:e.body.newEmail,url:o,token:r},e.request),e.json({status:!0})});var Er=s((e="Unknown")=>`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Authentication Error</title>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --accent-color: #000000;
            --error-color: #dc3545;
            --border-color: #e9ecef;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            line-height: 1.5;
        }
        .error-container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2.5rem;
            text-align: center;
            max-width: 90%;
            width: 400px;
        }
        h1 {
            color: var(--error-color);
            font-size: 1.75rem;
            margin-bottom: 1rem;
            font-weight: 600;
        }
        p {
            margin-bottom: 1.5rem;
            color: #495057;
        }
        .btn {
            background-color: var(--accent-color);
            color: #ffffff;
            text-decoration: none;
            padding: 0.75rem 1.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: inline-block;
            font-weight: 500;
            border: 2px solid var(--accent-color);
        }
        .btn:hover {
            background-color: #131721;
        }
        .error-code {
            font-size: 0.875rem;
            color: #6c757d;
            margin-top: 1.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
        }
        .icon {
            font-size: 3rem;
            margin-bottom: 1rem;
        }
    </style>
</head>
<body>
    <div class="error-container">
        <div class="icon">\u26A0\uFE0F</div>
        <h1>Better Auth Error</h1>
        <p>We encountered an issue while processing your request. Please try again or contact the application owner if the problem persists.</p>
        <a href="/" id="returnLink" class="btn">Return to Application</a>
        <div class="error-code">Error Code: <span id="errorCode">${e}</span></div>
    </div>
</body>
</html>`,"html"),ht=w("/error",{method:"GET",metadata:{...Z,openapi:{description:"Displays an error page",responses:{200:{description:"Success",content:{"text/html":{schema:{type:"string"}}}}}}}},async e=>{let t=new URL(e.request?.url||"").searchParams.get("error")||"Unknown";return new Response(Er(t),{headers:{"Content-Type":"text/html"}})});var wt=w("/ok",{method:"GET",metadata:{...Z,openapi:{description:"Check if the API is working",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{ok:{type:"boolean"}}}}}}}}}},async e=>e.json({ok:!0}));import{z as K}from"zod";import{APIError as z}from"better-call";var bt=s(()=>w("/sign-up/email",{method:"POST",query:K.object({currentURL:K.string().optional()}).optional(),body:K.record(K.string(),K.any()),metadata:{openapi:{description:"Sign up a user using email and password",requestBody:{content:{"application/json":{schema:{type:"object",properties:{name:{type:"string",description:"The name of the user"},email:{type:"string",description:"The email of the user"},password:{type:"string",description:"The password of the user"},callbackURL:{type:"string",description:"The URL to use for email verification callback"}},required:["name","email","password"]}}}},responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{id:{type:"string",description:"The id of the user"},email:{type:"string",description:"The email of the user"},name:{type:"string",description:"The name of the user"},image:{type:"string",description:"The image of the user"},emailVerified:{type:"boolean",description:"If the email is verified"}}}}}}}}}},async e=>{if(!e.context.options.emailAndPassword?.enabled)throw new z("BAD_REQUEST",{message:"Email and password sign up is not enabled"});let t=e.body,{name:r,email:o,password:n,image:i,callbackURL:a,...d}=t;if(!K.string().email().safeParse(o).success)throw new z("BAD_REQUEST",{message:f.INVALID_EMAIL});let l=e.context.password.config.minPasswordLength;if(n.length<l)throw e.context.logger.error("Password is too short"),new z("BAD_REQUEST",{message:f.PASSWORD_TOO_SHORT});let p=e.context.password.config.maxPasswordLength;if(n.length>p)throw e.context.logger.error("Password is too long"),new z("BAD_REQUEST",{message:f.PASSWORD_TOO_LONG});if((await e.context.internalAdapter.findUserByEmail(o))?.user)throw e.context.logger.info(`Sign-up attempt for existing email: ${o}`),new z("UNPROCESSABLE_ENTITY",{message:f.USER_ALREADY_EXISTS});let g=ue(e.context.options,d),u;try{if(u=await e.context.internalAdapter.createUser({email:o.toLowerCase(),name:r,image:i,...g,emailVerified:!1}),!u)throw new z("BAD_REQUEST",{message:f.FAILED_TO_CREATE_USER})}catch(L){throw se&&e.context.logger.error("Failed to create user",L),new z("UNPROCESSABLE_ENTITY",{message:f.FAILED_TO_CREATE_USER,details:L})}if(!u)throw new z("UNPROCESSABLE_ENTITY",{message:f.FAILED_TO_CREATE_USER});let A=await e.context.password.hash(n);if(await e.context.internalAdapter.linkAccount({userId:u.id,providerId:"credential",accountId:u.id,password:A}),e.context.options.emailVerification?.sendOnSignUp){let L=await V(e.context.secret,u.email),q=`${e.context.baseURL}/verify-email?token=${L}&callbackURL=${t.callbackURL||e.query?.currentURL||"/"}`;await e.context.options.emailVerification?.sendVerificationEmail?.({user:u,url:q,token:L},e.request)}if(!e.context.options.emailAndPassword.autoSignIn||e.context.options.emailAndPassword.requireEmailVerification)return e.json({token:null});let E=await e.context.internalAdapter.createSession(u.id,e.request);if(!E)throw new z("BAD_REQUEST",{message:f.FAILED_TO_CREATE_SESSION});return await I(e,{session:E,user:u}),e.json({token:E.token})}),"signUpEmail");import{z as oe}from"zod";import{APIError as yt}from"better-call";var At=w("/list-accounts",{method:"GET",use:[x],metadata:{openapi:{description:"List all accounts linked to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"array",items:{type:"object",properties:{id:{type:"string"},provider:{type:"string"}}}}}}}}}}},async e=>{let t=e.context.session,r=await e.context.internalAdapter.findAccounts(t.user.id);return e.json(r.map(o=>({id:o.id,provider:o.providerId})))}),kt=w("/link-social",{method:"POST",requireHeaders:!0,query:oe.object({currentURL:oe.string().optional()}).optional(),body:oe.object({callbackURL:oe.string({description:"The URL to redirect to after the user has signed in"}).optional(),provider:oe.enum(we,{description:"The OAuth2 provider to use"})}),use:[x],metadata:{openapi:{description:"Link a social account to the user",responses:{200:{description:"Success",content:{"application/json":{schema:{type:"object",properties:{url:{type:"string"},redirect:{type:"boolean"}},required:["url","redirect"]}}}}}}}},async e=>{let t=e.context.session;if((await e.context.internalAdapter.findAccounts(t.user.id)).find(d=>d.providerId===e.body.provider))throw new yt("BAD_REQUEST",{message:f.SOCIAL_ACCOUNT_ALREADY_LINKED});let n=e.context.socialProviders.find(d=>d.id===e.body.provider);if(!n)throw e.context.logger.error("Provider not found. Make sure to add the provider in your auth config",{provider:e.body.provider}),new yt("NOT_FOUND",{message:f.PROVIDER_NOT_FOUND});let i=await ce(e,{userId:t.user.id,email:t.user.email}),a=await n.createAuthorizationURL({state:i.state,codeVerifier:i.codeVerifier,redirectURI:`${e.context.baseURL}/callback/${n.id}`});return e.json({url:a.toString(),redirect:!0})});function Rt(e,t){if(t.advanced?.ipAddress?.disableIpTracking)return null;let r="127.0.0.1";if(Ue)return r;let n=t.advanced?.ipAddress?.ipAddressHeaders||["x-client-ip","x-forwarded-for","cf-connecting-ip","fastly-client-ip","x-real-ip","x-cluster-client-ip","x-forwarded","forwarded-for","forwarded"],i=e instanceof Request?e.headers:e;for(let a of n){let d=i.get(a);if(typeof d=="string"){let c=d.split(",")[0].trim();if(c)return c}}return null}s(Rt,"getIp");function Ur(e,t,r){let o=Date.now(),n=t*1e3;return o-r.lastRequest<n&&r.count>=e}s(Ur,"shouldRateLimit");function _r(e){return new Response(JSON.stringify({message:"Too many requests. Please try again later."}),{status:429,statusText:"Too Many Requests",headers:{"X-Retry-After":e.toString()}})}s(_r,"rateLimitResponse");function Tr(e,t){let r=Date.now(),o=t*1e3;return Math.ceil((e+o-r)/1e3)}s(Tr,"getRetryAfter");function Or(e,t){let r="rateLimit",o=e.adapter;return{get:s(async n=>(await o.findMany({model:r,where:[{field:"key",value:n}]}))[0],"get"),set:s(async(n,i,a)=>{try{a?await o.updateMany({model:t??"rateLimit",where:[{field:"key",value:n}],update:{count:i.count,lastRequest:i.lastRequest}}):await o.create({model:t??"rateLimit",data:{key:n,count:i.count,lastRequest:i.lastRequest}})}catch(d){e.logger.error("Error setting rate limit",d)}},"set")}}s(Or,"createDBStorage");var Et=new Map;function Sr(e){return e.options.rateLimit?.customStorage?e.options.rateLimit.customStorage:e.rateLimit.storage==="secondary-storage"?{get:s(async r=>{let o=await e.options.secondaryStorage?.get(r);return o?JSON.parse(o):void 0},"get"),set:s(async(r,o)=>{await e.options.secondaryStorage?.set?.(r,JSON.stringify(o))},"set")}:e.rateLimit.storage==="memory"?{async get(r){return Et.get(r)},async set(r,o,n){Et.set(r,o)}}:Or(e,e.rateLimit.modelName)}s(Sr,"getRateLimitStorage");async function Ut(e,t){if(!t.rateLimit.enabled)return;let r=t.baseURL,o=e.url.replace(r,"").split("?")[0],n=t.rateLimit.window,i=t.rateLimit.max,a=Rt(e,t.options)+o,c=vr().find(g=>g.pathMatcher(o));c&&(n=c.window,i=c.max);for(let g of t.options.plugins||[])if(g.rateLimit){let u=g.rateLimit.find(A=>A.pathMatcher(o));if(u){n=u.window,i=u.max;break}}if(t.rateLimit.customRules){let g=Object.keys(t.rateLimit.customRules).find(u=>u.includes("*")?ie(u)(o):u===o);if(g){let u=t.rateLimit.customRules[g],A=typeof u=="function"?await u(e):u;A&&(n=A.window,i=A.max)}}let l=Sr(t),p=await l.get(a),y=Date.now();if(!p)await l.set(a,{key:a,count:1,lastRequest:y});else{let g=y-p.lastRequest;if(Ur(i,n,p)){let u=Tr(p.lastRequest,n);return _r(u)}else g>n*1e3?await l.set(a,{...p,count:1,lastRequest:y},!0):await l.set(a,{...p,count:p.count+1,lastRequest:y},!0)}}s(Ut,"onRequestRateLimit");function vr(){return[{pathMatcher(t){return t.startsWith("/sign-in")||t.startsWith("/sign-up")||t.startsWith("/change-password")||t.startsWith("/change-email")},window:10,max:3}]}s(vr,"getDefaultSpecialRules");import"defu";import{APIError as rt}from"better-call";function Cr(e,t){let r=t.plugins?.reduce((d,c)=>({...d,...c.endpoints}),{}),o=t.plugins?.map(d=>d.middlewares?.map(c=>{let l=s(async p=>c.middleware({...p,context:{...e,...p.context}}),"middleware");return l.path=c.path,l.options=c.middleware.options,l.headers=c.middleware.headers,{path:c.path,middleware:l}})).filter(d=>d!==void 0).flat()||[],i={...{signInSocial:ot,callbackOAuth:nt,getSession:be(),signOut:st,signUpEmail:bt(),signInEmail:it,forgetPassword:ct,resetPassword:lt,verifyEmail:tt,sendVerificationEmail:et,changeEmail:gt,changePassword:pt,setPassword:mt,updateUser:ut(),deleteUser:ft,forgetPasswordCallback:dt,listSessions:Ze(),revokeSession:Ke,revokeSessions:Je,revokeOtherSessions:Ye,linkSocialAccount:kt,listUserAccounts:At,deleteUserCallback:ye},...r,ok:wt,error:ht},a={};for(let[d,c]of Object.entries(i))a[d]=async(l={})=>{c.headers=new Headers;let p={setHeader(m,b){c.headers.set(m,b)},setCookie(m,b,O){Pr(c.headers,m,b,O)},getCookie(m,b){let S=l.headers?.get("cookie");return Lr(S||"",m,b)},getSignedCookie(m,b,O){let S=l.headers;return S?xr(S,b,m,O):null},async setSignedCookie(m,b,O,S){await Dr(c.headers,m,b,O,S)},redirect(m){return c.headers.set("Location",m),new G("FOUND")},responseHeader:c.headers},y=await e,g=null,u={...p,...l,path:c.path,context:{...y,...l.context,session:null,setNewSession:s(function(m){this.newSession=m,g=m},"setNewSession")}},A=t.plugins||[],E=A.map(m=>{if(m.hooks?.before)return m.hooks.before}).filter(m=>m!==void 0).flat(),L=A.map(m=>{if(m.hooks?.after)return m.hooks.after}).filter(m=>m!==void 0).flat();t.hooks?.before&&E.push({matcher:s(()=>!0,"matcher"),handler:t.hooks.before}),t.hooks?.after&&L.push({matcher:s(()=>!0,"matcher"),handler:t.hooks.after});for(let m of E){if(!m.matcher(u))continue;let b=await m.handler(u);if(b&&"context"in b){u={...u,...b.context};continue}if(b)return b}let q;try{q=await c(u),g&&(u.context.newSession=g)}catch(m){if(g&&(u.context.newSession=g),m instanceof G){if(!L?.length)throw m.headers=c.headers,m;u.context.returned=m,u.context.returned.headers=c.headers;for(let b of L||[])if(b.matcher(u))try{let S=await b.handler(u);S&&"response"in S&&(u.context.returned=S.response)}catch(S){if(S instanceof G){u.context.returned=S;continue}throw S}if(u.context.returned instanceof G)throw u.context.returned.headers=c.headers,u.context.returned;return u.context.returned}throw m}u.context.returned=q,u.responseHeader=c.headers;for(let m of L)if(m.matcher(u))try{let O=await m.handler(u);if(O)if("responseHeader"in O){let S=O.responseHeader;u.responseHeader=S}else u.context.returned=O}catch(O){if(O instanceof G){u.context.returned=O;continue}throw O}let C=u.context.returned;if(C instanceof Response&&c.headers.forEach((m,b)=>{b==="set-cookie"?C.headers.append(b,m):C.headers.set(b,m)}),C instanceof G)throw C.headers=c.headers,C;return C},a[d].path=c.path,a[d].method=c.method,a[d].options=c.options,a[d].headers=c.headers;return{api:a,middlewares:o}}s(Cr,"getEndpoints");var sd=s((e,t)=>{let{api:r,middlewares:o}=Cr(e,t),n=new URL(e.baseURL).pathname;return Ir(r,{extraContext:e,basePath:n,routerMiddleware:[{path:"/**",middleware:Oe},...o],async onRequest(i){for(let a of e.options.plugins||[])if(a.onRequest){let d=await a.onRequest(i,e);if(d&&"response"in d)return d.response}return Ut(i,e)},async onResponse(i){for(let a of e.options.plugins||[])if(a.onResponse){let d=await a.onResponse(i,e);if(d)return d.response}return i},onError(i){if(i instanceof G&&i.status==="FOUND")return;if(t.onAPIError?.throw)throw i;if(t.onAPIError?.onError){t.onAPIError.onError(i,e);return}let a=t.logger?.level,d=a==="error"||a==="warn"||a==="debug"?P:void 0;if(t.logger?.disabled!==!0){if(i&&typeof i=="object"&&"message"in i&&typeof i.message=="string"&&(i.message.includes("no column")||i.message.includes("column")||i.message.includes("relation")||i.message.includes("table")||i.message.includes("does not exist"))){e.logger?.error(i.message);return}i instanceof G?(i.status==="INTERNAL_SERVER_ERROR"&&e.logger.error(i.status,i),d?.error(i.message)):e.logger?.error(i&&typeof i=="object"&&"name"in i?i.name:"",i)}}})},"router");export{rt as APIError,nt as callbackOAuth,gt as changeEmail,pt as changePassword,w as createAuthEndpoint,J as createAuthMiddleware,V as createEmailVerificationToken,ft as deleteUser,ye as deleteUserCallback,ht as error,ct as forgetPassword,dt as forgetPasswordCallback,Ps as freshSessionMiddleware,Cr as getEndpoints,be as getSession,Q as getSessionFromCtx,kt as linkSocialAccount,Ze as listSessions,At as listUserAccounts,wt as ok,ke as optionsMiddleware,Oe as originCheckMiddleware,lt as resetPassword,Ye as revokeOtherSessions,Ke as revokeSession,Je as revokeSessions,sd as router,et as sendVerificationEmail,wr as sendVerificationEmailFn,x as sessionMiddleware,mt as setPassword,it as signInEmail,ot as signInSocial,st as signOut,bt as signUpEmail,ut as updateUser,tt as verifyEmail};
